; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	d:\-=SVN=-\svplayer\src\subtitles\Rasterizer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4Rasterizer@@6B@				; Rasterizer::`RTTI Complete Object Locator'
PUBLIC	??_R4length_error@std@@6B@			; std::length_error::`RTTI Complete Object Locator'
PUBLIC	??_R3length_error@std@@8			; std::length_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2length_error@std@@8			; std::length_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@length_error@std@@8		; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_GRasterizer@@UAEPAXI@Z			; Rasterizer::`scalar deleting destructor'
PUBLIC	??0CPoint@@QAE@UtagPOINT@@@Z			; CPoint::CPoint
PUBLIC	??9CPoint@@QBEHUtagPOINT@@@Z			; CPoint::operator!=
PUBLIC	??0?$allocator@H@std@@QAE@XZ			; std::allocator<int>::allocator<int>
PUBLIC	??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
PUBLIC	??0?$allocator@H@std@@QAE@ABV01@@Z		; std::allocator<int>::allocator<int>
PUBLIC	??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
PUBLIC	?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ; std::vector<int,std::allocator<int> >::_Buy
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
PUBLIC	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?deallocate@?$allocator@H@std@@QAEXPAHI@Z	; std::allocator<int>::deallocate
PUBLIC	??$_Allocate@H@std@@YAPAHIPAH@Z			; std::_Allocate<int>
PUBLIC	?allocate@?$allocator@H@std@@QAEPAHI@Z		; std::allocator<int>::allocate
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$allocator@H@std@@QBEIXZ		; std::allocator<int>::max_size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<int *,int *,std::allocator<int> >
PUBLIC	??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
PUBLIC	??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
PUBLIC	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>
PUBLIC	??$_Fill@PAHH@std@@YAXPAH0ABH@Z			; std::_Fill<int *,int>
PUBLIC	??$fill@PAHH@std@@YAXPAH0ABH@Z			; std::fill<int *,int>
PUBLIC	??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ; std::_Move_cat<int *>
PUBLIC	??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>
PUBLIC	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n
PUBLIC	??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
PUBLIC	??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
PUBLIC	??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator+
PUBLIC	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert
PUBLIC	??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ; std::_Iter_cat<int *>
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Fill_n<int *,unsigned int,int>
PUBLIC	??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z	; stdext::unchecked_fill_n<int *,unsigned int,int>
PUBLIC	??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
PUBLIC	??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
PUBLIC	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::begin
PUBLIC	?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ; std::vector<int,std::allocator<int> >::end
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
PUBLIC	??0?$_Ranit@HHPBHABH@std@@QAE@XZ		; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
PUBLIC	??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
PUBLIC	??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
PUBLIC	?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ; std::vector<int,std::allocator<int> >::_Make_iter
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
PUBLIC	??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z	; stdext::unchecked_copy<int *,int *>
PUBLIC	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
PUBLIC	??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
PUBLIC	??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
PUBLIC	??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*
PUBLIC	??D?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEAAHXZ ; std::_Vector_iterator<int,std::allocator<int> >::operator*
PUBLIC	??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++
PUBLIC	??E?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<int,std::allocator<int> >::operator++
PUBLIC	??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
PUBLIC	??G?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEHABV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@@Z ; std::_Vector_iterator<int,std::allocator<int> >::operator-
PUBLIC	?_Checked_iterator_base@?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEPAHXZ ; std::_Vector_iterator<int,std::allocator<int> >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@@Z ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> > >
PUBLIC	??0?$pair@PAHPAH@std@@QAE@ABQAH0@Z		; std::pair<int *,int *>::pair<int *,int *>
PUBLIC	??$_Med3@PAH@std@@YAXPAH00@Z			; std::_Med3<int *>
PUBLIC	??$_Median@PAH@std@@YAXPAH00@Z			; std::_Median<int *>
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
PUBLIC	??$iter_swap@PAHPAH@std@@YAXPAH0@Z		; std::iter_swap<int *,int *>
PUBLIC	??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ; std::_Unguarded_partition<int *>
PUBLIC	??$_Make_heap@PAHHH@std@@YAXPAH000@Z		; std::_Make_heap<int *,int,int>
PUBLIC	??$make_heap@PAH@std@@YAXPAH0@Z			; std::make_heap<int *>
PUBLIC	??$_Dist_type@PAH@std@@YAPAHPAH@Z		; std::_Dist_type<int *>
PUBLIC	??$_Push_heap@PAHHH@std@@YAXPAHHHH@Z		; std::_Push_heap<int *,int,int>
PUBLIC	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z		; std::_Adjust_heap<int *,int,int>
PUBLIC	??$_Pop_heap@PAHHH@std@@YAXPAH00H0@Z		; std::_Pop_heap<int *,int,int>
PUBLIC	??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z		; std::_Pop_heap_0<int *,int>
PUBLIC	??$pop_heap@PAH@std@@YAXPAH0@Z			; std::pop_heap<int *>
PUBLIC	??$_Sort_heap@PAH@std@@YAXPAH0@Z		; std::_Sort_heap<int *>
PUBLIC	??$sort_heap@PAH@std@@YAXPAH0@Z			; std::sort_heap<int *>
PUBLIC	??$_Val_type@PAH@std@@YAPAHPAH@Z		; std::_Val_type<int *>
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<int *>
PUBLIC	??$_Checked_base@PAH@std@@YAPAHAAPAH@Z		; std::_Checked_base<int *>
PUBLIC	??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ; std::_Iter_random<int *,int *>
PUBLIC	??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ; std::_Ptr_cat<int *,int *>
PUBLIC	??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
PUBLIC	??$unchecked_copy_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::unchecked_copy_backward<int *,int *>
PUBLIC	??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z	; std::_Insertion_sort1<int *,int>
PUBLIC	??$_Insertion_sort@PAH@std@@YAXPAH0@Z		; std::_Insertion_sort<int *>
PUBLIC	??$_Sort@PAHH@std@@YAXPAH0H@Z			; std::_Sort<int *,int>
PUBLIC	??$sort@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAXV?$_Vector_iterator@HV?$allocator@H@std@@@0@0@Z ; std::sort<std::_Vector_iterator<int,std::allocator<int> > >
PUBLIC	??0?$pair@_J_J@std@@QAE@AB_J0@Z			; std::pair<__int64,__int64>::pair<__int64,__int64>
PUBLIC	??$?0_J_J@?$pair@_K_K@std@@QAE@ABU?$pair@_J_J@1@@Z ; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
PUBLIC	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Checked_iterator_base@?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPAU?$pair@_K_K@2@XZ ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??$_Unchecked_uninitialized_move@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Umove@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
PUBLIC	??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ; stdext::_Unchecked_uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z ; std::_Fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z ; std::fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$_Move_cat@PAU?$pair@_K_K@std@@@std@@YA?AU_Undefined_move_tag@0@ABQAU?$pair@_K_K@0@@Z ; std::_Move_cat<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>
PUBLIC	??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Move_backward_opt@PAU?$pair@_K_K@std@@PAU12@Urandom_access_iterator_tag@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Move_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::random_access_iterator_tag,std::_Undefined_move_tag>
PUBLIC	??$_Unchecked_move_backward@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ; stdext::_Unchecked_move_backward<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Insert_n
PUBLIC	??G?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEHABV01@@Z ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator-
PUBLIC	??Y?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=
PUBLIC	??Y?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=
PUBLIC	??H?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV01@H@Z ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+
PUBLIC	?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::insert
PUBLIC	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$unchecked_uninitialized_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAXPAU?$pair@_K_K@std@@IABU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ; stdext::unchecked_uninitialized_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Ufill@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@2@PAU32@IABU32@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ufill
PUBLIC	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
PUBLIC	??$swap@PAV_Aux_cont@std@@@std@@YAXAAPAV_Aux_cont@0@0@Z ; std::swap<std::_Aux_cont *>
PUBLIC	??$swap@V_Aux_cont@std@@@std@@YAXAAV_Aux_cont@0@0@Z ; std::swap<std::_Aux_cont>
PUBLIC	?_Swap_aux@_Container_base_aux@std@@QAEXAAV12@@Z ; std::_Container_base_aux::_Swap_aux
PUBLIC	??$?0U?$pair@_K_K@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	?_Checked_iterator_base@?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPBU?$pair@_K_K@2@XZ ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>
PUBLIC	??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??$_Ptr_cat@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAPAU?$pair@_K_K@0@@Z ; std::_Ptr_cat<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Ucopy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
PUBLIC	??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@XZ ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy
PUBLIC	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
PUBLIC	?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
PUBLIC	??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
PUBLIC	?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
PUBLIC	?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
PUBLIC	?_Buy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Buy
PUBLIC	??$_Construct@U?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
PUBLIC	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$unchecked_uninitialized_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ; stdext::unchecked_uninitialized_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@ABV01@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
PUBLIC	??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
PUBLIC	??0?$pair@_K_K@std@@QAE@AB_K0@Z			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
PUBLIC	??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV01@H@Z ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
PUBLIC	??$max@_K@std@@YAAB_KAB_K0@Z			; std::max<unsigned __int64>
PUBLIC	?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
PUBLIC	??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >
PUBLIC	?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy
PUBLIC	??$_Iter_random@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@0@Z ; std::_Iter_random<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Ptr_cat@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU?$pair@_K_K@0@0@Z ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@@Z ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>
PUBLIC	??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ; stdext::unchecked_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
PUBLIC	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
PUBLIC	?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
PUBLIC	?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
PUBLIC	??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ; std::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>
PUBLIC	??0?$_Ranit@U?$pair@_K_K@std@@HPBU12@ABU12@@std@@QAE@XZ ; std::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>
PUBLIC	??0?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??0?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
PUBLIC	?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
PUBLIC	?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
PUBLIC	??0GaussianKernel@@QAE@N@Z			; GaussianKernel::GaussianKernel
PUBLIC	??1GaussianKernel@@QAE@XZ			; GaussianKernel::~GaussianKernel
PUBLIC	??8?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator!=
PUBLIC	??D?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEABU?$pair@_K_K@1@XZ ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*
PUBLIC	??D?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEAAU?$pair@_K_K@1@XZ ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
PUBLIC	??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
PUBLIC	??$SeparableFilterX@$01@@YAXPAE0HHHPAHHH@Z	; SeparableFilterX<2>
PUBLIC	??$SeparableFilterY@$01@@YAXPAE0HHHPAHHH@Z	; SeparableFilterY<2>
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_7Rasterizer@@6B@				; Rasterizer::`vftable'
EXTRN	??_ERasterizer@@UAEPAXI@Z:PROC			; Rasterizer::`vector deleting destructor'
EXTRN	__imp__BeginPath@4:PROC
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	__imp__AbortPath@4:PROC
EXTRN	__imp__CloseFigure@4:PROC
EXTRN	__imp__EndPath@4:PROC
EXTRN	__imp__GetPath@16:PROC
EXTRN	??_Elength_error@std@@UAEPAXI@Z:PROC		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7Rasterizer@@6B@
CONST	SEGMENT
??_7Rasterizer@@6B@ DD FLAT:??_R4Rasterizer@@6B@	; Rasterizer::`vftable'
	DD	FLAT:??_ERasterizer@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4Rasterizer@@6B@
rdata$r	SEGMENT
??_R4Rasterizer@@6B@ DD 00H				; Rasterizer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRasterizer@@@8
	DD	FLAT:??_R3Rasterizer@@8
rdata$r	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_R4length_error@std@@6B@ ; std::length_error::`vftable'
	DD	FLAT:??_Elength_error@std@@UAEPAXI@Z
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R4length_error@std@@6B@
rdata$r	SEGMENT
??_R4length_error@std@@6B@ DD 00H			; std::length_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R3length_error@std@@8
rdata$r	SEGMENT
??_R3length_error@std@@8 DD 00H				; std::length_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2length_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2length_error@std@@8
rdata$r	SEGMENT
??_R2length_error@std@@8 DD FLAT:??_R1A@?0A@EA@length_error@std@@8 ; std::length_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@logic_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@length_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@length_error@std@@8 DD FLAT:??_R0?AVlength_error@std@@@8 ; std::length_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3length_error@std@@8
rdata$r	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
	ORG $+12
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Push_heap@PAHHH@std@@YAXPAHHHH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Push_heap@PAHHH@std@@YAXPAHHHH@Z PROC		; std::_Push_heap<int *,int,int>, COMDAT

; 1971 : 	for (_Diff _Idx = (_Hole - 1) / 2;

	mov	ecx, DWORD PTR __Hole$[esp-4]
	lea	eax, DWORD PTR [ecx-1]
	cdq
	sub	eax, edx
	push	ebx

; 1972 : 		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);
; 1973 : 		_Idx = (_Hole - 1) / 2)

	mov	ebx, DWORD PTR __Top$[esp]
	sar	eax, 1
	cmp	ebx, ecx
	jge	SHORT $LN8@Push_heap
	push	esi
	mov	esi, DWORD PTR __First$[esp+4]
	push	edi
	mov	edi, DWORD PTR __Val$[esp+8]
	npad	1
$LL3@Push_heap:
	mov	edx, DWORD PTR [esi+eax*4]
	cmp	edx, edi
	jge	SHORT $LN9@Push_heap

; 1974 : 		{	// move _Hole up to parent
; 1975 : 		*(_First + _Hole) = *(_First + _Idx);

	mov	DWORD PTR [esi+ecx*4], edx

; 1976 : 		_Hole = _Idx;

	mov	ecx, eax
	dec	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ebx, ecx
	jl	SHORT $LL3@Push_heap
$LN9@Push_heap:

; 1977 : 		}
; 1978 : 
; 1979 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	DWORD PTR [esi+ecx*4], edi
	pop	edi
	pop	esi
	pop	ebx

; 1980 : 	}

	ret	0
$LN8@Push_heap:

; 1977 : 		}
; 1978 : 
; 1979 : 	*(_First + _Hole) = _Val;	// drop _Val into final hole

	mov	eax, DWORD PTR __Val$[esp]
	mov	edx, DWORD PTR __First$[esp]
	mov	DWORD PTR [edx+ecx*4], eax
	pop	ebx

; 1980 : 	}

	ret	0
??$_Push_heap@PAHHH@std@@YAXPAHHHH@Z ENDP		; std::_Push_heap<int *,int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<int *,int *,std::allocator<int> >, COMDAT

; 144  : 	_DEBUG_RANGE(_First, _Last);
; 145  : 	_DEBUG_POINTER(_Dest);
; 146  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 147  : 	_FwdIt _Result = _Dest + _Count;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 148  : 	if (_Count > 0)

	test	eax, eax
	jbe	SHORT $LN4@Uninit_cop

; 149  : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Count * sizeof (*_First), &*_First, _Count * sizeof (*_First));	// NB: non-overlapping move

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN4@Uninit_cop:
	pop	edi

; 150  : 	return _Result;

	mov	eax, esi
	pop	esi

; 151  : 	}

	ret	0
??$_Uninit_copy@PAHPAHV?$allocator@H@std@@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3171 : 	for (; 0 < _Count; --_Count, ++_First)

	mov	eax, DWORD PTR __Count$[esp-4]
	test	eax, eax
	jbe	SHORT $LN1@Fill_n
	mov	edx, DWORD PTR __Val$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
$LL3@Fill_n:

; 3172 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL3@Fill_n
	pop	esi
$LN1@Fill_n:

; 3173 : 	}

	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHU_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z PROC		; std::_Adjust_heap<int *,int,int>, COMDAT

; 2054 : 	_Diff _Top = _Hole;

	mov	ecx, DWORD PTR __Hole$[esp-4]

; 2055 : 	_Diff _Idx = 2 * _Hole + 2;
; 2056 : 
; 2057 : 	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)

	mov	edx, DWORD PTR __First$[esp-4]
	push	esi
	mov	esi, DWORD PTR __Bottom$[esp]
	lea	eax, DWORD PTR [ecx+ecx+2]
	cmp	eax, esi
	push	edi
	mov	edi, ecx
	jge	SHORT $LN10@Adjust_hea
	push	ebx
	npad	7
$LL5@Adjust_hea:

; 2058 : 		{	// move _Hole down to larger child
; 2059 : 		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))

	mov	ebx, DWORD PTR [edx+eax*4]
	cmp	ebx, DWORD PTR [edx+eax*4-4]
	jge	SHORT $LN2@Adjust_hea

; 2060 : 			--_Idx;

	dec	eax
$LN2@Adjust_hea:

; 2061 : 		*(_First + _Hole) = *(_First + _Idx), _Hole = _Idx;

	mov	ebx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR [edx+ecx*4], ebx
	mov	ecx, eax
	lea	eax, DWORD PTR [eax+eax+2]
	cmp	eax, esi
	jl	SHORT $LL5@Adjust_hea
	pop	ebx
$LN10@Adjust_hea:

; 2062 : 		}
; 2063 : 
; 2064 : 	if (_Idx == _Bottom)

	jne	SHORT $LN1@Adjust_hea

; 2065 : 		{	// only child at bottom, move _Hole down to it
; 2066 : 		*(_First + _Hole) = *(_First + (_Bottom - 1));

	mov	eax, DWORD PTR [edx+esi*4-4]
	mov	DWORD PTR [edx+ecx*4], eax

; 2067 : 		_Hole = _Bottom - 1;

	lea	ecx, DWORD PTR [esi-1]
$LN1@Adjust_hea:

; 2068 : 		}
; 2069 : 	std::_Push_heap(_First, _Hole, _Top, _Val);

	mov	eax, DWORD PTR __Val$[esp+4]
	push	eax
	push	edi
	push	ecx
	push	edx
	call	??$_Push_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Push_heap<int *,int,int>
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi

; 2070 : 	}

	ret	0
??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z ENDP		; std::_Adjust_heap<int *,int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$swap@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H@std@@YAXAAH0@Z PROC				; std::swap<int>, COMDAT

; 18   : 	if (&_Left != &_Right)

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@swap

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [eax]
	push	esi

; 21   : 
; 22   : 		_Left = _Right;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [ecx], edx
	pop	esi
$LN1@swap:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@H@std@@YAXAAH0@Z ENDP				; std::swap<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPBU?$pair@_K_K@2@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPBU?$pair@_K_K@2@XZ PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base, COMDAT
; _this$ = eax

; 47   : 		return _Myptr;

	mov	eax, DWORD PTR [eax+4]

; 48   : 	}

	ret	0
?_Checked_iterator_base@?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPBU?$pair@_K_K@2@XZ ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPAU?$pair@_K_K@2@XZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPAU?$pair@_K_K@2@XZ PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base, COMDAT
; _this$ = eax

; 305  : 		return this->_Myptr;

	mov	eax, DWORD PTR [eax+4]

; 306  : 	}

	ret	0
?_Checked_iterator_base@?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEPAU?$pair@_K_K@2@XZ ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>, COMDAT
; __Last$ = ecx
; __Dest$ = eax

; 2647 : 	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators

	mov	edx, DWORD PTR __First$[esp-4]

; 2648 : 	_DEBUG_RANGE(_First, _Last);
; 2649 : 	while (_First != _Last)

	cmp	edx, ecx
	je	SHORT $LN1@Copy_backw
	push	esi
	npad	7
$LL2@Copy_backw:

; 2650 : 		*--_Dest = *--_Last;

	mov	esi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	sub	eax, 16					; 00000010H
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	cmp	ecx, edx
	jne	SHORT $LL2@Copy_backw
	pop	esi
$LN1@Copy_backw:

; 2651 : 	return (_Dest);
; 2652 : 	}

	ret	0
??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z PROC ; std::_Iter_cat<int *>, COMDAT

; 953  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 954  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 955  : 	}

	ret	0
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z ENDP ; std::_Iter_cat<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>, COMDAT
; __It$ = eax

; 1139 : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR [eax+4]

; 1140 : 	}

	ret	0
??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>, COMDAT
; __It$ = eax

; 1139 : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR [eax+4]

; 1140 : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Make_heap@PAHHH@std@@YAXPAH000@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
??$_Make_heap@PAHHH@std@@YAXPAH000@Z PROC		; std::_Make_heap<int *,int,int>, COMDAT

; 2162 : 	{	// make nontrivial [_First, _Last) into a heap, using operator<

	push	ebx

; 2163 : 	_Diff _Bottom = _Last - _First;

	mov	ebx, DWORD PTR __First$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+8]
	sub	edi, ebx
	sar	edi, 2

; 2164 : 
; 2165 : 	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )

	mov	eax, edi
	cdq
	sub	eax, edx
	mov	esi, eax
	sar	esi, 1
	test	esi, esi
	jle	SHORT $LN1@Make_heap
	npad	3
$LL2@Make_heap:

; 2166 : 		{	// reheap top half, bottom to top
; 2167 : 		--_Hole;
; 2168 : 		std::_Adjust_heap(_First, _Hole, _Bottom,
; 2169 : 			_Ty(*(_First + _Hole)));

	mov	eax, DWORD PTR [ebx+esi*4-4]
	dec	esi
	push	eax
	push	edi
	push	esi
	push	ebx
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H
	test	esi, esi
	jg	SHORT $LL2@Make_heap
$LN1@Make_heap:
	pop	edi
	pop	esi
	pop	ebx

; 2170 : 		}
; 2171 : 	}

	ret	0
??$_Make_heap@PAHHH@std@@YAXPAH000@Z ENDP		; std::_Make_heap<int *,int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Val_type<int *>, COMDAT

; 1740 : 	return (0);

	xor	eax, eax

; 1741 : 	}

	ret	0
??$_Val_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Val_type<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Dist_type@PAH@std@@YAPAHPAH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Dist_type@PAH@std@@YAPAHPAH@Z PROC			; std::_Dist_type<int *>, COMDAT

; 1805 : 	return (0);

	xor	eax, eax

; 1806 : 	}

	ret	0
??$_Dist_type@PAH@std@@YAPAHPAH@Z ENDP			; std::_Dist_type<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$iter_swap@PAHPAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$iter_swap@PAHPAH@std@@YAXPAH0@Z PROC			; std::iter_swap<int *,int *>, COMDAT

; 592  : 	std::swap(*_Left, *_Right);

	mov	eax, DWORD PTR __Left$[esp-4]
	mov	ecx, DWORD PTR __Right$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN3@iter_swap
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
	pop	esi
$LN3@iter_swap:

; 593  : 	}

	ret	0
??$iter_swap@PAHPAH@std@@YAXPAH0@Z ENDP			; std::iter_swap<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$pair@PAHPAH@std@@QAE@ABQAH0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@PAHPAH@std@@QAE@ABQAH0@Z PROC			; std::pair<int *,int *>::pair<int *,int *>, COMDAT
; _this$ = ecx

; 42   : 		{	// construct from specified values

	mov	eax, ecx
	mov	ecx, DWORD PTR __Val1$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Val2$[esp-4]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 43   : 		}

	ret	8
??0?$pair@PAHPAH@std@@QAE@ABQAH0@Z ENDP			; std::pair<int *,int *>::pair<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Checked_iterator_base@?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEPAHXZ
_TEXT	SEGMENT
?_Checked_iterator_base@?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEPAHXZ PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Checked_iterator_base, COMDAT
; _this$ = ecx

; 305  : 		return this->_Myptr;

	mov	eax, DWORD PTR [ecx+4]

; 306  : 	}

	ret	0
?_Checked_iterator_base@?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEPAHXZ ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Checked_iterator_base
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z PROC ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 59   : 	_DESTRUCTOR(_Ty, _Ptr);
; 60   : 	}

	ret	0
??$_Destroy@U?$pair@_K_K@std@@@std@@YAXPAU?$pair@_K_K@0@@Z ENDP ; std::_Destroy<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2673 : 
; 2674 :  #if _HAS_ITERATOR_DEBUGGING
; 2675 : 	_DEBUG_RANGE(_First, _Last);
; 2676 : 	if (_First != _Last)
; 2677 : 		_DEBUG_POINTER(_Dest);
; 2678 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2679 : 
; 2680 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi

; 2681 : 	/* if _OutIt is range checked, this will make sure there is enough space for 
; 2682 : 	 * the memmove
; 2683 : 	 */
; 2684 : 	_OutIt _Result = _Dest - _Off;

	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx

; 2685 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_backw@2

; 2686 : 		_CRT_SECURE_MEMMOVE(&*_Result, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	esi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_backw@2:

; 2687 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2688 : 	}

	ret	0
??$_Copy_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<int *>, COMDAT

; 1147 : 		return _It;

	mov	eax, DWORD PTR __It$[esp-4]
	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAHU_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>, COMDAT
; __Last$ = edx
; __Dest$ = eax

; 2443 : 	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators

	mov	ecx, DWORD PTR __First$[esp-4]

; 2444 : 	_DEBUG_RANGE(_First, _Last);
; 2445 : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	ecx, edx
	je	SHORT $LN1@Copy_opt
	push	esi
	npad	7
$LL3@Copy_opt:

; 2446 : 		*_Dest = *_First;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL3@Copy_opt
	pop	esi
$LN1@Copy_opt:

; 2447 : 	return (_Dest);
; 2448 : 	}

	ret	0
??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@Uforward_iterator_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Uforward_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::forward_iterator_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@U_Unchanged_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@U_Unchanged_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __It$ = eax

; 1147 : 		return _It;

	mov	eax, DWORD PTR [eax]

; 1148 : 	}

	ret	0
??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@U_Unchanged_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAPAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAPAU?$pair@_K_K@0@@Z PROC ; std::_Ptr_cat<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 1483 : 	{

	push	ecx

; 1484 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1485 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1486 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@AAPAU?$pair@_K_K@0@@Z ENDP ; std::_Ptr_cat<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z
_TEXT	SEGMENT
??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z PROC ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; __It$ = eax

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax+4]

; 1166 : 	}

	ret	0
??$_Checked_base@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPBU?$pair@_K_K@0@AAV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z ENDP ; std::_Checked_base<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z
_TEXT	SEGMENT
??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT
; __It$ = eax

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax+4]

; 1166 : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@std@@YAPAU?$pair@_K_K@0@AAV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>, COMDAT

; 1139 : 		return _It._Checked_iterator_base();

	mov	eax, DWORD PTR __It$[esp-4]
	mov	eax, DWORD PTR [eax+4]

; 1140 : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@U_Different_checked_iterator_base_type_tag@2@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@U_Different_checked_iterator_base_type_tag@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> >,std::_Different_checked_iterator_base_type_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy, COMDAT

; 160  : 		_Destroy(_Ptr);
; 161  : 		}

	ret	0
?destroy@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::destroy
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z PROC ; std::_Move_cat<int *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAH@std@@YA?AU_Undefined_move_tag@0@ABQAH@Z ENDP ; std::_Move_cat<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$_Fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::_Fill<int *,int>, COMDAT

; 3131 : 	_DEBUG_RANGE(_First, _Last);
; 3132 : 	for (; _First != _Last; ++_First)

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN1@Fill
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL3@Fill:

; 3133 : 		*_First = _Val;

	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL3@Fill
	pop	esi
$LN1@Fill:

; 3134 : 	}

	ret	0
??$_Fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::_Fill<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 242  : 	}

	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_cat@PAU?$pair@_K_K@std@@@std@@YA?AU_Undefined_move_tag@0@ABQAU?$pair@_K_K@0@@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Move_cat@PAU?$pair@_K_K@std@@@std@@YA?AU_Undefined_move_tag@0@ABQAU?$pair@_K_K@0@@Z PROC ; std::_Move_cat<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 1200 : 	{

	push	ecx

; 1201 : 		typename _Move_operation_category<typename iterator_traits<_Iter>::value_type>::_Move_cat _Cat;
; 1202 : 		return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1203 : 	}

	pop	ecx
	ret	0
??$_Move_cat@PAU?$pair@_K_K@std@@@std@@YA?AU_Undefined_move_tag@0@ABQAU?$pair@_K_K@0@@Z ENDP ; std::_Move_cat<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
??$_Fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z PROC ; std::_Fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Last$ = edx
; __Val$ = ecx

; 3130 : 	{	// copy _Val through [_First, _Last)

	mov	eax, DWORD PTR __First$[esp-4]

; 3131 : 	_DEBUG_RANGE(_First, _Last);
; 3132 : 	for (; _First != _Last; ++_First)

	cmp	eax, edx
	je	SHORT $LN1@Fill@2
	push	esi
	npad	7
$LL3@Fill@2:

; 3133 : 		*_First = _Val;

	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	add	eax, 16					; 00000010H
	cmp	eax, edx
	jne	SHORT $LL3@Fill@2
	pop	esi
$LN1@Fill@2:

; 3134 : 	}

	ret	0
??$_Fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z ENDP ; std::_Fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>, COMDAT

; 2469 : 
; 2470 :  #if _HAS_ITERATOR_DEBUGGING
; 2471 : 	_DEBUG_RANGE(_First, _Last);
; 2472 : 	if (_First != _Last)
; 2473 : 		_DEBUG_POINTER(_Dest);
; 2474 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 2475 : 
; 2476 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi

; 2477 : 	// if _OutIt is range checked, this will make sure there is enough space for the memmove
; 2478 : 	_OutIt _Result = _Dest + _Off;

	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]

; 2479 : 	if (_Off > 0)

	test	eax, eax
	jle	SHORT $LN4@Copy_opt@2

; 2480 : 		_CRT_SECURE_MEMMOVE(&*_Dest, _Off * sizeof (*_First), &*_First, _Off * sizeof (*_First));

	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN4@Copy_opt@2:
	pop	edi

; 2481 : 	return _Result;

	mov	eax, esi
	pop	esi

; 2482 : 	}

	ret	0
??$_Copy_opt@PAHPAHUrandom_access_iterator_tag@std@@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<int *,int *,std::random_access_iterator_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z PROC ; std::_Ptr_cat<int *,int *>, COMDAT

; 1483 : 	{

	push	ecx

; 1484 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1485 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1486 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAHPAH@std@@YA?AU_Scalar_ptr_iterator_tag@0@AAPAH0@Z ENDP ; std::_Ptr_cat<int *,int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z PROC ; std::_Iter_random<int *,int *>, COMDAT

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 998  : 	}

	ret	0
??$_Iter_random@PAHPAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH0@Z ENDP ; std::_Iter_random<int *,int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAH@std@@YAPAHAAPAH@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z PROC		; std::_Checked_base<int *>, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR __It$[esp-4]
	mov	eax, DWORD PTR [eax]

; 1166 : 	}

	ret	0
??$_Checked_base@PAH@std@@YAPAHAAPAH@Z ENDP		; std::_Checked_base<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 233  : 	for (; _First != _Last; ++_First)
; 234  : 		_Al.destroy(_First);
; 235  : 	}

	ret	0
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
??$_Ptr_cat@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU?$pair@_K_K@0@0@Z PROC ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT

; 1483 : 	{

	push	ecx

; 1484 : 	typename _Ptr_cat_helper<_T1, _T2>::_Ptr_cat _Cat;
; 1485 : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[esp+4]

; 1486 : 	}

	pop	ecx
	ret	0
??$_Ptr_cat@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU?$pair@_K_K@0@0@Z ENDP ; std::_Ptr_cat<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Iter_random@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
??$_Iter_random@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@0@Z PROC ; std::_Iter_random<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; ___$ReturnUdt$ = eax

; 994  : 	typename _Iter_random_helper<
; 995  : 		iterator_traits<_Iter1>::iterator_category, 
; 996  : 		iterator_traits<_Iter2>::iterator_category>::_Iter_random_cat _Cat;
; 997  : 	return (_Cat);
; 998  : 	}

	ret	0
??$_Iter_random@PAU?$pair@_K_K@std@@PAU12@@std@@YA?AUrandom_access_iterator_tag@0@ABQAU?$pair@_K_K@0@0@Z ENDP ; std::_Iter_random<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@@Z
_TEXT	SEGMENT
??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@@Z PROC ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __It$ = eax

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR [eax]

; 1166 : 	}

	ret	0
??$_Checked_base@PAU?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@AAPAU10@@Z ENDP ; std::_Checked_base<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@@Z PROC ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> > >, COMDAT

; 1164 : 		typename _Checked_iterator_base_helper<_Iter>::_Checked_iterator_base_type_tag _Base_tag;
; 1165 : 		return _Checked_base(_It, _Base_tag);

	mov	eax, DWORD PTR __It$[esp-4]
	mov	eax, DWORD PTR [eax+4]

; 1166 : 	}

	ret	0
??$_Checked_base@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAPAHAAV?$_Vector_iterator@HV?$allocator@H@std@@@0@@Z ENDP ; std::_Checked_base<std::_Vector_iterator<int,std::allocator<int> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>, COMDAT
; _this$ = ecx

; 128  : 		allocator(const allocator<_Other>&) _THROW0()

	mov	eax, ecx

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	4
??$?0H@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$fill@PAHH@std@@YAXPAH0ABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAHH@std@@YAXPAH0ABH@Z PROC			; std::fill<int *,int>, COMDAT

; 3161 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR __Last$[esp-4]
	cmp	eax, ecx
	je	SHORT $LN11@fill
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL13@fill:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	cmp	eax, ecx
	jne	SHORT $LL13@fill
	pop	esi
$LN11@fill:

; 3162 : 	}

	ret	0
??$fill@PAHH@std@@YAXPAH0ABH@Z ENDP			; std::fill<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@_K_K@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z
_TEXT	SEGMENT
??$?0U?$pair@_K_K@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z PROC ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = eax

; 129  : 		{	// construct from a related allocator (do nothing)
; 130  : 		}

	ret	0
??$?0U?$pair@_K_K@std@@@?$allocator@V_Aux_cont@std@@@std@@QAE@ABV?$allocator@U?$pair@_K_K@std@@@1@@Z ENDP ; std::allocator<std::_Aux_cont>::allocator<std::_Aux_cont><std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
??$fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z PROC ; std::fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Last$ = edx
; __Val$ = ecx

; 3160 : 	{	// copy _Val through [_First, _Last)

	mov	eax, DWORD PTR __First$[esp-4]

; 3161 : 	_Fill(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val);

	cmp	eax, edx
	je	SHORT $LN11@fill@2
	push	esi
	npad	7
$LL13@fill@2:
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
	add	eax, 16					; 00000010H
	cmp	eax, edx
	jne	SHORT $LL13@fill@2
	pop	esi
$LN11@fill@2:

; 3162 : 	}

	ret	0
??$fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z ENDP ; std::fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z PROC	; stdext::unchecked_copy<int *,int *>, COMDAT

; 3579 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3580 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jle	SHORT $LN18@unchecked_
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN18@unchecked_:
	pop	edi
	mov	eax, esi
	pop	esi

; 3581 : 	}

	ret	0
??$unchecked_copy@PAHPAH@stdext@@YAPAHPAH00@Z ENDP	; stdext::unchecked_copy<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z
_TEXT	SEGMENT
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 225  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 226  : 	}

	ret	0
??$_Destroy_range@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@YAXPAU?$pair@_K_K@0@0AAV?$allocator@U?$pair@_K_K@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z
_TEXT	SEGMENT
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z PROC ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 18   : 	if (&_Left != &_Right)

	cmp	ecx, eax
	je	SHORT $LN1@swap@2

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 21   : 
; 22   : 		_Left = _Right;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [eax], edx
	pop	esi
$LN1@swap@2:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@PAU?$pair@_K_K@std@@@std@@YAXAAPAU?$pair@_K_K@0@0@Z ENDP ; std::swap<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z
_TEXT	SEGMENT
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z PROC ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT

; 175  : 	return (true);

	mov	al, 1

; 176  : 	}

	ret	0
??$?8U?$pair@_K_K@std@@U01@@std@@YA_NABV?$allocator@U?$pair@_K_K@std@@@0@0@Z ENDP ; std::operator==<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\separablefilter.h
_TEXT	ENDS
;	COMDAT ??$SeparableFilterY@$01@@YAXPAE0HHHPAHHH@Z
_TEXT	SEGMENT
_y$133095 = -32						; size = 4
tv233 = -28						; size = 4
_accum$133099 = -24					; size = 4
_in$133093 = -20					; size = 4
tv434 = -16						; size = 4
tv286 = -12						; size = 4
tv496 = -8						; size = 4
tv441 = -4						; size = 4
_dst$ = 8						; size = 4
_height$ = 12						; size = 4
_stride$ = 16						; size = 4
_kernel$ = 20						; size = 4
_kernel_size$ = 24					; size = 4
_divisor$ = 28						; size = 4
??$SeparableFilterY@$01@@YAXPAE0HHHPAHHH@Z PROC		; SeparableFilterY<2>, COMDAT
; _src$ = edx
; _width$ = eax

; 66   : {

	sub	esp, 32					; 00000020H
	push	ebx
	mov	ebx, DWORD PTR _stride$[esp+32]
	push	ebp
	mov	ebp, DWORD PTR _kernel_size$[esp+36]
	push	esi

; 67   : #pragma omp parallel for
; 68   : 	width *= PixelDist;

	add	eax, eax

; 69   : 	for (int  x = 0; x < width; x+=PixelDist) {

	xor	esi, esi
	cmp	eax, esi
	jle	$LN11@SeparableF
	mov	ecx, DWORD PTR _dst$[esp+40]
	dec	eax
	sub	ecx, edx
	shr	eax, 1
	inc	eax
	mov	DWORD PTR tv434[esp+44], edx
	mov	DWORD PTR tv441[esp+44], ecx
	mov	DWORD PTR tv496[esp+44], eax
	push	edi
$LL13@SeparableF:

; 70   : 		unsigned char *in = src + x;
; 71   : 		unsigned char *out = dst + x;
; 72   : 		for (int y = 0; y < height; y++) {

	mov	edi, DWORD PTR _height$[esp+44]
	cmp	edi, esi
	mov	edx, DWORD PTR tv434[esp+48]
	mov	DWORD PTR _in$133093[esp+48], edx
	mov	DWORD PTR _y$133095[esp+48], esi
	jle	$LN12@SeparableF
	npad	7
$LL10@SeparableF:

; 73   : 			int accum = 0;
; 74   : 			for (int k = 0; k < kernel_size; k++) {

	cmp	ebp, esi
	mov	DWORD PTR _accum$133099[esp+48], esi
	jle	SHORT $LN5@SeparableF
	mov	eax, ebp
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, eax
	mov	eax, edi
	imul	eax, ebx
	mov	DWORD PTR tv286[esp+48], eax
	mov	eax, ebp
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _y$133095[esp+48]
	sar	eax, 1
	neg	ecx
	mov	DWORD PTR tv233[esp+48], ecx
	sub	edi, eax
	sub	edx, eax
	imul	ecx, ebx
$LL22@SeparableF:

; 75   : 				int yofs = k - kernel_size/2;

	mov	ebx, DWORD PTR tv233[esp+48]
	mov	eax, ecx

; 76   : 				if (y+yofs < 0) yofs += height;

	test	edx, edx
	jge	SHORT $LN4@SeparableF
	add	eax, DWORD PTR tv286[esp+48]
	mov	ebx, edi
$LN4@SeparableF:

; 77   : 				if (y+yofs >= height) yofs -= height;

	mov	ebp, DWORD PTR _y$133095[esp+48]
	add	ebx, ebp
	cmp	ebx, DWORD PTR _height$[esp+44]
	jl	SHORT $LN23@SeparableF
	sub	eax, DWORD PTR tv286[esp+48]
$LN23@SeparableF:

; 78   : 				accum += (int)(in[yofs*stride] * kernel[k]);

	mov	ebx, DWORD PTR _in$133093[esp+48]
	movzx	eax, BYTE PTR [eax+ebx]
	mov	ebx, DWORD PTR _kernel$[esp+44]
	imul	eax, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR _stride$[esp+44]
	mov	ebp, DWORD PTR _kernel_size$[esp+44]
	add	DWORD PTR _accum$133099[esp+48], eax
	inc	DWORD PTR tv233[esp+48]
	inc	esi
	add	ecx, ebx
	inc	edx
	inc	edi
	cmp	esi, ebp
	jl	SHORT $LL22@SeparableF
	mov	ecx, DWORD PTR tv441[esp+48]
	mov	edi, DWORD PTR _height$[esp+44]
	xor	esi, esi
$LN5@SeparableF:

; 79   : 			}
; 80   : 			accum /= divisor;

	mov	eax, DWORD PTR _accum$133099[esp+48]
	cdq
	idiv	DWORD PTR _divisor$[esp+44]

; 81   : 			if (accum > 255) accum = 255;

	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@SeparableF
	mov	eax, 255				; 000000ffH

; 82   : 			if (accum < 0) accum = 0;

	jmp	SHORT $LN1@SeparableF
$LN2@SeparableF:
	cmp	eax, esi
	jge	SHORT $LN1@SeparableF
	xor	eax, eax
$LN1@SeparableF:

; 83   : 			*out = (unsigned char)accum;

	mov	edx, DWORD PTR _in$133093[esp+48]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR _y$133095[esp+48]
	inc	eax

; 84   : 			in += stride;

	add	edx, ebx
	cmp	eax, edi
	mov	DWORD PTR _in$133093[esp+48], edx
	mov	DWORD PTR _y$133095[esp+48], eax
	jl	$LL10@SeparableF

; 70   : 		unsigned char *in = src + x;
; 71   : 		unsigned char *out = dst + x;
; 72   : 		for (int y = 0; y < height; y++) {

	mov	eax, DWORD PTR tv496[esp+48]
$LN12@SeparableF:

; 69   : 	for (int  x = 0; x < width; x+=PixelDist) {

	add	DWORD PTR tv434[esp+48], 2
	sub	eax, 1
	mov	DWORD PTR tv496[esp+48], eax
	jne	$LL13@SeparableF
	pop	edi
$LN11@SeparableF:
	pop	esi
	pop	ebp
	pop	ebx

; 85   : 			out += stride;
; 86   : 		}
; 87   : 	}
; 88   : }

	add	esp, 32					; 00000020H
	ret	0
??$SeparableFilterY@$01@@YAXPAE0HHHPAHHH@Z ENDP		; SeparableFilterY<2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$SeparableFilterX@$01@@YAXPAE0HHHPAHHH@Z
_TEXT	SEGMENT
tv232 = -28						; size = 4
_accum$133076 = -24					; size = 4
_x$133072 = -20						; size = 4
_in$133070 = -16					; size = 4
tv437 = -12						; size = 4
tv488 = -8						; size = 4
tv446 = -4						; size = 4
_dst$ = 8						; size = 4
_width$ = 12						; size = 4
_stride$ = 16						; size = 4
_kernel$ = 20						; size = 4
_kernel_size$ = 24					; size = 4
_divisor$ = 28						; size = 4
??$SeparableFilterX@$01@@YAXPAE0HHHPAHHH@Z PROC		; SeparableFilterX<2>, COMDAT
; _src$ = ecx
; _height$ = eax

; 36   : {

	sub	esp, 28					; 0000001cH
	push	ebx
	mov	ebx, DWORD PTR _kernel_size$[esp+28]

; 37   : #pragma omp parallel for
; 38   : 	for (int y = 0; y < height; y++) {

	test	eax, eax
	jle	$LN11@SeparableF@2
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _dst$[esp+40]
	mov	ebp, ecx
	sub	edi, ecx
	mov	DWORD PTR tv437[esp+44], ebp
	mov	DWORD PTR tv446[esp+44], edi
	mov	DWORD PTR tv488[esp+44], eax
	npad	9
$LL24@SeparableF@2:

; 39   : 		unsigned char *in = src + y*stride;
; 40   : 		unsigned char *out = dst + y*stride;
; 41   : 		for (int x = 0; x < width; x++) {

	xor	ecx, ecx
	cmp	DWORD PTR _width$[esp+40], ecx
	mov	DWORD PTR _in$133070[esp+44], ebp
	mov	DWORD PTR _x$133072[esp+44], ecx
	jle	$LN12@SeparableF@2
$LL23@SeparableF@2:

; 42   : 			int accum = 0;

	xor	esi, esi

; 43   : 			for (int k = 0; k < kernel_size; k++) {

	cmp	ebx, esi
	mov	DWORD PTR _accum$133076[esp+44], esi
	jle	SHORT $LN5@SeparableF@2
	mov	eax, ebx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edi, eax
	mov	eax, ebx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _width$[esp+40]
	sar	eax, 1
	neg	edi
	mov	DWORD PTR tv232[esp+44], edi
	sub	edx, eax
	sub	ecx, eax
	add	edi, edi
	npad	2
$LL22@SeparableF@2:

; 44   : 				int xofs = k - kernel_size/2;

	mov	ebx, DWORD PTR tv232[esp+44]
	mov	eax, edi

; 45   : 				if (x+xofs < 0) xofs += width;

	test	ecx, ecx
	jge	SHORT $LN4@SeparableF@2
	mov	ebp, DWORD PTR _width$[esp+40]
	add	ebp, ebp
	mov	ebx, edx
	add	eax, ebp
$LN4@SeparableF@2:

; 46   : 				if (x+xofs >= width) xofs -= width;

	mov	ebp, DWORD PTR _x$133072[esp+44]
	add	ebp, ebx
	mov	ebx, DWORD PTR _width$[esp+40]
	cmp	ebp, ebx
	jl	SHORT $LN3@SeparableF@2
	add	ebx, ebx
	sub	eax, ebx
$LN3@SeparableF@2:

; 47   : 				accum += (int)(in[xofs*PixelDist] * kernel[k]);

	mov	ebp, DWORD PTR _in$133070[esp+44]
	movzx	eax, BYTE PTR [eax+ebp]
	mov	ebx, DWORD PTR _kernel$[esp+40]
	imul	eax, DWORD PTR [ebx+esi*4]
	mov	ebx, DWORD PTR _kernel_size$[esp+40]
	add	DWORD PTR _accum$133076[esp+44], eax
	inc	DWORD PTR tv232[esp+44]
	inc	esi
	add	edi, 2
	inc	ecx
	inc	edx
	cmp	esi, ebx
	jl	SHORT $LL22@SeparableF@2
	mov	edi, DWORD PTR tv446[esp+44]
	mov	ecx, DWORD PTR _x$133072[esp+44]
$LN5@SeparableF@2:

; 48   : 			}
; 49   : 			accum /= divisor;

	mov	eax, DWORD PTR _accum$133076[esp+44]
	cdq
	idiv	DWORD PTR _divisor$[esp+40]

; 50   : 			if (accum > 255) accum = 255;

	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@SeparableF@2
	mov	eax, 255				; 000000ffH

; 51   : 			if (accum < 0) accum = 0;

	jmp	SHORT $LN1@SeparableF@2
$LN2@SeparableF@2:
	test	eax, eax
	jge	SHORT $LN1@SeparableF@2
	xor	eax, eax
$LN1@SeparableF@2:

; 39   : 		unsigned char *in = src + y*stride;
; 40   : 		unsigned char *out = dst + y*stride;
; 41   : 		for (int x = 0; x < width; x++) {

	inc	ecx

; 52   : 			*out = (unsigned char)accum;

	mov	BYTE PTR [edi+ebp], al

; 53   : 			in+=PixelDist;

	add	ebp, 2
	cmp	ecx, DWORD PTR _width$[esp+40]
	mov	DWORD PTR _in$133070[esp+44], ebp
	mov	DWORD PTR _x$133072[esp+44], ecx
	jl	$LL23@SeparableF@2

; 39   : 		unsigned char *in = src + y*stride;
; 40   : 		unsigned char *out = dst + y*stride;
; 41   : 		for (int x = 0; x < width; x++) {

	mov	ebp, DWORD PTR tv437[esp+44]
$LN12@SeparableF@2:

; 37   : #pragma omp parallel for
; 38   : 	for (int y = 0; y < height; y++) {

	add	ebp, DWORD PTR _stride$[esp+40]
	sub	DWORD PTR tv488[esp+44], 1
	mov	DWORD PTR tv437[esp+44], ebp
	jne	$LL24@SeparableF@2
	pop	edi
	pop	esi
	pop	ebp
$LN11@SeparableF@2:
	pop	ebx

; 54   : 			out+=PixelDist;
; 55   : 		}
; 56   : 	}
; 57   : }

	add	esp, 28					; 0000001cH
	ret	0
??$SeparableFilterX@$01@@YAXPAE0HHHPAHHH@Z ENDP		; SeparableFilterX<2>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$max@_K@std@@YAAB_KAB_K0@Z
_TEXT	SEGMENT
??$max@_K@std@@YAAB_KAB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 3358 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	edx, DWORD PTR [ecx+4]
	cmp	edx, DWORD PTR [eax+4]
	ja	SHORT $LN3@max
	jb	SHORT $LN4@max
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN4@max
$LN3@max:
	mov	eax, ecx
$LN4@max:

; 3359 : 	}

	ret	0
??$max@_K@std@@YAAB_KAB_K0@Z ENDP			; std::max<unsigned __int64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$?0_J_J@?$pair@_K_K@std@@QAE@ABU?$pair@_J_J@1@@Z
_TEXT	SEGMENT
??$?0_J_J@?$pair@_K_K@std@@QAE@ABU?$pair@_J_J@1@@Z PROC	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>, COMDAT
; _this$ = eax
; __Right$ = ecx

; 49   : 		{	// construct from compatible pair

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx

; 50   : 		}

	ret	0
??$?0_J_J@?$pair@_K_K@std@@QAE@ABU?$pair@_J_J@1@@Z ENDP	; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64><__int64,__int64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$swap@V_Aux_cont@std@@@std@@YAXAAV_Aux_cont@0@0@Z
_TEXT	SEGMENT
??$swap@V_Aux_cont@std@@@std@@YAXAAV_Aux_cont@0@0@Z PROC ; std::swap<std::_Aux_cont>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 18   : 	if (&_Left != &_Right)

	cmp	ecx, eax
	je	SHORT $LN1@swap@3

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 21   : 
; 22   : 		_Left = _Right;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [eax], edx
	pop	esi
$LN1@swap@3:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@V_Aux_cont@std@@@std@@YAXAAV_Aux_cont@0@0@Z ENDP ; std::swap<std::_Aux_cont>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$swap@PAV_Aux_cont@std@@@std@@YAXAAPAV_Aux_cont@0@0@Z
_TEXT	SEGMENT
??$swap@PAV_Aux_cont@std@@@std@@YAXAAPAV_Aux_cont@0@0@Z PROC ; std::swap<std::_Aux_cont *>, COMDAT
; __Left$ = ecx
; __Right$ = eax

; 18   : 	if (&_Left != &_Right)

	cmp	ecx, eax
	je	SHORT $LN1@swap@4

; 19   : 		{	// different, worth swapping
; 20   : 		_Ty _Tmp = _Left;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 21   : 
; 22   : 		_Left = _Right;

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 23   : 		_Right = _Tmp;

	mov	DWORD PTR [eax], edx
	pop	esi
$LN1@swap@4:

; 24   : 		}
; 25   : 	}

	ret	0
??$swap@PAV_Aux_cont@std@@@std@@YAXAAPAV_Aux_cont@0@0@Z ENDP ; std::swap<std::_Aux_cont *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@H@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@H@std@@QBEIXZ PROC		; std::allocator<int>::max_size, COMDAT
; _this$ = ecx

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 1073741823				; 3fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@H@std@@QBEIXZ ENDP		; std::allocator<int>::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@H@std@@QAEXPAHI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@H@std@@QAEXPAHI@Z PROC		; std::allocator<int>::deallocate, COMDAT
; _this$ = ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[esp-4]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	8
?deallocate@?$allocator@H@std@@QAEXPAHI@Z ENDP		; std::allocator<int>::deallocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@H@std@@QAE@ABV01@@Z PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 123  : 	allocator(const allocator<_Ty>&) _THROW0()

	mov	eax, ecx

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	4
??0?$allocator@H@std@@QAE@ABV01@@Z ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT
; _this$ = ecx

; 1124 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1125 : 		}

	ret	8
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT
; _this$ = ecx

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size, COMDAT

; 165  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 166  : 		return (0 < _Count ? _Count : 1);

	mov	eax, 268435455				; 0fffffffH

; 167  : 		}

	ret	0
?max_size@?$allocator@U?$pair@_K_K@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = eax

; 124  : 		{	// construct by copying (do nothing)
; 125  : 		}

	ret	0
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@H@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@H@std@@QAE@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT
; _this$ = ecx

; 119  : 	allocator() _THROW0()

	mov	eax, ecx

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@H@std@@QAE@XZ ENDP			; std::allocator<int>::allocator<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT
; _this$ = ecx

; 1128 : 		{	// free all storage

	push	esi
	mov	esi, ecx

; 1129 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN4@Tidy

; 1130 : 			{	// something to free, destroy and deallocate it
; 1131 : 
; 1132 :  #if _HAS_ITERATOR_DEBUGGING
; 1133 : 			this->_Orphan_all();
; 1134 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1135 : 
; 1136 : 			_Destroy(_Myfirst, _Mylast);
; 1137 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy:

; 1138 : 			}
; 1139 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0
	pop	esi

; 1140 : 		}

	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 2

; 727  : 		}

	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP	; std::vector<int,std::allocator<int> >::size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT
; _this$ = ecx

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	edx, DWORD PTR [ecx+12]
	test	edx, edx
	jne	SHORT $LN3@capacity
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	sar	eax, 2

; 636  : 		}

	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z
_TEXT	SEGMENT
?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate, COMDAT
; __Ptr$ = eax

; 140  : 		::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 141  : 		}

	ret	0
?deallocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@I@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::deallocate
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ PROC	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; _this$ = eax

; 120  : 		{	// construct default allocator (do nothing)
; 121  : 		}

	ret	0
??0?$allocator@U?$pair@_K_K@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocator<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z
_TEXT	SEGMENT
?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy, COMDAT

; 1124 : 		_Destroy_range(_First, _Last, this->_Alval);
; 1125 : 		}

	ret	0
?_Destroy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXPAU?$pair@_K_K@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Destroy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size, COMDAT

; 731  : 		return (this->_Alval.max_size());

	mov	eax, 268435455				; 0fffffffH

; 732  : 		}

	ret	0
?max_size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::max_size
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity, COMDAT
; _this$ = eax

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN3@capacity@2
	xor	eax, eax

; 636  : 		}

	ret	0
$LN3@capacity@2:

; 635  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

	mov	eax, DWORD PTR [eax+20]
	sub	eax, ecx
	sar	eax, 4

; 636  : 		}

	ret	0
?capacity@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::capacity
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??0?$pair@_K_K@std@@QAE@AB_K0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$pair@_K_K@std@@QAE@AB_K0@Z PROC			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 42   : 		{	// construct from specified values

	mov	eax, DWORD PTR _this$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 43   : 		}

	ret	4
??0?$pair@_K_K@std@@QAE@AB_K0@Z ENDP			; std::pair<unsigned __int64,unsigned __int64>::pair<unsigned __int64,unsigned __int64>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$pair@_J_J@std@@QAE@AB_J0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
??0?$pair@_J_J@std@@QAE@AB_J0@Z PROC			; std::pair<__int64,__int64>::pair<__int64,__int64>, COMDAT
; __Val1$ = edx
; __Val2$ = ecx

; 42   : 		{	// construct from specified values

	mov	eax, DWORD PTR _this$[esp-4]
	push	esi
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], ecx
	pop	esi

; 43   : 		}

	ret	4
??0?$pair@_J_J@std@@QAE@AB_J0@Z ENDP			; std::pair<__int64,__int64>::pair<__int64,__int64>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size, COMDAT
; _this$ = ecx

; 726  : 		return (_Mylast - _Myfirst);

	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [ecx+12]
	sar	eax, 4

; 727  : 		}

	ret	0
?size@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::size
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
_TEXT	ENDS
;	COMDAT ?safe_subtract@@YAKKK@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?safe_subtract@@YAKKK@Z PROC				; safe_subtract, COMDAT

; 903  : {

	push	ebp
	mov	ebp, esp

; 904  : 	__m64 ap = _mm_cvtsi32_si64(a);
; 905  : 	__m64 bp = _mm_cvtsi32_si64(b);

	movd	mm1, DWORD PTR _b$[ebp]
	movd	mm0, DWORD PTR _a$[ebp]

; 906  : 	__m64 rp = _mm_subs_pu16(ap, bp);

	psubusw	mm0, mm1

; 907  : 	DWORD r = (DWORD)_mm_cvtsi64_si32(rp);

	movd	eax, mm0

; 908  : 	_mm_empty();

	emms

; 909  : 	return r;
; 910  : 	//return (b > a) ? 0 : a - b;
; 911  : }

	pop	ebp
	ret	0
?safe_subtract@@YAKKK@Z ENDP				; safe_subtract
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pixmix2_sse2@@YAXPAKKKK@Z
_TEXT	SEGMENT
_shapealpha$ = 8					; size = 4
_clipalpha$ = 12					; size = 4
?pixmix2_sse2@@YAXPAKKKK@Z PROC				; pixmix2_sse2, COMDAT
; _dst$ = edx
; _color$ = ecx

; 881  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 882  : 	int alpha = (((shapealpha)*(clipalpha)*(color>>24))>>12)&0xff;

	mov	eax, ecx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _shapealpha$[ebp]
	imul	eax, DWORD PTR _clipalpha$[ebp]
	sub	esp, 12					; 0000000cH
	push	esi

; 883  : 	color &= 0xffffff;
; 884  : 
; 885  : 	__m128i zero = _mm_setzero_si128();
; 886  : 	__m128i a = _mm_set1_epi32(((alpha+1) << 16) | (0x100 - alpha));
; 887  : 	__m128i d = _mm_unpacklo_epi8(_mm_cvtsi32_si128(*dst), zero);

	mov	esi, DWORD PTR [edx]
	shr	eax, 12					; 0000000cH
	and	ecx, 16777215				; 00ffffffH
	and	eax, 255				; 000000ffH
	movd	xmm0, esi

; 888  : 	__m128i s = _mm_unpacklo_epi8(_mm_cvtsi32_si128(color), zero);

	movd	xmm2, ecx

; 889  : 	__m128i r = _mm_unpacklo_epi16(d, s);
; 890  : 
; 891  : 	r = _mm_madd_epi16(r, a);
; 892  : 	r = _mm_srli_epi32(r, 8);

	lea	ecx, DWORD PTR [eax+1]
	mov	esi, 256				; 00000100H
	sub	esi, eax
	pxor	xmm1, xmm1
	punpcklbw xmm0, xmm1
	shl	ecx, 16					; 00000010H
	punpcklbw xmm2, xmm1
	or	ecx, esi
	punpcklwd xmm0, xmm2
	movd	xmm1, ecx
	pshufd	xmm1, xmm1, 0
	pmaddwd	xmm0, xmm1
	psrld	xmm0, 8

; 893  : 	r = _mm_packs_epi32(r, r);

	packssdw xmm0, xmm0

; 894  : 	r = _mm_packus_epi16(r, r);

	packuswb xmm0, xmm0

; 895  : 
; 896  : 	*dst = (DWORD)_mm_cvtsi128_si32(r);

	movd	eax, xmm0
	mov	DWORD PTR [edx], eax

; 897  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pixmix2_sse2@@YAXPAKKKK@Z ENDP				; pixmix2_sse2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pixmix_sse2@@YAXPAKKK@Z
_TEXT	SEGMENT
_alpha$ = 8						; size = 4
?pixmix_sse2@@YAXPAKKK@Z PROC				; pixmix_sse2, COMDAT
; _dst$ = edx
; _color$ = ecx

; 862  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H

; 863  : 	alpha = (((alpha) * (color>>24)) >> 6) & 0xff;

	mov	eax, ecx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _alpha$[ebp]
	sub	esp, 12					; 0000000cH
	push	esi

; 864  : 	color &= 0xffffff;
; 865  : 
; 866  : 	__m128i zero = _mm_setzero_si128();
; 867  : 	__m128i a = _mm_set1_epi32(((alpha+1) << 16) | (0x100 - alpha));
; 868  : 	__m128i d = _mm_unpacklo_epi8(_mm_cvtsi32_si128(*dst), zero);

	mov	esi, DWORD PTR [edx]
	shr	eax, 6
	and	ecx, 16777215				; 00ffffffH
	and	eax, 255				; 000000ffH
	movd	xmm0, esi

; 869  : 	__m128i s = _mm_unpacklo_epi8(_mm_cvtsi32_si128(color), zero);

	movd	xmm2, ecx

; 870  : 	__m128i r = _mm_unpacklo_epi16(d, s);
; 871  : 
; 872  : 	r = _mm_madd_epi16(r, a);
; 873  : 	r = _mm_srli_epi32(r, 8);

	lea	ecx, DWORD PTR [eax+1]
	mov	esi, 256				; 00000100H
	sub	esi, eax
	pxor	xmm1, xmm1
	punpcklbw xmm0, xmm1
	shl	ecx, 16					; 00000010H
	punpcklbw xmm2, xmm1
	or	ecx, esi
	punpcklwd xmm0, xmm2
	movd	xmm1, ecx
	pshufd	xmm1, xmm1, 0
	pmaddwd	xmm0, xmm1
	psrld	xmm0, 8

; 874  : 	r = _mm_packs_epi32(r, r);

	packssdw xmm0, xmm0

; 875  : 	r = _mm_packus_epi16(r, r);

	packuswb xmm0, xmm0

; 876  : 
; 877  : 	*dst = (DWORD)_mm_cvtsi128_si32(r);

	movd	eax, xmm0
	mov	DWORD PTR [edx], eax

; 878  : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?pixmix_sse2@@YAXPAKKK@Z ENDP				; pixmix_sse2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pixmix2@@YAXPAKKKK@Z
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_shapealpha$ = 12					; size = 4
_clipalpha$ = 16					; size = 4
?pixmix2@@YAXPAKKKK@Z PROC				; pixmix2, COMDAT
; _color$ = edx

; 849  : 	int a = (((shapealpha)*(clipalpha)*(color>>24))>>12)&0xff;
; 850  : 	int ia = 256-a;
; 851  : 	a+=1;
; 852  : 
; 853  : 	*dst = ((((*dst&0x00ff00ff)*ia + (color&0x00ff00ff)*a)&0xff00ff00)>>8)
; 854  : 			| ((((*dst&0x0000ff00)*ia + (color&0x0000ff00)*a)&0x00ff0000)>>8)
; 855  : 			| ((((*dst>>8)&0x00ff0000)*ia)&0xff000000);

	mov	ecx, DWORD PTR _dst$[esp-4]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, edx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _shapealpha$[esp-4]
	imul	eax, DWORD PTR _clipalpha$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	shr	eax, 12					; 0000000cH
	mov	edi, ecx
	and	edi, -65281				; ffff00ffH
	mov	ebx, edx
	and	ebx, -65281				; ffff00ffH
	and	eax, 255				; 000000ffH
	mov	esi, 256				; 00000100H
	sub	esi, eax
	imul	edi, esi
	inc	eax
	imul	ebx, eax
	add	edi, ebx
	mov	ebx, ecx
	and	ebx, 65280				; 0000ff00H
	mov	ebp, edx
	imul	ebx, esi
	and	ebp, 65280				; 0000ff00H
	imul	ebp, eax
	add	ebx, ebp
	xor	edi, ebx
	mov	ebx, ecx
	and	ebx, 16711935				; 00ff00ffH
	and	edx, 16711935				; 00ff00ffH
	imul	ebx, esi
	shr	ecx, 8
	imul	edx, eax
	and	ecx, 16711680				; 00ff0000H
	imul	ecx, esi
	and	edi, 16711680				; 00ff0000H
	add	ebx, edx
	mov	edx, DWORD PTR _dst$[esp+12]
	xor	edi, ebx
	shr	edi, 8
	and	ecx, -16777216				; ff000000H
	or	edi, ecx
	mov	DWORD PTR [edx], edi
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 856  : }

	ret	0
?pixmix2@@YAXPAKKKK@Z ENDP				; pixmix2
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pixmix@@YAXPAKKK@Z
_TEXT	SEGMENT
_ia$ = 8						; size = 4
_alpha$ = 8						; size = 4
?pixmix@@YAXPAKKK@Z PROC				; pixmix, COMDAT
; _dst$ = edi
; _color$ = edx

; 837  : 	int a = (((alpha)*(color>>24))>>6)&0xff;
; 838  : 	// Make sure both a and ia are in range 1..256 for the >>8 operations below to be correct
; 839  : 	int ia = 256-a;
; 840  : 	a+=1;
; 841  : 
; 842  : 	*dst = ((((*dst&0x00ff00ff)*ia + (color&0x00ff00ff)*a)&0xff00ff00)>>8)
; 843  : 			| ((((*dst&0x0000ff00)*ia + (color&0x0000ff00)*a)&0x00ff0000)>>8)
; 844  : 			| ((((*dst>>8)&0x00ff0000)*ia)&0xff000000);

	mov	ecx, DWORD PTR [edi]
	mov	eax, edx
	push	ebx
	shr	eax, 24					; 00000018H
	imul	eax, DWORD PTR _alpha$[esp]
	push	ebp
	push	esi
	shr	eax, 6
	mov	ebp, ecx
	and	ebp, 65280				; 0000ff00H
	and	eax, 255				; 000000ffH
	mov	ebx, edx
	and	ebx, 65280				; 0000ff00H
	mov	esi, 256				; 00000100H
	sub	esi, eax
	imul	ebp, esi
	inc	eax
	imul	ebx, eax
	add	ebx, ebp
	mov	DWORD PTR _ia$[esp+8], esi
	mov	ebp, ecx
	and	ebp, -65281				; ffff00ffH
	imul	ebp, DWORD PTR _ia$[esp+8]
	mov	esi, edx
	and	esi, -65281				; ffff00ffH
	imul	esi, eax
	add	esi, ebp
	xor	ebx, esi
	mov	esi, DWORD PTR _ia$[esp+8]
	mov	ebp, ecx
	and	ebp, 16711935				; 00ff00ffH
	imul	ebp, esi
	and	edx, 16711935				; 00ff00ffH
	shr	ecx, 8
	imul	edx, eax
	and	ecx, 16711680				; 00ff0000H
	imul	ecx, esi
	and	ebx, 16711680				; 00ff0000H
	add	ebp, edx
	xor	ebx, ebp
	shr	ebx, 8
	and	ecx, -16777216				; ff000000H
	pop	esi
	or	ebx, ecx
	pop	ebp
	mov	DWORD PTR [edi], ebx
	pop	ebx

; 845  : }

	ret	0
?pixmix@@YAXPAKKK@Z ENDP				; pixmix
_TEXT	ENDS
PUBLIC	?PartialEndPath@Rasterizer@@QAE_NPAUHDC__@@JJ@Z	; Rasterizer::PartialEndPath
; Function compile flags: /Ogtpy
;	COMDAT ?PartialEndPath@Rasterizer@@QAE_NPAUHDC__@@JJ@Z
_TEXT	SEGMENT
_hdc$ = -16						; size = 4
_pNewTypes$128771 = -12					; size = 4
_pNewPoints$128772 = -8					; size = 4
_pTypes$128780 = -4					; size = 4
_dx$ = 8						; size = 4
?PartialEndPath@Rasterizer@@QAE_NPAUHDC__@@JJ@Z PROC	; Rasterizer::PartialEndPath, COMDAT
; _this$ = esi

; 296  : {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	edi

; 323  : 		{
; 324  : 			for(int i = 0; i < nPoints; ++i)

	mov	edi, DWORD PTR _g_hDC
	push	edi

; 336  : 		}
; 337  : 		else
; 338  : 			DebugBreak();

	mov	DWORD PTR _hdc$[esp+32], edi
	call	DWORD PTR __imp__CloseFigure@4
	push	edi
	call	DWORD PTR __imp__EndPath@4
	test	eax, eax
	je	$LN9@PartialEnd
	push	0
	push	0
	push	0
	push	edi
	call	DWORD PTR __imp__GetPath@16
	mov	edi, eax
	test	edi, edi
	je	$LN15@PartialEnd
	mov	eax, DWORD PTR [esi+32]
	mov	ecx, DWORD PTR [esi+24]
	add	eax, edi
	push	eax
	push	ecx
	call	_realloc
	mov	edx, DWORD PTR [esi+32]
	add	edx, edi
	add	edx, edx
	add	edx, edx
	mov	ebx, eax
	mov	eax, DWORD PTR [esi+28]
	add	edx, edx
	push	edx
	push	eax
	mov	DWORD PTR _pNewTypes$128771[esp+44], ebx
	call	_realloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pNewPoints$128772[esp+28], eax
	test	ebx, ebx
	je	SHORT $LN7@PartialEnd

; 297  : 	::CloseFigure(hdc);
; 298  : 
; 299  : 	if(::EndPath(hdc))
; 300  : 	{
; 301  : 		int nPoints;
; 302  : 		BYTE* pNewTypes;
; 303  : 		POINT* pNewPoints;
; 304  : 
; 305  : 		nPoints = GetPath(hdc, NULL, NULL, 0);
; 306  : 
; 307  : 		if(!nPoints)
; 308  : 			return true;
; 309  : 
; 310  : 		pNewTypes = (BYTE*)realloc(mpPathTypes, (mPathPoints + nPoints) * sizeof(BYTE));
; 311  : 		pNewPoints = (POINT*)realloc(mpPathPoints, (mPathPoints + nPoints) * sizeof(POINT));
; 312  : 
; 313  : 		if(pNewTypes)
; 314  : 			mpPathTypes = pNewTypes;

	mov	DWORD PTR [esi+24], ebx
$LN7@PartialEnd:

; 315  : 
; 316  : 		if(pNewPoints)

	test	eax, eax
	je	SHORT $LN6@PartialEnd

; 317  : 			mpPathPoints = pNewPoints;

	mov	DWORD PTR [esi+28], eax
$LN6@PartialEnd:

; 318  : 
; 319  : 		BYTE* pTypes = new BYTE[nPoints];

	push	edi
	call	??_U@YAPAXI@Z				; operator new[]
	mov	ebp, eax

; 320  : 		POINT* pPoints = new POINT[nPoints];

	xor	ecx, ecx
	mov	eax, edi
	mov	edx, 8
	mul	edx
	seto	cl
	mov	DWORD PTR _pTypes$128780[esp+32], ebp
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 8

; 321  : 
; 322  : 		if(pNewTypes && pNewPoints && nPoints == GetPath(hdc, pPoints, pTypes, nPoints))

	cmp	DWORD PTR _pNewTypes$128771[esp+28], 0
	mov	ebx, eax
	je	SHORT $LN5@PartialEnd
	cmp	DWORD PTR _pNewPoints$128772[esp+28], 0
	je	SHORT $LN5@PartialEnd
	mov	eax, DWORD PTR _hdc$[esp+28]
	push	edi
	push	ebp
	push	ebx
	push	eax
	call	DWORD PTR __imp__GetPath@16
	cmp	edi, eax
	jne	SHORT $LN5@PartialEnd

; 323  : 		{
; 324  : 			for(int i = 0; i < nPoints; ++i)

	xor	eax, eax
	test	edi, edi
	jle	SHORT $LN2@PartialEnd
	npad	5
$LL14@PartialEnd:

; 325  : 			{
; 326  : 				mpPathPoints[mPathPoints + i].x = pPoints[i].x + dx;

	mov	ecx, DWORD PTR [ebx+eax*8]
	add	ecx, DWORD PTR _dx$[esp+24]
	mov	edx, DWORD PTR [esi+32]
	mov	ebp, DWORD PTR [esi+28]
	add	edx, eax
	mov	DWORD PTR [ebp+edx*8], ecx

; 327  : 				mpPathPoints[mPathPoints + i].y = pPoints[i].y + dy;

	mov	ecx, DWORD PTR [esi+32]
	mov	ebp, DWORD PTR [ebx+eax*8+4]
	mov	edx, DWORD PTR [esi+28]
	add	ecx, eax
	mov	DWORD PTR [edx+ecx*8+4], ebp

; 328  : 				mpPathTypes[mPathPoints + i] = pTypes[i];

	mov	ecx, DWORD PTR [esi+32]
	add	ecx, DWORD PTR [esi+24]
	mov	ebp, DWORD PTR _pTypes$128780[esp+28]
	mov	dl, BYTE PTR [eax+ebp]
	mov	BYTE PTR [ecx+eax], dl
	inc	eax
	cmp	eax, edi
	jl	SHORT $LL14@PartialEnd
$LN2@PartialEnd:

; 329  : 			}
; 330  : 
; 331  : 			mPathPoints += nPoints;

	add	DWORD PTR [esi+32], edi

; 332  : 
; 333  : 			delete[] pTypes;

	push	ebp
	call	??_V@YAXPAX@Z				; operator delete[]

; 334  : 			delete[] pPoints;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 8
$LN15@PartialEnd:
	pop	edi
	pop	ebp

; 335  : 			return true;

	mov	al, 1
	pop	ebx

; 347  : }

	add	esp, 16					; 00000010H
	ret	4
$LN5@PartialEnd:

; 336  : 		}
; 337  : 		else
; 338  : 			DebugBreak();

	call	DWORD PTR __imp__DebugBreak@0

; 339  : 
; 340  : 		delete[] pTypes;

	push	ebp
	call	??_V@YAXPAX@Z				; operator delete[]

; 341  : 		delete[] pPoints;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	edi, DWORD PTR _hdc$[esp+36]
	add	esp, 8
$LN9@PartialEnd:

; 342  : 	}
; 343  : 
; 344  : 	::AbortPath(hdc);

	push	edi
	call	DWORD PTR __imp__AbortPath@4
	pop	edi
	pop	ebp

; 345  : 
; 346  : 	return false;

	xor	al, al
	pop	ebx

; 347  : }

	add	esp, 16					; 00000010H
	ret	4
?PartialEndPath@Rasterizer@@QAE_NPAUHDC__@@JJ@Z ENDP	; Rasterizer::PartialEndPath
_TEXT	ENDS
PUBLIC	?EndPath@Rasterizer@@QAE_NPAUHDC__@@@Z		; Rasterizer::EndPath
; Function compile flags: /Ogtpy
;	COMDAT ?EndPath@Rasterizer@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
?EndPath@Rasterizer@@QAE_NPAUHDC__@@@Z PROC		; Rasterizer::EndPath, COMDAT
; _this$ = esi

; 265  : {

	push	ebx
	push	edi
	mov	edi, DWORD PTR _g_hDC

; 266  : 	::CloseFigure(hdc);

	push	edi
	call	DWORD PTR __imp__CloseFigure@4

; 267  : 
; 268  : 	if(::EndPath(hdc))

	push	edi
	call	DWORD PTR __imp__EndPath@4
	test	eax, eax
	je	SHORT $LN1@EndPath

; 269  : 	{
; 270  : 		mPathPoints = GetPath(hdc, NULL, NULL, 0);

	mov	ebx, DWORD PTR __imp__GetPath@16
	push	0
	push	0
	push	0
	push	edi
	call	ebx
	mov	DWORD PTR [esi+32], eax

; 271  : 
; 272  : 		if(!mPathPoints)

	test	eax, eax
	jne	SHORT $LN2@EndPath
$LN6@EndPath:
	pop	edi

; 273  : 			return true;

	mov	al, 1
	pop	ebx

; 285  : }

	ret	0
$LN2@EndPath:

; 274  : 
; 275  : 		mpPathTypes = (BYTE*)malloc(sizeof(BYTE) * mPathPoints);

	push	eax
	call	_malloc
	mov	DWORD PTR [esi+24], eax

; 276  : 		mpPathPoints = (POINT*)malloc(sizeof(POINT) * mPathPoints);

	mov	eax, DWORD PTR [esi+32]
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	call	_malloc

; 277  : 
; 278  : 		if(mPathPoints == GetPath(hdc, mpPathPoints, mpPathTypes, mPathPoints))

	mov	ecx, DWORD PTR [esi+32]
	mov	edx, DWORD PTR [esi+24]
	add	esp, 8
	push	ecx
	push	edx
	push	eax
	push	edi
	mov	DWORD PTR [esi+28], eax
	call	ebx
	cmp	DWORD PTR [esi+32], eax

; 279  : 			return true;

	je	SHORT $LN6@EndPath
$LN1@EndPath:

; 280  : 	}
; 281  : 
; 282  : 	::AbortPath(hdc);

	push	edi
	call	DWORD PTR __imp__AbortPath@4
	pop	edi

; 283  : 
; 284  : 	return false;

	xor	al, al
	pop	ebx

; 285  : }

	ret	0
?EndPath@Rasterizer@@QAE_NPAUHDC__@@@Z ENDP		; Rasterizer::EndPath
_TEXT	ENDS
PUBLIC	?_ReallocEdgeBuffer@Rasterizer@@AAEXH@Z		; Rasterizer::_ReallocEdgeBuffer
; Function compile flags: /Ogtpy
;	COMDAT ?_ReallocEdgeBuffer@Rasterizer@@AAEXH@Z
_TEXT	SEGMENT
?_ReallocEdgeBuffer@Rasterizer@@AAEXH@Z PROC		; Rasterizer::_ReallocEdgeBuffer, COMDAT
; _this$ = esi
; _edges$ = eax

; 70   : 	mEdgeHeapSize = edges;
; 71   : 	mpEdgeBuffer = (Edge*)realloc(mpEdgeBuffer, sizeof(Edge)*edges);

	mov	ecx, DWORD PTR [esi+96]
	mov	DWORD PTR [esi+100], eax
	add	eax, eax
	add	eax, eax
	add	eax, eax
	push	eax
	push	ecx
	call	_realloc
	add	esp, 8
	mov	DWORD PTR [esi+96], eax

; 72   : }

	ret	0
?_ReallocEdgeBuffer@Rasterizer@@AAEXH@Z ENDP		; Rasterizer::_ReallocEdgeBuffer
_TEXT	ENDS
PUBLIC	?_TrashOverlay@Rasterizer@@AAEXXZ		; Rasterizer::_TrashOverlay
; Function compile flags: /Ogtpy
;	COMDAT ?_TrashOverlay@Rasterizer@@AAEXXZ
_TEXT	SEGMENT
?_TrashOverlay@Rasterizer@@AAEXXZ PROC			; Rasterizer::_TrashOverlay, COMDAT
; _this$ = esi

; 64   : 	delete [] mpOverlayBuffer;

	mov	eax, DWORD PTR [esi+112]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 65   : 	mpOverlayBuffer = NULL;

	mov	DWORD PTR [esi+112], 0

; 66   : }

	ret	0
?_TrashOverlay@Rasterizer@@AAEXXZ ENDP			; Rasterizer::_TrashOverlay
_TEXT	ENDS
PUBLIC	?_TrashPath@Rasterizer@@AAEXXZ			; Rasterizer::_TrashPath
; Function compile flags: /Ogtpy
;	COMDAT ?_TrashPath@Rasterizer@@AAEXXZ
_TEXT	SEGMENT
?_TrashPath@Rasterizer@@AAEXXZ PROC			; Rasterizer::_TrashPath, COMDAT
; _this$ = esi

; 55   : 	delete [] mpPathTypes;

	mov	eax, DWORD PTR [esi+24]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]

; 56   : 	delete [] mpPathPoints;

	mov	ecx, DWORD PTR [esi+28]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]

; 57   : 	mpPathTypes = NULL;

	xor	eax, eax
	add	esp, 8
	mov	DWORD PTR [esi+24], eax

; 58   : 	mpPathPoints = NULL;

	mov	DWORD PTR [esi+28], eax

; 59   : 	mPathPoints = 0;

	mov	DWORD PTR [esi+32], eax

; 60   : }

	ret	0
?_TrashPath@Rasterizer@@AAEXXZ ENDP			; Rasterizer::_TrashPath
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\separablefilter.h
_TEXT	ENDS
;	COMDAT ??1GaussianKernel@@QAE@XZ
_TEXT	SEGMENT
??1GaussianKernel@@QAE@XZ PROC				; GaussianKernel::~GaussianKernel, COMDAT
; _this$ = eax

; 119  : 		delete[] kernel;

	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx

; 120  : 	}

	ret	0
??1GaussianKernel@@QAE@XZ ENDP				; GaussianKernel::~GaussianKernel
_TEXT	ENDS
PUBLIC	__real@401921fb54411744
PUBLIC	__real@0000000000000000
EXTRN	__CIsqrt:PROC
EXTRN	__CIexp:PROC
;	COMDAT __real@401921fb54411744
CONST	SEGMENT
__real@401921fb54411744 DQ 0401921fb54411744r	; 6.28319
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?NormalDist@@YANNN@Z
_TEXT	SEGMENT
tv67 = -12						; size = 8
_sigma$ = 8						; size = 8
_x$ = 16						; size = 8
?NormalDist@@YANNN@Z PROC				; NormalDist, COMDAT

; 93   : 	if (sigma <= 0 && x == 0) return 1;

	fldz
	sub	esp, 12					; 0000000cH
	fld	QWORD PTR _sigma$[esp+8]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN8@NormalDist
	fstp	ST(0)
	fcom	QWORD PTR _x$[esp+8]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@NormalDist
	fstp	ST(0)
	fld1

; 96   : }

	add	esp, 12					; 0000000cH
	ret	0
$LN8@NormalDist:

; 93   : 	if (sigma <= 0 && x == 0) return 1;

	fstp	ST(1)

; 94   : 	else if (sigma <= 0) return 0;
; 95   : 	else return exp(-(x*x)/(2*sigma*sigma)) / (sigma * sqrt(2*3.1415926535));

	fld	QWORD PTR _x$[esp+8]
	fmul	ST(0), ST(0)
	fld	ST(1)
	fadd	ST(0), ST(0)
	fmulp	ST(2), ST(0)
	fdivrp	ST(1), ST(0)
	fchs
	call	__CIexp
	fstp	QWORD PTR tv67[esp+12]
	fld	QWORD PTR __real@401921fb54411744
	call	__CIsqrt
	fmul	QWORD PTR _sigma$[esp+8]
	fdivr	QWORD PTR tv67[esp+12]
$LN1@NormalDist:

; 96   : }

	add	esp, 12					; 0000000cH
	ret	0
?NormalDist@@YANNN@Z ENDP				; NormalDist
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ?_Swap_aux@_Container_base_aux@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
?_Swap_aux@_Container_base_aux@std@@QAEXAAV12@@Z PROC	; std::_Container_base_aux::_Swap_aux, COMDAT
; _this$ = ecx
; __Right$ = eax

; 396  : 		{

	push	esi

; 397  : 		std::swap(_Myownedaux, _Right._Myownedaux);

	cmp	ecx, eax
	je	SHORT $LN3@Swap_aux
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
$LN3@Swap_aux:

; 398  : 		std::swap(*_Myownedaux, *_Right._Myownedaux);

	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, eax
	je	SHORT $LN6@Swap_aux
	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [eax], edx
$LN6@Swap_aux:
	pop	esi

; 399  : 		}

	ret	0
?_Swap_aux@_Container_base_aux@std@@QAEXAAV12@@Z ENDP	; std::_Container_base_aux::_Swap_aux
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\atlmfc\include\atltypes.inl
_TEXT	ENDS
;	COMDAT ??9CPoint@@QBEHUtagPOINT@@@Z
_TEXT	SEGMENT
_point$ = 8						; size = 8
??9CPoint@@QBEHUtagPOINT@@@Z PROC			; CPoint::operator!=, COMDAT
; _this$ = ecx

; 91   : 	{ return (x != point.x || y != point.y); }

	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _point$[esp-4]
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR _point$[esp]
	jne	SHORT $LN3@operator
	xor	eax, eax
	ret	8
$LN3@operator:
	mov	eax, 1
	ret	8
??9CPoint@@QBEHUtagPOINT@@@Z ENDP			; CPoint::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0CPoint@@QAE@UtagPOINT@@@Z
_TEXT	SEGMENT
_initPt$ = 8						; size = 8
??0CPoint@@QAE@UtagPOINT@@@Z PROC			; CPoint::CPoint, COMDAT
; _this$ = ecx

; 72   : 	{ *(POINT*)this = initPt; }

	mov	edx, DWORD PTR _initPt$[esp]
	mov	eax, ecx
	mov	ecx, DWORD PTR _initPt$[esp-4]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	ret	8
??0CPoint@@QAE@UtagPOINT@@@Z ENDP			; CPoint::CPoint
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap@PAHHH@std@@YAXPAH00H0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Val$ = 20						; size = 4
___formal$ = 24						; size = 4
??$_Pop_heap@PAHHH@std@@YAXPAH00H0@Z PROC		; std::_Pop_heap<int *,int,int>, COMDAT

; 2078 : 	*_Dest = *_First;

	mov	eax, DWORD PTR __First$[esp-4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Dest$[esp-4]
	mov	DWORD PTR [edx], ecx

; 2079 : 	std::_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First), _Val);

	mov	edx, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __Val$[esp-4]
	push	ecx
	sub	edx, eax
	sar	edx, 2
	push	edx
	push	0
	push	eax
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H

; 2080 : 	}

	ret	0
??$_Pop_heap@PAHHH@std@@YAXPAH00H0@Z ENDP		; std::_Pop_heap<int *,int,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z PROC		; std::_Pop_heap_0<int *,int>, COMDAT

; 2086 : 	_Pop_heap(_First, _Last - 1, _Last - 1,
; 2087 : 		_Ty(*(_Last - 1)), _Dist_type(_First));

	mov	ecx, DWORD PTR __First$[esp-4]
	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR [eax-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax-4], esi
	sub	eax, ecx
	push	edx
	sub	eax, 4
	sar	eax, 2
	push	eax
	push	0
	push	ecx
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H
	pop	esi

; 2088 : 	}

	ret	0
??$_Pop_heap_0@PAHH@std@@YAXPAH00@Z ENDP		; std::_Pop_heap_0<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$unchecked_copy_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$unchecked_copy_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::unchecked_copy_backward<int *,int *>, COMDAT

; 3611 : 		return (_STD _Copy_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3612 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN18@unchecked_@2
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN18@unchecked_@2:
	mov	eax, esi
	pop	esi

; 3613 : 	}

	ret	0
??$unchecked_copy_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::unchecked_copy_backward<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$pop_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$pop_heap@PAH@std@@YAXPAH0@Z PROC			; std::pop_heap<int *>, COMDAT

; 2093 : 	_DEBUG_RANGE(_First, _Last);
; 2094 : 	_DEBUG_HEAP(_First, _Last);
; 2095 : 	if (1 < _Last - _First)

	mov	ecx, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	mov	eax, ecx
	sub	eax, edx
	push	esi
	mov	esi, eax
	and	esi, -4					; fffffffcH
	cmp	esi, 4
	jle	SHORT $LN18@pop_heap

; 2096 : 		_Pop_heap_0(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Val_type(_First));

	mov	esi, DWORD PTR [ecx-4]
	push	edi
	mov	edi, DWORD PTR [edx]
	add	eax, -4					; fffffffcH
	push	esi
	sar	eax, 2
	push	eax
	push	0
	push	edx
	mov	DWORD PTR [ecx-4], edi
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Adjust_heap<int *,int,int>
	add	esp, 16					; 00000010H
	pop	edi
$LN18@pop_heap:
	pop	esi

; 2097 : 	}

	ret	0
??$pop_heap@PAH@std@@YAXPAH0@Z ENDP			; std::pop_heap<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Med3@PAH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Med3@PAH@std@@YAXPAH00@Z PROC			; std::_Med3<int *>, COMDAT

; 2997 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	eax, DWORD PTR __Mid$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [ecx]
	cmp	edx, esi
	jge	SHORT $LN8@Med3

; 2998 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN8@Med3
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
$LN8@Med3:

; 2999 : 	if (_DEBUG_LT(*_Last, *_Mid))

	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, DWORD PTR __Last$[esp+4]
	mov	edx, DWORD PTR [edi]
	cmp	edx, esi
	jge	SHORT $LN13@Med3

; 3000 : 		std::iter_swap(_Last, _Mid);

	cmp	edi, eax
	je	SHORT $LN13@Med3
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [eax], edx
$LN13@Med3:

; 3001 : 	if (_DEBUG_LT(*_Mid, *_First))

	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx]
	cmp	edx, esi
	pop	edi
	jge	SHORT $LN18@Med3

; 3002 : 		std::iter_swap(_Mid, _First);

	cmp	eax, ecx
	je	SHORT $LN18@Med3
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
$LN18@Med3:
	pop	esi

; 3003 : 	}

	ret	0
??$_Med3@PAH@std@@YAXPAH00@Z ENDP			; std::_Med3<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >, COMDAT

; 810  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 811  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN16@unchecked_@3
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN16@unchecked_@3:
	pop	edi
	mov	eax, esi
	pop	esi

; 812  : 	}

	ret	0
??$unchecked_uninitialized_copy@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_copy<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 1
___formal$ = 24						; size = 1
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Fill_n<int *,unsigned int,int>, COMDAT

; 3225 : 		// if _OutIt is checked, this will ensure we have enough space
; 3226 : 		_OutIt _Last = _First + _Count; (_Last);
; 3227 : 		_Fill_n(_CHECKED_BASE(_First), _Count, _Val,
; 3228 : 			_Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN7@Fill_n@2
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL9@Fill_n@2:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL9@Fill_n@2
	pop	esi
$LN7@Fill_n@2:

; 3229 : 	}

	ret	0
??$_Fill_n@PAHIH@std@@YAXPAHIABHUrandom_access_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Fill_n<int *,unsigned int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z PROC		; std::_Insertion_sort1<int *,int>, COMDAT

; 2966 : 	if (_First != _Last)

	mov	eax, DWORD PTR __Last$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR __First$[esp]
	cmp	ebx, eax
	je	SHORT $LN6@Insertion_
	push	esi

; 2967 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	lea	esi, DWORD PTR [ebx+4]
	cmp	esi, eax
	je	SHORT $LN31@Insertion_
	push	ebp
	mov	ebp, 4
	push	edi
	sub	ebp, ebx
	npad	2
$LL7@Insertion_:

; 2968 : 			{	// order next element
; 2969 : 			_BidIt _Next1 = _Next;
; 2970 : 			_Ty _Val = *_Next;

	mov	edi, DWORD PTR [esi]

; 2971 : 
; 2972 : 			if (_DEBUG_LT(_Val, *_First))

	cmp	edi, DWORD PTR [ebx]
	mov	edx, esi
	jge	SHORT $LN5@Insertion_

; 2973 : 				{	// found new earliest element, move to front
; 2974 : 				_STDEXT unchecked_copy_backward(_First, _Next, ++_Next1);

	lea	eax, DWORD PTR [esi+ebp-4]
	sar	eax, 2
	test	eax, eax
	jle	SHORT $LN25@Insertion_
	add	eax, eax
	add	eax, eax
	push	eax
	mov	ecx, esi
	push	ebx
	sub	ecx, eax
	push	eax
	add	ecx, 4
	push	ecx
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN25@Insertion_:

; 2975 : 				*_First = _Val;

	mov	DWORD PTR [ebx], edi

; 2976 : 				}
; 2977 : 			else

	jmp	SHORT $LN4@Insertion_
$LN5@Insertion_:

; 2978 : 				{	// look for insertion point after first
; 2979 : 				for (_BidIt _First1 = _Next1;
; 2980 : 					_DEBUG_LT(_Val, *--_First1);
; 2981 : 					_Next1 = _First1)

	mov	ecx, DWORD PTR [esi-4]
	cmp	edi, ecx
	lea	eax, DWORD PTR [esi-4]
	jge	SHORT $LN1@Insertion_
$LL3@Insertion_:

; 2982 : 					*_Next1 = *_First1;	// move hole down

	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax-4]
	mov	edx, eax
	sub	eax, 4
	cmp	edi, ecx
	jl	SHORT $LL3@Insertion_
$LN1@Insertion_:

; 2983 : 				*_Next1 = _Val;	// insert element in hole

	mov	DWORD PTR [edx], edi
$LN4@Insertion_:

; 2967 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

	add	esi, 4
	cmp	esi, DWORD PTR __Last$[esp+12]
	jne	SHORT $LL7@Insertion_
	pop	edi
	pop	ebp
$LN31@Insertion_:
	pop	esi
$LN6@Insertion_:
	pop	ebx

; 2984 : 				}
; 2985 : 			}
; 2986 : 	}

	ret	0
??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z ENDP		; std::_Insertion_sort1<int *,int>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Sort_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Sort_heap@PAH@std@@YAXPAH0@Z PROC			; std::_Sort_heap<int *>, COMDAT

; 2212 : 	{	// order heap by repeatedly popping, using operator<

	push	esi

; 2213 : 	_DEBUG_RANGE(_First, _Last);
; 2214 : 	_DEBUG_HEAP(_First, _Last);
; 2215 : 	for (; 1 < _Last - _First; --_Last)

	mov	esi, DWORD PTR __Last$[esp]
	push	edi
	mov	edi, DWORD PTR __First$[esp+4]
	sub	esi, edi
	mov	eax, esi
	sar	eax, 2
	cmp	eax, 1
	jle	SHORT $LN1@Sort_heap
$LN28@Sort_heap:

; 2216 : 		std::pop_heap(_First, _Last);

	mov	eax, DWORD PTR [edi+esi-4]
	mov	ecx, DWORD PTR [edi]
	push	eax
	lea	edx, DWORD PTR [esi-4]
	sar	edx, 2
	push	edx
	push	0
	push	edi
	mov	DWORD PTR [edi+esi-4], ecx
	call	??$_Adjust_heap@PAHHH@std@@YAXPAHHHH@Z	; std::_Adjust_heap<int *,int,int>
	sub	esi, 4
	mov	eax, esi
	sar	eax, 2
	add	esp, 16					; 00000010H
	cmp	eax, 1
	jg	SHORT $LN28@Sort_heap
$LN1@Sort_heap:
	pop	edi
	pop	esi

; 2217 : 	}

	ret	0
??$_Sort_heap@PAH@std@@YAXPAH0@Z ENDP			; std::_Sort_heap<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Median@PAH@std@@YAXPAH00@Z
_TEXT	SEGMENT
tv261 = 8						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Median@PAH@std@@YAXPAH00@Z PROC			; std::_Median<int *>, COMDAT

; 3008 : 	if (40 < _Last - _First)

	mov	ecx, DWORD PTR __First$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+4]
	mov	eax, edi
	sub	eax, ecx
	sar	eax, 2
	cmp	eax, 40					; 00000028H
	jle	$LN2@Median

; 3009 : 		{	// median of nine
; 3010 : 		size_t _Step = (_Last - _First + 1) / 8;

	inc	eax
	cdq
	and	edx, 7
	add	eax, edx

; 3011 : 		std::_Med3(_First, _First + _Step, _First + 2 * _Step);

	mov	edx, DWORD PTR [ecx]
	sar	eax, 3
	push	ebx
	push	ebp
	lea	ebp, DWORD PTR [eax*4]
	lea	edi, DWORD PTR [eax*8]
	mov	eax, DWORD PTR [ecx+ebp]
	lea	esi, DWORD PTR [ecx+ebp]
	mov	DWORD PTR tv261[esp+12], edi
	add	edi, ecx
	cmp	eax, edx
	jge	SHORT $LN12@Median
	cmp	esi, ecx
	je	SHORT $LN12@Median
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ecx], eax
$LN12@Median:
	mov	eax, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi]
	cmp	eax, edx
	jge	SHORT $LN17@Median
	cmp	edi, esi
	je	SHORT $LN17@Median
	mov	DWORD PTR [edi], edx
	mov	DWORD PTR [esi], eax
$LN17@Median:
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx]
	cmp	eax, edx
	jge	SHORT $LN22@Median
	cmp	esi, ecx
	je	SHORT $LN22@Median
	mov	DWORD PTR [esi], edx
	mov	DWORD PTR [ecx], eax
$LN22@Median:

; 3012 : 		std::_Med3(_Mid - _Step, _Mid, _Mid + _Step);

	mov	eax, DWORD PTR __Mid$[esp+12]
	mov	edx, DWORD PTR [eax]
	mov	ecx, eax
	sub	ecx, ebp
	mov	edi, DWORD PTR [ecx]
	cmp	edx, edi
	lea	ebx, DWORD PTR [eax+ebp]
	jge	SHORT $LN32@Median
	cmp	eax, ecx
	je	SHORT $LN32@Median
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [ecx], edx
$LN32@Median:
	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [eax]
	cmp	edx, edi
	jge	SHORT $LN37@Median
	cmp	ebx, eax
	je	SHORT $LN37@Median
	mov	DWORD PTR [ebx], edi
	mov	DWORD PTR [eax], edx
$LN37@Median:
	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [ecx]
	cmp	edx, edi
	jge	SHORT $LN42@Median
	cmp	eax, ecx
	je	SHORT $LN42@Median
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [ecx], edx
$LN42@Median:

; 3013 : 		std::_Med3(_Last - 2 * _Step, _Last - _Step, _Last);

	mov	edx, DWORD PTR __Last$[esp+12]
	mov	ecx, edx
	sub	edx, DWORD PTR tv261[esp+12]
	sub	ecx, ebp
	mov	edi, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	cmp	edi, ebx
	jge	SHORT $LN52@Median
	cmp	ecx, edx
	je	SHORT $LN52@Median
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [edx], edi
$LN52@Median:
	mov	ebp, DWORD PTR __Last$[esp+12]
	mov	edi, DWORD PTR [ebp]
	mov	ebx, DWORD PTR [ecx]
	cmp	edi, ebx
	jge	SHORT $LN57@Median
	cmp	ebp, ecx
	je	SHORT $LN57@Median
	mov	DWORD PTR [ebp], ebx
	mov	DWORD PTR [ecx], edi
$LN57@Median:
	mov	edi, DWORD PTR [ecx]
	mov	ebx, DWORD PTR [edx]
	cmp	edi, ebx
	jge	SHORT $LN62@Median
	cmp	ecx, edx
	je	SHORT $LN62@Median
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [edx], edi
$LN62@Median:

; 3014 : 		std::_Med3(_First + _Step, _Mid, _Last - _Step);

	mov	edx, DWORD PTR [eax]
	mov	edi, DWORD PTR [esi]
	cmp	edx, edi
	pop	ebp
	pop	ebx
	jge	SHORT $LN72@Median
	cmp	eax, esi
	je	SHORT $LN72@Median
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [esi], edx
$LN72@Median:
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [eax]
	cmp	edx, edi
	jge	SHORT $LN77@Median
	cmp	ecx, eax
	je	SHORT $LN77@Median
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [eax], edx
$LN77@Median:
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [esi]
	cmp	ecx, edx
	jge	SHORT $LN102@Median
	cmp	eax, esi
	je	SHORT $LN102@Median
	mov	DWORD PTR [eax], edx
	pop	edi
	mov	DWORD PTR [esi], ecx
	pop	esi

; 3018 : 	}

	ret	0
$LN2@Median:

; 3015 : 		}
; 3016 : 	else
; 3017 : 		std::_Med3(_First, _Mid, _Last);

	mov	eax, DWORD PTR __Mid$[esp+4]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx]
	cmp	edx, esi
	jge	SHORT $LN92@Median
	cmp	eax, ecx
	je	SHORT $LN92@Median
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
$LN92@Median:
	mov	edx, DWORD PTR [edi]
	mov	esi, DWORD PTR [eax]
	cmp	edx, esi
	jge	SHORT $LN97@Median
	cmp	edi, eax
	je	SHORT $LN97@Median
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [eax], edx
$LN97@Median:
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [ecx]
	cmp	edx, esi
	jge	SHORT $LN102@Median
	cmp	eax, ecx
	je	SHORT $LN102@Median
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
$LN102@Median:
	pop	edi
	pop	esi

; 3018 : 	}

	ret	0
??$_Median@PAH@std@@YAXPAH00@Z ENDP			; std::_Median<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Construct@U?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z
_TEXT	SEGMENT
??$_Construct@U?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z PROC ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 51   : 	void _FARQ *_Vptr = _Ptr;
; 52   : 	::new (_Vptr) _T1(_Val);

	test	eax, eax
	je	SHORT $LN3@Construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN3@Construct:

; 53   : 	}

	ret	0
??$_Construct@U?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@ABU10@@Z ENDP ; std::_Construct<std::pair<unsigned __int64,unsigned __int64>,std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>, COMDAT

; 205  : 	return _STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al);

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN18@Uninit_mov
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN18@Uninit_mov:
	pop	edi
	mov	eax, esi
	pop	esi

; 206  : 	}

	ret	0
??$_Uninit_move@PAHPAHV?$allocator@H@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00AAV?$allocator@H@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<int *,int *,std::allocator<int>,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = esi
; __Last$ = ecx
; __Dest$ = edx

; 2660 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2661 : 	_OutIt _Result = _Dest - (_Last - _First);

	mov	eax, ecx
	sub	eax, esi
	sar	eax, 4
	shl	eax, 4
	push	edi
	mov	edi, eax
	mov	eax, edx
	sub	eax, edi

; 2662 : 	_Copy_backward_opt(_First, _Last, _CHECKED_BASE(_Dest),
; 2663 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	cmp	esi, ecx
	je	SHORT $LN7@Copy_backw@3
	sub	edx, ecx
$LL8@Copy_backw@3:
	mov	edi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR [edx+ecx], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+ecx+4], edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+ecx+8], edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+ecx+12], edi
	cmp	ecx, esi
	jne	SHORT $LL8@Copy_backw@3
$LN7@Copy_backw@3:
	pop	edi

; 2664 : 	return _Result;
; 2665 : 	}

	ret	0
??$_Copy_backward_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z PROC	; stdext::unchecked_fill_n<int *,unsigned int,int>, COMDAT

; 3695 : 		_STD _Fill_n(_First, _Count, _Val, _STD _Iter_cat(_First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN11@unchecked_@4
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL13@unchecked_@4:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL13@unchecked_@4
	pop	esi
$LN11@unchecked_@4:

; 3696 : 	}

	ret	0
??$unchecked_fill_n@PAHIH@stdext@@YAXPAHIABH@Z ENDP	; stdext::unchecked_fill_n<int *,unsigned int,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Insertion_sort@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Insertion_sort@PAH@std@@YAXPAH0@Z PROC		; std::_Insertion_sort<int *>, COMDAT

; 2991 : 	std::_Insertion_sort1(_First, _Last, _Val_type(_First));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	push	0
	push	eax
	push	ecx
	call	??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z ; std::_Insertion_sort1<int *,int>
	add	esp, 12					; 0000000cH

; 2992 : 	}

	ret	0
??$_Insertion_sort@PAH@std@@YAXPAH0@Z ENDP		; std::_Insertion_sort<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$sort_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort_heap@PAH@std@@YAXPAH0@Z PROC			; std::sort_heap<int *>, COMDAT

; 2222 : 	_DEBUG_HEAP(_First, _Last);
; 2223 : 	_Sort_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last));

	jmp	??$_Sort_heap@PAH@std@@YAXPAH0@Z	; std::_Sort_heap<int *>
??$sort_heap@PAH@std@@YAXPAH0@Z ENDP			; std::sort_heap<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$make_heap@PAH@std@@YAXPAH0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$make_heap@PAH@std@@YAXPAH0@Z PROC			; std::make_heap<int *>, COMDAT

; 2176 : 	_DEBUG_RANGE(_First, _Last);
; 2177 : 	if (1 < _Last - _First)

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	mov	edx, eax
	sub	edx, ecx
	and	edx, -4					; fffffffcH
	cmp	edx, 4
	jle	SHORT $LN1@make_heap

; 2178 : 		_Make_heap(_CHECKED_BASE(_First), _CHECKED_BASE(_Last),
; 2179 : 			_Dist_type(_First), _Val_type(_First));

	push	0
	push	0
	push	eax
	push	ecx
	call	??$_Make_heap@PAHHH@std@@YAXPAH000@Z	; std::_Make_heap<int *,int,int>
	add	esp, 16					; 00000010H
$LN1@make_heap:

; 2180 : 	}

	ret	0
??$make_heap@PAH@std@@YAXPAH0@Z ENDP			; std::make_heap<int *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z
_TEXT	SEGMENT
__Glast$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z PROC ; std::_Unguarded_partition<int *>, COMDAT

; 3022 : 	{	// partition [_First, _Last), using operator<

	push	ecx
	push	ebx
	push	ebp

; 3023 : 	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid

	mov	ebp, DWORD PTR __First$[esp+8]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[esp+16]
	mov	eax, edi
	sub	eax, ebp
	sar	eax, 2
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	esi, DWORD PTR [ebp+eax*4]

; 3024 : 	std::_Median(_First, _Mid, _Last - 1);

	lea	eax, DWORD PTR [edi-4]
	push	eax
	push	esi
	push	ebp
	call	??$_Median@PAH@std@@YAXPAH00@Z		; std::_Median<int *>
	add	esp, 12					; 0000000cH

; 3025 : 	_RanIt _Pfirst = _Mid;

	mov	ecx, esi

; 3026 : 	_RanIt _Plast = _Pfirst + 1;

	lea	ebx, DWORD PTR [esi+4]

; 3027 : 
; 3028 : 	while (_First < _Pfirst
; 3029 : 		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)
; 3030 : 		&& !(*_Pfirst < *(_Pfirst - 1)))

	cmp	ebp, esi
	jae	SHORT $LN69@Unguarded_
$LL27@Unguarded_:
	mov	eax, DWORD PTR [ecx-4]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, eax
	jg	SHORT $LN69@Unguarded_
	jl	SHORT $LN69@Unguarded_
	add	ecx, -4					; fffffffcH
	cmp	ebp, ecx
	jb	SHORT $LL27@Unguarded_
$LN69@Unguarded_:

; 3031 : 		--_Pfirst;
; 3032 : 	while (_Plast < _Last
; 3033 : 		&& !_DEBUG_LT(*_Plast, *_Pfirst)
; 3034 : 		&& !(*_Pfirst < *_Plast))

	cmp	ebx, edi
	jae	SHORT $LN24@Unguarded_
	mov	edx, DWORD PTR [ecx]
	npad	4
$LL25@Unguarded_:
	mov	eax, DWORD PTR [ebx]
	cmp	edx, eax
	jg	SHORT $LN24@Unguarded_
	jl	SHORT $LN24@Unguarded_

; 3035 : 		++_Plast;

	add	ebx, 4
	cmp	ebx, edi
	jb	SHORT $LL25@Unguarded_
$LN24@Unguarded_:

; 3036 : 
; 3037 : 	_RanIt _Gfirst = _Plast;
; 3038 : 	_RanIt _Glast = _Pfirst;

	mov	ebp, ecx
	mov	eax, ebx
	mov	DWORD PTR __Glast$[esp+20], ebp
$LL23@Unguarded_:

; 3039 : 
; 3040 : 	for (; ; )
; 3041 : 		{	// partition
; 3042 : 		for (; _Gfirst < _Last; ++_Gfirst)

	cmp	eax, edi
	jae	SHORT $LN73@Unguarded_
	npad	5
$LL21@Unguarded_:

; 3043 : 			if (_DEBUG_LT(*_Pfirst, *_Gfirst))

	mov	esi, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	cmp	esi, edx
	jg	SHORT $LN20@Unguarded_

; 3044 : 				;
; 3045 : 			else if (*_Gfirst < *_Pfirst)

	jl	SHORT $LN73@Unguarded_

; 3046 : 				break;
; 3047 : 			else
; 3048 : 				std::iter_swap(_Plast++, _Gfirst);

	mov	edx, ebx
	add	ebx, 4
	cmp	edx, eax
	je	SHORT $LN20@Unguarded_
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [edx], esi
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR __Last$[esp+16]
$LN20@Unguarded_:
	add	eax, 4
	cmp	eax, edi
	jb	SHORT $LL21@Unguarded_
$LN73@Unguarded_:

; 3049 : 		for (; _First < _Glast; --_Glast)

	cmp	ebp, DWORD PTR __First$[esp+16]
	jbe	SHORT $LN85@Unguarded_
	lea	edx, DWORD PTR [ebp-4]
	npad	3
$LL14@Unguarded_:

; 3050 : 			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))

	mov	esi, DWORD PTR [edx]
	mov	edi, DWORD PTR [ecx]
	cmp	edi, esi
	jg	SHORT $LN13@Unguarded_

; 3051 : 				;
; 3052 : 			else if (*_Pfirst < *(_Glast - 1))

	jl	SHORT $LN84@Unguarded_

; 3053 : 				break;
; 3054 : 			else
; 3055 : 				std::iter_swap(--_Pfirst, _Glast - 1);

	sub	ecx, 4
	cmp	ecx, edx
	je	SHORT $LN13@Unguarded_
	mov	edi, DWORD PTR [edx]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], edi
	mov	DWORD PTR [edx], esi
$LN13@Unguarded_:
	sub	ebp, 4
	sub	edx, 4
	cmp	DWORD PTR __First$[esp+16], ebp
	jb	SHORT $LL14@Unguarded_
$LN84@Unguarded_:

; 3049 : 		for (; _First < _Glast; --_Glast)

	mov	edi, DWORD PTR __Last$[esp+16]

; 3056 : 		if (_Glast == _First && _Gfirst == _Last)

	cmp	ebp, DWORD PTR __First$[esp+16]
	mov	DWORD PTR __Glast$[esp+20], ebp
$LN85@Unguarded_:
	jne	SHORT $LN6@Unguarded_
	cmp	eax, edi
	je	$LN75@Unguarded_

; 3058 : 
; 3059 : 		if (_Glast == _First)
; 3060 : 			{	// no room at bottom, rotate pivot upward
; 3061 : 			if (_Plast != _Gfirst)

	cmp	ebx, eax
	je	SHORT $LN44@Unguarded_

; 3062 : 				std::iter_swap(_Pfirst, _Plast);

	cmp	ecx, ebx
	je	SHORT $LN44@Unguarded_
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ebx], edx
$LN44@Unguarded_:

; 3063 : 			++_Plast;
; 3064 : 			std::iter_swap(_Pfirst++, _Gfirst++);

	mov	edx, eax
	mov	esi, ecx
	add	ebx, 4
	add	ecx, 4
	add	eax, 4
	cmp	esi, edx
	je	$LL23@Unguarded_
	mov	ebp, DWORD PTR [edx]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi], ebp
	mov	ebp, DWORD PTR __Glast$[esp+20]
	mov	DWORD PTR [edx], edi
	mov	edi, DWORD PTR __Last$[esp+16]
	jmp	$LL23@Unguarded_
$LN6@Unguarded_:

; 3065 : 			}
; 3066 : 		else if (_Gfirst == _Last)
; 3067 : 			{	// no room at top, rotate pivot downward
; 3068 : 			if (--_Glast != --_Pfirst)

	sub	ebp, 4
	mov	DWORD PTR __Glast$[esp+20], ebp
	cmp	eax, edi
	jne	SHORT $LN3@Unguarded_
	sub	ecx, 4
	cmp	ebp, ecx
	je	SHORT $LN54@Unguarded_

; 3069 : 				std::iter_swap(_Glast, _Pfirst);

	mov	esi, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ebp]
	mov	DWORD PTR [ebp], esi
	mov	DWORD PTR [ecx], edx
$LN54@Unguarded_:

; 3070 : 			std::iter_swap(_Pfirst, --_Plast);

	sub	ebx, 4
	cmp	ecx, ebx
	je	$LL23@Unguarded_
	mov	esi, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], esi
	mov	DWORD PTR [ebx], edx

; 3071 : 			}
; 3072 : 		else

	jmp	$LL23@Unguarded_
$LN3@Unguarded_:

; 3073 : 			std::iter_swap(_Gfirst++, --_Glast);

	cmp	eax, ebp
	je	SHORT $LN64@Unguarded_
	mov	esi, DWORD PTR [ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ebp], edx
$LN64@Unguarded_:
	add	eax, 4

; 3074 : 		}

	jmp	$LL23@Unguarded_
$LN75@Unguarded_:

; 3057 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

	mov	eax, DWORD PTR ___$ReturnUdt$[esp+16]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], ecx
	pop	ebx

; 3075 : 	}

	pop	ecx
	ret	0
??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ENDP ; std::_Unguarded_partition<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z
_TEXT	SEGMENT
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct, COMDAT
; __Ptr$ = eax
; __Val$ = ecx

; 155  : 		_Construct(_Ptr, _Val);

	test	eax, eax
	je	SHORT $LN5@construct
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$LN5@construct:

; 156  : 		}

	ret	0
?construct@?$allocator@U?$pair@_K_K@std@@@std@@QAEXPAU?$pair@_K_K@2@ABU32@@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::construct
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__First_dest_cat$ = 20					; size = 1
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT

; 2727 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2728 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN8@Move_backw
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN8@Move_backw:
	mov	eax, esi
	pop	esi

; 2729 : 	}

	ret	0
??$_Move_backward_opt@PAHPAHUrandom_access_iterator_tag@std@@U_Undefined_move_tag@2@@std@@YAPAHPAH00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<int *,int *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z PROC ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >, COMDAT

; 850  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 851  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Dest$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN30@Unchecked_
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN30@Unchecked_:
	pop	edi
	mov	eax, esi
	pop	esi

; 852  : 	}

	ret	0
??$_Unchecked_uninitialized_move@PAHPAHV?$allocator@H@std@@@stdext@@YAPAHPAH00AAV?$allocator@H@std@@@Z ENDP ; stdext::_Unchecked_uninitialized_move<int *,int *,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Move_backward_opt@PAU?$pair@_K_K@std@@PAU12@Urandom_access_iterator_tag@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First_dest_cat$ = 8					; size = 1
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Move_backward_opt@PAU?$pair@_K_K@std@@PAU12@Urandom_access_iterator_tag@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Move_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::random_access_iterator_tag,std::_Undefined_move_tag>, COMDAT
; __First$ = esi
; __Last$ = ecx
; __Dest$ = edx

; 2727 : 	return _Copy_backward_opt(_First, _Last, _Dest,
; 2728 : 		_First_dest_cat, _Ptr_cat(_First, _Dest), _Range_checked_iterator_tag());

	mov	eax, ecx
	sub	eax, esi
	sar	eax, 4
	shl	eax, 4
	push	edi
	mov	edi, eax
	mov	eax, edx
	sub	eax, edi
	cmp	esi, ecx
	je	SHORT $LN11@Move_backw@2
	sub	edx, ecx
$LL12@Move_backw@2:
	mov	edi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR [edx+ecx], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+ecx+4], edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+ecx+8], edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+ecx+12], edi
	cmp	ecx, esi
	jne	SHORT $LL12@Move_backw@2
$LN11@Move_backw@2:
	pop	edi

; 2729 : 	}

	ret	0
??$_Move_backward_opt@PAU?$pair@_K_K@std@@PAU12@Urandom_access_iterator_tag@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Move_backward_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::random_access_iterator_tag,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 415  : 		_STDEXT unchecked_fill_n(_First, _Count, _Val);

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN13@Uninit_fil
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL15@Uninit_fil:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL15@Uninit_fil
	pop	esi
$LN13@Uninit_fil:

; 416  : 	}

	ret	0
??$_Uninit_fill_n@PAHIHV?$allocator@H@std@@@std@@YAXPAHIABHAAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __Count$ = ecx
; __Val$ = edx

; 389  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

	mov	eax, DWORD PTR __First$[esp-4]

; 390  : 
; 391  :  #if _HAS_ITERATOR_DEBUGGING
; 392  : //	if (_Count < 0)
; 393  : //		_DEBUG_ERROR("negative count in uninitialized fill");
; 394  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 395  : 
; 396  : 	_FwdIt _Next = _First;
; 397  : 
; 398  : 	_TRY_BEGIN
; 399  : 	for (; 0 < _Count; --_Count, ++_First)

	test	ecx, ecx
	jbe	SHORT $LN4@Uninit_fil@2
	push	esi
	npad	7
$LL6@Uninit_fil@2:

; 400  : 		_Al.construct(_First, _Val);

	test	eax, eax
	je	SHORT $LN5@Uninit_fil@2
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], esi
$LN5@Uninit_fil@2:
	dec	ecx
	add	eax, 16					; 00000010H
	test	ecx, ecx
	ja	SHORT $LL6@Uninit_fil@2
	pop	esi
$LN4@Uninit_fil@2:

; 401  : 	_CATCH_ALL
; 402  : 	for (; _Next != _First; ++_Next)
; 403  : 		_Al.destroy(_Next);
; 404  : 	_RERAISE;
; 405  : 	_CATCH_END
; 406  : 	}

	ret	0
??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = ecx
; __Last$ = esi
; __Dest$ = edx

; 2456 : 	// if _OutIt is range checked, this will make sure there is enough space for the copy
; 2457 : 	_OutIt _Result = _Dest + (_Last - _First);

	mov	eax, esi
	sub	eax, ecx
	sar	eax, 4
	shl	eax, 4
	add	eax, edx

; 2458 : 	_Copy_opt(_First, _Last, _CHECKED_BASE(_Dest), 
; 2459 : 		forward_iterator_tag(), _Nonscalar_ptr_iterator_tag(), _Range_checked_iterator_tag());

	cmp	ecx, esi
	je	SHORT $LN7@Copy_opt@3
	sub	edx, ecx
	push	edi
$LL9@Copy_opt@3:
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [edx+ecx], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+ecx+4], edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+ecx+8], edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+ecx+12], edi
	add	ecx, 16					; 00000010H
	cmp	ecx, esi
	jne	SHORT $LL9@Copy_opt@3
	pop	edi
$LN7@Copy_opt@3:

; 2460 : 	return _Result;
; 2461 : 	}

	ret	0
??$_Copy_opt@PAU?$pair@_K_K@std@@PAU12@@std@@YAPAU?$pair@_K_K@0@PAU10@00Urandom_access_iterator_tag@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$_Sort@PAHH@std@@YAXPAH0H@Z
_TEXT	SEGMENT
__Mid$133922 = -8					; size = 8
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
??$_Sort@PAHH@std@@YAXPAH0H@Z PROC			; std::_Sort<int *,int>, COMDAT

; 3080 : 	{	// order [_First, _Last), using operator<

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx

; 3081 : 	_Diff _Count;
; 3082 : 	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )

	mov	ebx, DWORD PTR __First$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 2
	cmp	eax, 32					; 00000020H
	jle	SHORT $LN3@Sort
	mov	esi, DWORD PTR __Ideal$[ebp]
$LN7@Sort:
	test	esi, esi
	jle	SHORT $LN6@Sort

; 3083 : 		{	// divide and conquer by quicksort
; 3084 : 		pair<_RanIt, _RanIt> _Mid =
; 3085 : 			std::_Unguarded_partition(_First, _Last);

	push	edi
	lea	eax, DWORD PTR __Mid$133922[esp+28]
	push	ebx
	push	eax
	call	??$_Unguarded_partition@PAH@std@@YA?AU?$pair@PAHPAH@0@PAH0@Z ; std::_Unguarded_partition<int *>

; 3086 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

	mov	eax, esi
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	esi, eax
	cdq
	sub	eax, edx

; 3087 : 
; 3088 : 		if (_Mid.first - _First < _Last - _Mid.second)

	mov	edx, DWORD PTR __Mid$133922[esp+36]
	sar	eax, 1
	add	esi, eax
	mov	eax, DWORD PTR __Mid$133922[esp+40]
	mov	ecx, edi
	sub	ecx, eax
	sub	edx, ebx
	add	esp, 12					; 0000000cH
	and	ecx, -4					; fffffffcH
	and	edx, -4					; fffffffcH
	cmp	edx, ecx

; 3089 : 			{	// loop on second half
; 3090 : 			std::_Sort(_First, _Mid.first, _Ideal);

	push	esi
	jge	SHORT $LN5@Sort
	mov	eax, DWORD PTR __Mid$133922[esp+28]
	push	eax
	push	ebx
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>

; 3091 : 			_First = _Mid.second;

	mov	ebx, DWORD PTR __Mid$133922[esp+40]

; 3092 : 			}
; 3093 : 		else

	jmp	SHORT $LN42@Sort
$LN5@Sort:

; 3094 : 			{	// loop on first half
; 3095 : 			std::_Sort(_Mid.second, _Last, _Ideal);

	push	edi
	push	eax
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>

; 3096 : 			_Last = _Mid.first;

	mov	edi, DWORD PTR __Mid$133922[esp+36]
$LN42@Sort:
	mov	eax, edi
	sub	eax, ebx
	sar	eax, 2
	add	esp, 12					; 0000000cH
	cmp	eax, 32					; 00000020H
	jg	SHORT $LN7@Sort
$LN3@Sort:

; 3104 : 		}
; 3105 : 	else if (1 < _Count)

	cmp	eax, 1
	jle	SHORT $LN35@Sort

; 3106 : 		std::_Insertion_sort(_First, _Last);	// small

	push	0
	push	edi
	push	ebx
	call	??$_Insertion_sort1@PAHH@std@@YAXPAH00@Z ; std::_Insertion_sort1<int *,int>
	add	esp, 12					; 0000000cH
$LN35@Sort:

; 3107 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@Sort:

; 3097 : 			}
; 3098 : 		}
; 3099 : 
; 3100 : 	if (_ISORT_MAX < _Count)

	cmp	eax, 32					; 00000020H
	jle	SHORT $LN3@Sort

; 3101 : 		{	// heap sort if too many divisions
; 3102 : 		std::make_heap(_First, _Last);

	mov	ecx, edi
	sub	ecx, ebx
	and	ecx, -4					; fffffffcH
	cmp	ecx, 4
	jle	SHORT $LN10@Sort
	push	0
	push	0
	push	edi
	push	ebx
	call	??$_Make_heap@PAHHH@std@@YAXPAH000@Z	; std::_Make_heap<int *,int,int>
	add	esp, 16					; 00000010H
$LN10@Sort:

; 3103 : 		std::sort_heap(_First, _Last);

	push	edi
	push	ebx
	call	??$_Sort_heap@PAH@std@@YAXPAH0@Z	; std::_Sort_heap<int *>
	add	esp, 8

; 3107 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Sort@PAHH@std@@YAXPAH0H@Z ENDP			; std::_Sort<int *,int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@H@std@@YAPAHIPAH@Z
_TEXT	SEGMENT
$T235603 = -12						; size = 12
$T235607 = 8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@H@std@@YAPAHIPAH@Z PROC			; std::_Allocate<int>, COMDAT

; 37   : 	if (_Count <= 0)

	mov	ecx, DWORD PTR __Count$[esp-4]
	sub	esp, 12					; 0000000cH
	test	ecx, ecx
	ja	SHORT $LN3@Allocate

; 38   : 		_Count = 0;

	xor	ecx, ecx
$LN1@Allocate:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	lea	edx, DWORD PTR [ecx*4]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 12					; 0000000cH
	ret	0
$LN3@Allocate:

; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 4
	jae	SHORT $LN1@Allocate

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T235607[esp+8]
	push	eax
	lea	ecx, DWORD PTR $T235603[esp+16]
	mov	DWORD PTR $T235607[esp+12], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T235603[esp+16]
	push	ecx
	mov	DWORD PTR $T235603[esp+20], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN9@Allocate:
$LN8@Allocate:
	int	3
??$_Allocate@H@std@@YAPAHIPAH@Z ENDP			; std::_Allocate<int>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z PROC ; stdext::_Unchecked_move_backward<int *,int *>, COMDAT

; 3669 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3670 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	sar	eax, 2
	push	esi
	mov	esi, DWORD PTR __Dest$[esp]
	lea	ecx, DWORD PTR [eax*4]
	sub	esi, ecx
	test	eax, eax
	jle	SHORT $LN22@Unchecked_@2
	push	ecx
	push	edx
	push	ecx
	push	esi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN22@Unchecked_@2:
	mov	eax, esi
	pop	esi

; 3671 : 	}

	ret	0
??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ENDP ; stdext::_Unchecked_move_backward<int *,int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int *>, COMDAT
; _this$ = ecx

; 1151 : 		{	// move initializing [_First, _Last), using allocator
; 1152 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1153 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR __Last$[esp-4]
	mov	edx, DWORD PTR __First$[esp-4]
	sub	eax, edx
	push	esi
	sar	eax, 2
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	lea	ecx, DWORD PTR [eax*4]
	lea	esi, DWORD PTR [ecx+edi]
	test	eax, eax
	jbe	SHORT $LN32@Umove
	push	ecx
	push	edx
	push	ecx
	push	edi
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN32@Umove:
	pop	edi
	mov	eax, esi
	pop	esi

; 1154 : 		}

	ret	12					; 0000000cH
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Unchecked_move_backward@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z
_TEXT	SEGMENT
??$_Unchecked_move_backward@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z PROC ; stdext::_Unchecked_move_backward<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = esi
; __Last$ = ecx
; __Dest$ = edx

; 3669 : 		return (_STD _Move_backward_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3670 : 			_STD _Iter_random(_First, _Dest), _STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, ecx
	sub	eax, esi
	sar	eax, 4
	shl	eax, 4
	push	edi
	mov	edi, eax
	mov	eax, edx
	sub	eax, edi
	cmp	esi, ecx
	je	SHORT $LN25@Unchecked_@3
	sub	edx, ecx
$LL26@Unchecked_@3:
	mov	edi, DWORD PTR [ecx-16]
	sub	ecx, 16					; 00000010H
	mov	DWORD PTR [edx+ecx], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+ecx+4], edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+ecx+8], edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+ecx+12], edi
	cmp	ecx, esi
	jne	SHORT $LL26@Unchecked_@3
$LN25@Unchecked_@3:
	pop	edi

; 3671 : 	}

	ret	0
??$_Unchecked_move_backward@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ENDP ; stdext::_Unchecked_move_backward<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z PROC ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >, COMDAT

; 921  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 922  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	eax, DWORD PTR __Count$[esp-4]
	mov	ecx, DWORD PTR __First$[esp-4]
	test	eax, eax
	jbe	SHORT $LN17@unchecked_@5
	mov	edx, DWORD PTR __Val$[esp-4]
	push	esi
$LL19@unchecked_@5:
	mov	esi, DWORD PTR [edx]
	mov	DWORD PTR [ecx], esi
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL19@unchecked_@5
	pop	esi
$LN17@unchecked_@5:

; 923  : 	}

	ret	0
??$unchecked_uninitialized_fill_n@PAHIHV?$allocator@H@std@@@stdext@@YAXPAHIABHAAV?$allocator@H@std@@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<int *,unsigned int,int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z
_TEXT	SEGMENT
$T236063 = -16						; size = 4
$T236055 = -12						; size = 12
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z PROC ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >, COMDAT
; __Count$ = ecx

; 37   : 	if (_Count <= 0)
; 38   : 		_Count = 0;
; 39   : 	else if (((_SIZT)(-1) / _Count) < sizeof (_Ty))

	or	eax, -1
	xor	edx, edx
	div	ecx
	sub	esp, 16					; 00000010H
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN1@Allocate@2

; 40   : 		_THROW_NCEE(std::bad_alloc, NULL);

	lea	eax, DWORD PTR $T236063[esp+16]
	push	eax
	lea	ecx, DWORD PTR $T236055[esp+20]
	mov	DWORD PTR $T236063[esp+20], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236055[esp+20]
	push	ecx
	mov	DWORD PTR $T236055[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN13@Allocate@2:
$LN1@Allocate@2:

; 41   : 
; 42   : 		// allocate storage for _Count elements of type _Ty
; 43   : 	return ((_Ty _FARQ *)::operator new(_Count * sizeof (_Ty)));

	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 44   : 	}

	add	esp, 16					; 00000010H
	ret	0
$LN12@Allocate@2:
??$_Allocate@U?$pair@_K_K@std@@@std@@YAPAU?$pair@_K_K@0@IPAU10@@Z ENDP ; std::_Allocate<std::pair<unsigned __int64,unsigned __int64> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAXPAU?$pair@_K_K@std@@IABU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z
_TEXT	SEGMENT
$T236069 = -4						; size = 1
__Cat$236073 = -4					; size = 1
__Count$ = 8						; size = 4
__Val$ = 12						; size = 4
??$unchecked_uninitialized_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAXPAU?$pair@_K_K@std@@IABU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __First$ = edx

; 920  : 	{	// copy _Count *_Val to raw _First, using _Al

	push	ecx

; 921  : 		_STD _Uninit_fill_n(_First, _Count, _Val, _Al,
; 922  : 			_STD _Ptr_cat(_First, _First), _STD _Range_checked_iterator_tag());

	mov	BYTE PTR $T236069[esp+4], 0
	mov	eax, DWORD PTR $T236069[esp+4]
	mov	ecx, DWORD PTR __Cat$236073[esp+4]
	push	eax
	push	ecx
	mov	ecx, DWORD PTR __Count$[esp+8]
	push	edx
	mov	edx, DWORD PTR __Val$[esp+12]
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 923  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$unchecked_uninitialized_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAXPAU?$pair@_K_K@std@@IABU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z
_TEXT	SEGMENT
??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z PROC ; stdext::unchecked_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = ecx
; __Last$ = esi
; __Dest$ = edx

; 3579 : 		return (_STD _Copy_opt(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest,
; 3580 : 			_STD _Iter_random(_First, _Dest), _STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	eax, esi
	sub	eax, ecx
	sar	eax, 4
	shl	eax, 4
	add	eax, edx
	cmp	ecx, esi
	je	SHORT $LN21@unchecked_@6
	sub	edx, ecx
	push	edi
$LL23@unchecked_@6:
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [edx+ecx], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+ecx+4], edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+ecx+8], edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+ecx+12], edi
	add	ecx, 16					; 00000010H
	cmp	ecx, esi
	jne	SHORT $LL23@unchecked_@6
	pop	edi
$LN21@unchecked_@6:

; 3581 : 	}

	ret	0
??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ENDP ; stdext::unchecked_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@U?$pair@_K_K@2@HPBU32@ABU32@V_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ PROC ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Iterator_with_base@Urandom_access_iterator_tag@std@@HHPBHABHV_Iterator_base_aux@2@@std@@QAE@XZ ENDP ; std::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>::_Iterator_with_base<std::random_access_iterator_tag,int,int,int const *,int const &,std::_Iterator_base_aux>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@U?$pair@_K_K@std@@HPBU12@ABU12@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@U?$pair@_K_K@std@@HPBU12@ABU12@@std@@QAE@XZ PROC ; std::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>, COMDAT
; _this$ = eax
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Ranit@U?$pair@_K_K@std@@HPBU12@ABU12@@std@@QAE@XZ ENDP ; std::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>::_Ranit<std::pair<unsigned __int64,unsigned __int64>,int,std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> const &>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Ranit@HHPBHABH@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Ranit@HHPBHABH@std@@QAE@XZ PROC			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0?$_Ranit@HHPBHABH@std@@QAE@XZ ENDP			; std::_Ranit<int,int,int const *,int const &>::_Ranit<int,int,int const *,int const &>
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
??G?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator-, COMDAT
; _this$ = edi
; __Right$ = esi

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN4@operator@2
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN3@operator@2
$LN4@operator@2:
	call	__invalid_parameter_noinfo
$LN3@operator@2:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [edi+4]
	sub	eax, DWORD PTR [esi+4]
	sar	eax, 4

; 195  : 		}

	ret	0
??G?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = edi
; __Pvector$ = esi

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebx
	mov	ebx, DWORD PTR __Ptr$[esp]
	mov	DWORD PTR [edi], 0

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	test	esi, esi
	je	SHORT $LN4@Vector_con
	cmp	DWORD PTR [esi+12], ebx
	ja	SHORT $LN4@Vector_con
	cmp	ebx, DWORD PTR [esi+16]
	jbe	SHORT $LN3@Vector_con
$LN4@Vector_con:
	call	__invalid_parameter_noinfo
$LN3@Vector_con:

; 79   : 		this->_Set_container(_Pvector);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax

; 80   : 		_Myptr = _Ptr;

	mov	DWORD PTR [edi+4], ebx

; 81   : 		}

	mov	eax, edi
	pop	ebx
	ret	4
??0?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-, COMDAT
; _this$ = ecx

; 186  : 		{	// return difference of iterators

	push	esi
	mov	esi, ecx

; 187  : 
; 188  :  #if _HAS_ITERATOR_DEBUGGING
; 189  : 		_Compat(_Right);
; 190  :  #else
; 191  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR __Right$[esp+4]
	test	eax, eax
	je	SHORT $LN4@operator@3
	cmp	eax, DWORD PTR [edi]
	je	SHORT $LN3@operator@3
$LN4@operator@3:
	call	__invalid_parameter_noinfo
$LN3@operator@3:

; 192  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 193  : 
; 194  : 		return (_Myptr - _Right._Myptr);

	mov	eax, DWORD PTR [esi+4]
	sub	eax, DWORD PTR [edi+4]
	pop	edi
	sar	eax, 2
	pop	esi

; 195  : 		}

	ret	4
??G?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEHABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 76   : 	_Vector_const_iterator(_Tptr _Ptr, const _Container_base *_Pvector)

	push	ebx

; 77   : 		{	// construct with pointer _Ptr
; 78   : 		_SCL_SECURE_VALIDATE(_Pvector != NULL && ((_Myvec *)_Pvector)->_Myfirst <= _Ptr && _Ptr <= ((_Myvec *)_Pvector)->_Mylast);

	mov	ebx, DWORD PTR __Ptr$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Pvector$[esp+8]
	mov	esi, ecx
	mov	DWORD PTR [esi], 0
	test	edi, edi
	je	SHORT $LN4@Vector_con@2
	cmp	DWORD PTR [edi+12], ebx
	ja	SHORT $LN4@Vector_con@2
	cmp	ebx, DWORD PTR [edi+16]
	jbe	SHORT $LN3@Vector_con@2
$LN4@Vector_con@2:
	call	__invalid_parameter_noinfo
$LN3@Vector_con@2:

; 79   : 		this->_Set_container(_Pvector);

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	pop	edi

; 80   : 		_Myptr = _Ptr;

	mov	DWORD PTR [esi+4], ebx

; 81   : 		}

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	8
??0?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::_Vector_const_iterator<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@H@std@@QAEPAHI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@H@std@@QAEPAHI@Z PROC		; std::allocator<int>::allocate, COMDAT
; _this$ = ecx

; 145  : 		return (_Allocate(_Count, (pointer)0));

	mov	eax, DWORD PTR __Count$[esp-4]
	push	0
	push	eax
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	add	esp, 8

; 146  : 		}

	ret	4
?allocate@?$allocator@H@std@@QAEPAHI@Z ENDP		; std::allocator<int>::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ
_TEXT	SEGMENT
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 655  : 		{	// return iterator for end of nonmutable sequence

	push	ebx

; 656  : 		return (const_iterator(_Mylast, this));

	mov	ebx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi], 0
	cmp	DWORD PTR [edi+12], ebx
	jbe	SHORT $LN5@end
	call	__invalid_parameter_noinfo
$LN5@end:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	eax, esi
	pop	ebx

; 657  : 		}

	ret	0
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 645  : 		{	// return iterator for beginning of nonmutable sequence

	push	ebx

; 646  : 		return (const_iterator(_Myfirst, this));

	mov	ebx, DWORD PTR [edi+12]
	mov	DWORD PTR [esi], 0
	cmp	ebx, DWORD PTR [edi+16]
	jbe	SHORT $LN5@begin
	call	__invalid_parameter_noinfo
$LN5@begin:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	eax, esi
	pop	ebx

; 647  : 		}

	ret	0
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = edi
; __Pvector$ = esi

; 327  : 		{	// construct with pointer _Ptr

	push	ebx
	mov	ebx, DWORD PTR __Ptr$[esp]
	mov	DWORD PTR [edi], 0
	test	esi, esi
	je	SHORT $LN6@Vector_ite
	cmp	DWORD PTR [esi+12], ebx
	ja	SHORT $LN6@Vector_ite
	cmp	ebx, DWORD PTR [esi+16]
	jbe	SHORT $LN5@Vector_ite
$LN6@Vector_ite:
	call	__invalid_parameter_noinfo
$LN5@Vector_ite:
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ebx

; 328  : 		}

	mov	eax, edi
	pop	ebx
	ret	4
??0?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@PAU?$pair@_K_K@1@PBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==, COMDAT
; _this$ = ecx

; 203  : 		{	// test for iterator equality

	push	esi
	mov	esi, ecx

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR __Right$[esp+4]
	test	eax, eax
	je	SHORT $LN4@operator@4
	cmp	eax, DWORD PTR [edi]
	je	SHORT $LN3@operator@4
$LN4@operator@4:
	call	__invalid_parameter_noinfo
$LN3@operator@4:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [esi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edi+4]
	pop	edi
	sete	cl
	mov	al, cl
	pop	esi

; 212  : 		}

	ret	4
??8?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with pointer _Ptr

	push	ebx
	mov	ebx, DWORD PTR __Ptr$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Pvector$[esp+8]
	mov	esi, ecx
	mov	DWORD PTR [esi], 0
	test	edi, edi
	je	SHORT $LN6@Vector_ite@2
	cmp	DWORD PTR [edi+12], ebx
	ja	SHORT $LN6@Vector_ite@2
	cmp	ebx, DWORD PTR [edi+16]
	jbe	SHORT $LN5@Vector_ite@2
$LN6@Vector_ite@2:
	call	__invalid_parameter_noinfo
$LN5@Vector_ite@2:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	pop	edi
	mov	DWORD PTR [esi+4], ebx

; 328  : 		}

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	8
??0?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAE@PAHPBV_Container_base_aux@1@@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::_Vector_iterator<int,std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	mov	eax, DWORD PTR [ecx]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 440  : 		}

	ret	0
??1?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::~_Container_base_aux_alloc_real<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z PROC ; std::vector<int,std::allocator<int> >::_Ufill, COMDAT
; _this$ = ecx

; 1251 : 		{	// copy initializing _Count * _Val, using allocator

	push	esi

; 1252 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	esi, DWORD PTR __Count$[esp]
	push	edi
	mov	edi, DWORD PTR __Ptr$[esp+4]
	mov	eax, esi
	mov	ecx, edi
	test	esi, esi
	jbe	SHORT $LN26@Ufill
	mov	edx, DWORD PTR __Val$[esp+4]
	push	ebx
$LL21@Ufill:
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [ecx], ebx
	dec	eax
	add	ecx, 4
	test	eax, eax
	ja	SHORT $LL21@Ufill
	pop	ebx
$LN26@Ufill:

; 1253 : 		return (_Ptr + _Count);

	lea	eax, DWORD PTR [edi+esi*4]
	pop	edi
	pop	esi

; 1254 : 		}

	ret	12					; 0000000cH
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Ufill
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z
_TEXT	SEGMENT
$T236564 = -16						; size = 4
$T236566 = -12						; size = 12
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z PROC ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate, COMDAT
; __Count$ = ecx

; 144  : 		{	// allocate array of _Count elements

	sub	esp, 16					; 00000010H

; 145  : 		return (_Allocate(_Count, (pointer)0));

	test	ecx, ecx
	ja	SHORT $LN5@allocate
	xor	ecx, ecx
$LN3@allocate:
	shl	ecx, 4
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 146  : 		}

	add	esp, 16					; 00000010H
	ret	0

; 145  : 		return (_Allocate(_Count, (pointer)0));

$LN5@allocate:
	or	eax, -1
	xor	edx, edx
	div	ecx
	cmp	eax, 16					; 00000010H
	jae	SHORT $LN3@allocate
	lea	eax, DWORD PTR $T236564[esp+16]
	push	eax
	lea	ecx, DWORD PTR $T236566[esp+20]
	mov	DWORD PTR $T236564[esp+20], 0
	call	??0exception@std@@QAE@ABQBD@Z		; std::exception::exception
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	ecx, DWORD PTR $T236566[esp+20]
	push	ecx
	mov	DWORD PTR $T236566[esp+24], OFFSET ??_7bad_alloc@std@@6B@
	call	__CxxThrowException@8
$LN12@allocate:
$LN11@allocate:
	int	3
?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ENDP ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@XZ
_TEXT	SEGMENT
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@XZ PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = eax

; 437  : 		_Myownedaux->~_Aux_cont();
; 438  : 
; 439  : 		_Alaux.deallocate(_Myownedaux, 1);

	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx

; 440  : 		}

	ret	0
??1?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@XZ ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@2@PAU32@IABU32@@Z
_TEXT	SEGMENT
$T236599 = -4						; size = 1
__Cat$236603 = -4					; size = 1
?_Ufill@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@2@PAU32@IABU32@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ufill, COMDAT
; __Ptr$ = edi
; __Count$ = esi
; __Val$ = edx

; 1251 : 		{	// copy initializing _Count * _Val, using allocator

	push	ecx

; 1252 : 		_STDEXT unchecked_uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

	mov	BYTE PTR $T236599[esp+4], 0
	mov	eax, DWORD PTR $T236599[esp+4]
	mov	ecx, DWORD PTR __Cat$236603[esp+4]
	push	eax
	push	ecx
	push	edi
	mov	ecx, esi
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1253 : 		return (_Ptr + _Count);

	mov	eax, esi
	shl	eax, 4
	add	eax, edi

; 1254 : 		}

	add	esp, 16					; 00000010H
	ret	0
?_Ufill@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@2@PAU32@IABU32@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ufill
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy, COMDAT
; _this$ = esi

; 1129 : 		if (_Myfirst != 0)

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN4@Tidy@2

; 1130 : 			{	// something to free, destroy and deallocate it
; 1131 : 
; 1132 :  #if _HAS_ITERATOR_DEBUGGING
; 1133 : 			this->_Orphan_all();
; 1134 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1135 : 
; 1136 : 			_Destroy(_Myfirst, _Mylast);
; 1137 : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@Tidy@2:

; 1138 : 			}
; 1139 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+16], 0
	mov	DWORD PTR [esi+20], 0

; 1140 : 		}

	ret	0
?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR [ecx]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::_Vector_val<int,std::allocator<int> >::~_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = eax
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??8?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
??8?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator==, COMDAT
; _this$ = edi
; __Right$ = esi

; 204  : 
; 205  :  #if _HAS_ITERATOR_DEBUGGING
; 206  : 		_Compat(_Right);
; 207  :  #else
; 208  : 		_SCL_SECURE_VALIDATE(this->_Has_container() && this->_Same_container(_Right));

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN4@operator@5
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN3@operator@5
$LN4@operator@5:
	call	__invalid_parameter_noinfo
$LN3@operator@5:

; 209  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 210  : 
; 211  : 		return (_Myptr == _Right._Myptr);

	mov	eax, DWORD PTR [edi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+4]
	sete	cl
	mov	al, cl

; 212  : 		}

	ret	0
??8?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator==
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=, COMDAT
; _this$ = ecx

; 215  : 		{	// test for iterator inequality

	push	esi
	mov	esi, ecx

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR __Right$[esp+4]
	test	eax, eax
	je	SHORT $LN6@operator@6
	cmp	eax, DWORD PTR [edi]
	je	SHORT $LN5@operator@6
$LN6@operator@6:
	call	__invalid_parameter_noinfo
$LN5@operator@6:
	mov	eax, DWORD PTR [esi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [edi+4]
	pop	edi
	setne	cl
	mov	al, cl
	pop	esi

; 217  : 		}

	ret	4
??9?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::end, COMDAT
; _this$ = ecx

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebx
	push	esi
	mov	esi, ecx

; 651  : 		return (iterator(_Mylast, this));

	mov	ebx, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [edi], 0
	cmp	DWORD PTR [esi+12], ebx
	jbe	SHORT $LN7@end@2
	call	__invalid_parameter_noinfo
$LN7@end@2:
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ebx
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 652  : 		}

	ret	4
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ PROC ; std::vector<int,std::allocator<int> >::begin, COMDAT
; _this$ = ecx

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebx
	push	esi
	mov	esi, ecx

; 641  : 		return (iterator(_Myfirst, this));

	mov	ebx, DWORD PTR [esi+12]
	push	edi
	mov	edi, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [edi], 0
	cmp	ebx, DWORD PTR [esi+16]
	jbe	SHORT $LN7@begin@2
	call	__invalid_parameter_noinfo
$LN7@begin@2:
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ebx
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 642  : 		}

	ret	4
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@XZ ENDP ; std::vector<int,std::allocator<int> >::begin
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 558  : 		{	// destroy the object

	push	-1
	push	__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+24], esi
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[esp+32], edi

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+12]
	cmp	eax, edi
	je	SHORT $LN7@vector
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@vector:

; 560  : 		}

	mov	DWORD PTR __$EHRec$[esp+32], -1
	mov	eax, DWORD PTR [esi]
	push	eax
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edi
	call	??3@YAXPAX@Z				; operator delete
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	add	esp, 4
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
; Function compile flags: /Ogtpy
;	COMDAT ?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty, COMDAT
; _this$ = ecx

; 736  : 		return (size() == 0);

	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [ecx+12]
	and	eax, -16				; fffffff0H
	neg	eax
	sbb	eax, eax
	inc	eax

; 737  : 		}

	ret	0
?empty@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::empty
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ
_TEXT	SEGMENT
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 650  : 		{	// return iterator for end of mutable sequence

	push	ebx

; 651  : 		return (iterator(_Mylast, this));

	mov	ebx, DWORD PTR [edi+16]
	mov	DWORD PTR [esi], 0
	cmp	DWORD PTR [edi+12], ebx
	jbe	SHORT $LN7@end@3
	call	__invalid_parameter_noinfo
$LN7@end@3:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	eax, esi
	pop	ebx

; 652  : 		}

	ret	0
?end@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::end
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ
_TEXT	SEGMENT
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 640  : 		{	// return iterator for beginning of mutable sequence

	push	ebx

; 641  : 		return (iterator(_Myfirst, this));

	mov	ebx, DWORD PTR [edi+12]
	mov	DWORD PTR [esi], 0
	cmp	ebx, DWORD PTR [edi+16]
	jbe	SHORT $LN7@begin@3
	call	__invalid_parameter_noinfo
$LN7@begin@3:
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	eax, esi
	pop	ebx

; 642  : 		}

	ret	0
?begin@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::begin
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 558  : 		{	// destroy the object

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, DWORD PTR _this$[esp+12]
	push	edi
	xor	edi, edi
	mov	DWORD PTR __$EHRec$[esp+28], edi

; 559  : 		_Tidy();

	mov	eax, DWORD PTR [esi+12]
	cmp	eax, edi
	je	SHORT $LN7@vector@2
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@vector@2:

; 560  : 		}

	mov	DWORD PTR __$EHRec$[esp+28], -1
	mov	eax, DWORD PTR [esi]
	push	eax
	mov	DWORD PTR [esi+12], edi
	mov	DWORD PTR [esi+16], edi
	mov	DWORD PTR [esi+20], edi
	call	??3@YAXPAX@Z				; operator delete
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	add	esp, 4
	pop	edi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp-4]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__ehhandler$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	?Draw@Rasterizer@@QAE?AVCRect@@AAUSubPicDesc@@AAV2@PAEHHPBJ_N4@Z ; Rasterizer::Draw
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
;	COMDAT ?Draw@Rasterizer@@QAE?AVCRect@@AAUSubPicDesc@@AAV2@PAEHHPBJ_N4@Z
_TEXT	SEGMENT
_fSSE2$ = -93						; size = 1
_src$ = -92						; size = 4
tv4428 = -88						; size = 4
tv2030 = -88						; size = 4
tv1917 = -88						; size = 4
_xo$ = -84						; size = 4
tv3714 = -80						; size = 4
tv3483 = -80						; size = 4
tv2369 = -80						; size = 4
tv1927 = -80						; size = 4
tv1870 = -80						; size = 4
_s$ = -76						; size = 4
_w$ = -72						; size = 4
_am$ = -68						; size = 4
_h$ = -64						; size = 4
tv1933 = -60						; size = 4
_sw$131265 = -60					; size = 4
_sw$131201 = -60					; size = 4
tv4580 = -56						; size = 4
tv3837 = -56						; size = 4
_ia$237273 = -56					; size = 4
_ia$237218 = -56					; size = 4
_ia$237107 = -56					; size = 4
_ia$237054 = -56					; size = 4
_wt$131296 = -56					; size = 4
_wt$131287 = -56					; size = 4
_wt$131268 = -56					; size = 4
_wt$131223 = -56					; size = 4
_wt$131213 = -56					; size = 4
_y$ = -56						; size = 4
tv4757 = -52						; size = 4
tv4601 = -52						; size = 4
tv3570 = -52						; size = 4
tv3396 = -52						; size = 4
tv3138 = -52						; size = 4
_wt$131277 = -52					; size = 4
_wt$131260 = -52					; size = 4
_wt$131249 = -52					; size = 4
_wt$131232 = -52					; size = 4
_wt$131196 = -52					; size = 4
_wt$131180 = -52					; size = 4
_yo$ = -52						; size = 4
tv4909 = -48						; size = 4
tv4355 = -48						; size = 4
tv4334 = -48						; size = 4
tv4051 = -48						; size = 4
tv3589 = -48						; size = 4
tv3377 = -48						; size = 4
_ia$237304 = -48					; size = 4
_ia$237188 = -48					; size = 4
_ia$237135 = -48					; size = 4
_wt$131255 = -48					; size = 4
_wt$131244 = -48					; size = 4
_wt$131204 = -48					; size = 4
_wt$131191 = -48					; size = 4
_wt$131185 = -48					; size = 4
tv5012 = -44						; size = 4
tv4469 = -44						; size = 4
_ia$237358 = -44					; size = 4
tv5010 = -40						; size = 4
_r$237316 = -40						; size = 4
_r$237230 = -40						; size = 4
_a$237134 = -40						; size = 4
_a$237357 = -36						; size = 4
_r$ = -32						; size = 16
$T237003 = -16						; size = 16
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
_spd$ = 16						; size = 4
_clipRect$ = 20						; size = 4
_pAlphaMask$ = 24					; size = 4
_xsub$ = 28						; size = 4
_ysub$ = 32						; size = 4
_switchpts$ = 36					; size = 4
_fBody$ = 40						; size = 1
_fBorder$ = 44						; size = 1
?Draw@Rasterizer@@QAE?AVCRect@@AAUSubPicDesc@@AAV2@PAEHHPBJ_N4@Z PROC ; Rasterizer::Draw, COMDAT

; 928  : {

	push	ebp
	mov	ebp, esp
	and	esp, -16				; fffffff0H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _spd$[ebp]
	sub	esp, 100				; 00000064H

; 929  : 	CRect bbox(0, 0, 0, 0);

	xor	edx, edx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx

; 930  : 
; 931  : 	if(!switchpts || !fBody && !fBorder) return(bbox);

	cmp	DWORD PTR _switchpts$[ebp], edx
	je	$LN113@Draw
	cmp	BYTE PTR _fBody$[ebp], dl
	jne	SHORT $LN112@Draw
	cmp	BYTE PTR _fBorder$[ebp], dl
	je	$LN113@Draw
$LN112@Draw:

; 932  : 
; 933  : 	// clip
; 934  : 
; 935  : 	// Limit drawn area to intersection of rendering surface and rectangular clip area
; 936  : 	CRect r(0, 0, spd.w, spd.h);
; 937  : 	r &= clipRect;

	mov	edx, DWORD PTR _clipRect$[ebp]
	xor	eax, eax
	mov	DWORD PTR _r$[esp+112], eax
	mov	DWORD PTR _r$[esp+116], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _r$[esp+120], eax
	push	edx
	lea	eax, DWORD PTR _r$[esp+116]
	mov	DWORD PTR _r$[esp+128], ecx
	push	eax
	mov	ecx, eax
	push	ecx
	call	DWORD PTR __imp__IntersectRect@12

; 938  : 
; 939  : 	// Remember that all subtitle coordinates are specified in 1/8 pixels
; 940  : 	// (x+4)>>3 rounds to nearest whole pixel.
; 941  : 	// ??? What is xsub, ysub, mOffsetX and mOffsetY ?
; 942  : 	int x = (xsub + mOffsetX + 4)>>3;

	mov	edx, DWORD PTR [edi+132]
	mov	eax, DWORD PTR _xsub$[ebp]

; 943  : 	int y = (ysub + mOffsetY + 4)>>3;

	mov	ecx, DWORD PTR [edi+136]

; 944  : 	int w = mOverlayWidth;

	mov	esi, DWORD PTR [edi+116]
	lea	ebx, DWORD PTR [edx+eax+4]
	mov	edx, DWORD PTR _ysub$[ebp]
	lea	eax, DWORD PTR [ecx+edx+4]

; 945  : 	int h = mOverlayHeight;

	mov	ecx, DWORD PTR [edi+120]
	mov	DWORD PTR _h$[esp+112], ecx

; 946  : 	int xo = 0, yo = 0;

	xor	ecx, ecx
	mov	DWORD PTR _xo$[esp+112], ecx
	mov	DWORD PTR _yo$[esp+112], ecx

; 947  : 
; 948  : 	// Again, limiting?
; 949  : 	if(x < r.left) {xo = r.left-x; w -= r.left-x; x = r.left;}

	mov	ecx, DWORD PTR _r$[esp+112]
	sar	ebx, 3
	sar	eax, 3
	cmp	ebx, ecx
	mov	DWORD PTR _y$[esp+112], eax
	mov	DWORD PTR _w$[esp+112], esi
	jge	SHORT $LN110@Draw
	mov	edx, ecx
	sub	edx, ebx
	sub	ebx, ecx
	add	esi, ebx
	mov	DWORD PTR _xo$[esp+112], edx
	mov	DWORD PTR _w$[esp+112], esi
	mov	ebx, ecx
$LN110@Draw:

; 950  : 	if(y < r.top) {yo = r.top-y; h -= r.top-y; y = r.top;}

	mov	ecx, DWORD PTR _r$[esp+116]
	cmp	eax, ecx
	jge	SHORT $LN109@Draw
	mov	edx, ecx
	sub	edx, eax
	sub	eax, ecx
	add	DWORD PTR _h$[esp+112], eax
	mov	DWORD PTR _yo$[esp+112], edx
	mov	eax, ecx
	mov	DWORD PTR _y$[esp+112], ecx
$LN109@Draw:

; 951  : 	if(x+w > r.right) w = r.right-x;

	mov	ecx, DWORD PTR _r$[esp+120]
	lea	edx, DWORD PTR [esi+ebx]
	cmp	edx, ecx
	jle	SHORT $LN108@Draw
	sub	ecx, ebx
	mov	esi, ecx
	mov	DWORD PTR _w$[esp+112], esi
$LN108@Draw:

; 952  : 	if(y+h > r.bottom) h = r.bottom-y;

	mov	ecx, DWORD PTR _h$[esp+112]
	lea	edx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _r$[esp+124]
	cmp	edx, ecx
	jle	SHORT $LN107@Draw
	sub	ecx, eax
	mov	DWORD PTR _h$[esp+112], ecx
$LN107@Draw:

; 953  : 
; 954  : 	// Check if there's actually anything to render
; 955  : 	if(w <= 0 || h <= 0) return(bbox);

	test	esi, esi
	jle	$LN105@Draw
	cmp	DWORD PTR _h$[esp+112], 0
	jle	$LN105@Draw

; 956  : 
; 957  : 	bbox.SetRect(x, y, x+w, y+h);

	mov	eax, DWORD PTR _y$[esp+112]
	mov	ecx, DWORD PTR _h$[esp+112]
	add	ecx, eax
	push	ecx
	lea	edx, DWORD PTR [esi+ebx]
	push	edx
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	ebx
	push	eax
	call	DWORD PTR __imp__SetRect@20

; 958  : 	bbox &= CRect(0, 0, spd.w, spd.h);

	xor	eax, eax
	mov	DWORD PTR $T237003[esp+112], eax
	mov	DWORD PTR $T237003[esp+116], eax
	mov	eax, DWORD PTR _spd$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [eax+8]
	lea	eax, DWORD PTR $T237003[esp+112]
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	push	eax
	mov	DWORD PTR $T237003[esp+132], ecx
	mov	DWORD PTR $T237003[esp+136], edx
	call	DWORD PTR __imp__IntersectRect@12

; 959  : 
; 960  : 	// draw
; 961  : 
; 962  : 	// The alpha bitmap of the subtitles?
; 963  : 	const byte* src = mpOverlayBuffer + 2*(mOverlayWidth * yo + xo);

	mov	ecx, DWORD PTR [edi+116]
	imul	ecx, DWORD PTR _yo$[esp+112]
	add	ecx, DWORD PTR _xo$[esp+112]

; 964  : 	// s points to what the "body" to use is
; 965  : 	// If we're rendering body fill and border, src+1 points to the array of
; 966  : 	// widened regions which contain both border and fill in one.
; 967  : 	const byte* s = fBorder ? (src+1) : src;

	cmp	BYTE PTR _fBorder$[ebp], 0
	mov	edx, DWORD PTR [edi+112]
	lea	edi, DWORD PTR [edx+ecx*2]
	mov	DWORD PTR _src$[esp+112], edi
	je	SHORT $LN115@Draw
	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR _s$[esp+112], eax
	jmp	SHORT $LN116@Draw
$LN115@Draw:
	mov	DWORD PTR _s$[esp+112], edi
$LN116@Draw:

; 968  : 	// The complex "vector clip mask" I think.
; 969  : 	const byte* am = pAlphaMask + spd.w * y + x;

	mov	ecx, DWORD PTR _spd$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _y$[esp+112]
	imul	eax, edx
	add	eax, ebx
	add	eax, DWORD PTR _pAlphaMask$[ebp]
	mov	DWORD PTR _am$[esp+112], eax

; 970  : 	// How would this differ from src?
; 971  : 	unsigned long* dst = (unsigned long *)((char *)spd.bits + spd.pitch * y) + x;

	mov	eax, DWORD PTR [ecx+16]
	imul	eax, edx
	lea	eax, DWORD PTR [eax+ebx*4]

; 972  : 
; 973  : 	// Grab the first colour
; 974  : 	unsigned long color = switchpts[0];
; 975  : 
; 976  : 	// CPUID from VDub
; 977  : 	bool fSSE2 = !!(g_cpuid.m_flags & CCpuID::sse2);

	mov	ebx, DWORD PTR ?g_cpuid@@3VCCpuID@@A	; g_cpuid
	add	eax, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _switchpts$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shr	ebx, 3
	and	bl, 1
	mov	BYTE PTR _fSSE2$[esp+112], bl
	jmp	SHORT $LN104@Draw
	npad	8
$LL244@Draw:
	mov	bl, BYTE PTR _fSSE2$[esp+112]
$LN104@Draw:

; 978  : 
; 979  : 	// Every remaining line in the bitmap to be rendered...
; 980  : 	while(h--)
; 981  : 	{
; 982  : 		// Basic case of no complex clipping mask
; 983  : 		if(!pAlphaMask)
; 984  : 		{
; 985  : 			// If the first colour switching coordinate is at "infinite" we're
; 986  : 			// never switching and can use some simpler code.
; 987  : 			// ??? Is this optimisation really worth the extra readability issues it adds?
; 988  : 			if(switchpts[1] == 0xffffffff)

	mov	edx, DWORD PTR _switchpts$[ebp]
	dec	DWORD PTR _h$[esp+112]
	add	edx, 4
	cmp	DWORD PTR _pAlphaMask$[ebp], 0
	mov	DWORD PTR tv1870[esp+112], edx
	jne	$LN102@Draw
	cmp	DWORD PTR [edx], -1
	jne	$LN101@Draw

; 989  : 			{
; 990  : 				// fBody is true if we're rendering a fill or a shadow.
; 991  : 				if(fBody)

	cmp	BYTE PTR _fBody$[ebp], 0
	je	$LN100@Draw

; 992  : 				{
; 993  : 					// Run over every pixel, overlaying the subtitles with the fill colour
; 994  : 					if(fSSE2)

	test	bl, bl
	je	$LN99@Draw

; 995  : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131180[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edi, ecx
	shr	edi, 24					; 00000018H
	mov	edx, ecx
	and	edx, 16777215				; 00ffffffH
	pxor	xmm0, xmm0

; 996  : 							// The <<6 is due to pixmix expecting the alpha parameter to be
; 997  : 							// the multiplication of two 6-bit unsigned numbers but we
; 998  : 							// only have one here. (No alpha mask.)
; 999  : 							pixmix_sse2(&dst[wt], color, s[wt*2]);

	movdqa	xmm2, xmm0
	movd	xmm1, edx
	mov	DWORD PTR tv1917[esp+112], edi
	punpcklbw xmm1, xmm2
	jmp	SHORT $LN98@Draw
	npad	8
$LL236@Draw:
	mov	edi, DWORD PTR tv1917[esp+112]
$LN98@Draw:
	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	imul	edx, edi
	mov	edi, DWORD PTR [eax+ebx*4]
	shr	edx, 6
	and	edx, 255				; 000000ffH
	movd	xmm0, edi
	lea	edi, DWORD PTR [edx+1]
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	shl	edi, 16					; 00000010H
	or	edi, ebx
	mov	ebx, DWORD PTR _wt$131180[esp+112]
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm1
	movd	xmm3, edi
	pshufd	xmm3, xmm3, 0
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edx, xmm0
	mov	DWORD PTR [eax+ebx*4], edx
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131180[esp+112], ebx
	jl	SHORT $LL236@Draw
	jmp	$LN246@Draw
$LN99@Draw:

; 1000 : 					else
; 1001 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131185[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	and	edx, 16711935				; 00ff00ffH

; 1138 : 					}
; 1139 : 				}
; 1140 : 			}
; 1141 : 		}
; 1142 : 
; 1143 : 		// Step to next scanline
; 1144 : 		src += 2*mOverlayWidth;

	mov	DWORD PTR tv1927[esp+112], edx
	mov	esi, ecx
	shr	esi, 24					; 00000018H
	mov	edx, ecx
	and	edx, 65280				; 0000ff00H
	mov	DWORD PTR tv1917[esp+112], esi
	mov	DWORD PTR tv1933[esp+112], edx
	jmp	SHORT $LN94@Draw
	npad	6
$LL228@Draw:
	mov	esi, DWORD PTR tv1917[esp+112]
$LN94@Draw:

; 1002 : 							pixmix(&dst[wt], color, s[wt*2]);

	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	ebx, DWORD PTR [eax+ebx*4]
	imul	edx, esi
	shr	edx, 6
	and	edx, 255				; 000000ffH
	mov	edi, ebx
	and	edi, 65280				; 0000ff00H
	mov	esi, 256				; 00000100H
	sub	esi, edx
	imul	edi, esi
	mov	DWORD PTR _ia$237054[esp+112], esi
	mov	esi, DWORD PTR tv1933[esp+112]
	inc	edx
	imul	esi, edx
	add	edi, esi
	mov	esi, DWORD PTR tv1927[esp+112]
	mov	DWORD PTR tv3138[esp+112], ebx
	imul	esi, edx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, DWORD PTR _ia$237054[esp+112]
	add	ebx, esi
	mov	esi, DWORD PTR tv3138[esp+112]
	xor	edi, ebx
	mov	ebx, DWORD PTR tv1927[esp+112]
	imul	ebx, edx
	mov	edx, DWORD PTR tv3138[esp+112]
	and	esi, 16711935				; 00ff00ffH
	imul	esi, DWORD PTR _ia$237054[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237054[esp+112]
	add	esi, ebx
	mov	ebx, DWORD PTR _wt$131185[esp+112]
	and	edi, 16711680				; 00ff0000H
	xor	edi, esi
	mov	esi, DWORD PTR _w$[esp+112]
	shr	edi, 8
	and	edx, -16777216				; ff000000H
	or	edi, edx
	mov	DWORD PTR [eax+ebx*4], edi
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131185[esp+112], ebx
	jl	$LL228@Draw

; 1003 : 				}
; 1004 : 				// Not painting body, ie. painting border without fill in it
; 1005 : 				else

	jmp	$LN246@Draw
$LN100@Draw:

; 1006 : 				{
; 1007 : 					if(fSSE2)

	test	bl, bl
	je	$LN90@Draw

; 1008 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131191[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	DWORD PTR tv1917[esp+112], edx
	mov	edx, ecx
	and	edx, 16777215				; 00ffffffH
	pxor	xmm0, xmm0

; 1009 : 							// src contains two different bitmaps, interlaced per pixel.
; 1010 : 							// The first stored is the fill, the second is the widened
; 1011 : 							// fill region created by CreateWidenedRegion().
; 1012 : 							// Since we're drawing only the border, we must otain that
; 1013 : 							// by subtracting the fill from the widened region. The
; 1014 : 							// subtraction must be saturating since the widened region
; 1015 : 							// pixel value can be smaller than the fill value.
; 1016 : 							// This happens when blur edges is used.
; 1017 : 							pixmix_sse2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]));

	movdqa	xmm2, xmm0
	movd	xmm1, edx
	punpcklbw xmm1, xmm2
	npad	10
$LL237@Draw:
	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	edi, mm0
	emms
	mov	edx, DWORD PTR tv1917[esp+112]
	imul	edx, edi
	mov	edi, DWORD PTR [eax+ebx*4]
	shr	edx, 6
	and	edx, 255				; 000000ffH
	movd	xmm0, edi
	lea	edi, DWORD PTR [edx+1]
	shl	edi, 16					; 00000010H
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	or	edi, ebx
	mov	ebx, DWORD PTR _wt$131191[esp+112]
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm1
	movd	xmm3, edi
	mov	edi, DWORD PTR _src$[esp+112]
	pshufd	xmm3, xmm3, 0
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edx, xmm0
	mov	DWORD PTR [eax+ebx*4], edx
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131191[esp+112], ebx
	jl	SHORT $LL237@Draw
	jmp	$LN4@Draw
$LN90@Draw:

; 1018 : 					else
; 1019 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131196[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	esi, ecx
	and	esi, 16711935				; 00ff00ffH
	mov	DWORD PTR tv1927[esp+112], esi
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	esi, ecx
	and	esi, 65280				; 0000ff00H
	mov	DWORD PTR tv1917[esp+112], edx
	mov	DWORD PTR tv1933[esp+112], esi
	jmp	SHORT $LN85@Draw
	npad	3
$LL229@Draw:

; 1002 : 							pixmix(&dst[wt], color, s[wt*2]);

	mov	edx, DWORD PTR tv1917[esp+112]
$LN85@Draw:

; 1020 : 							pixmix(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]));

	movzx	esi, BYTE PTR [edi+ebx*2+1]
	movd	mm0, esi
	movzx	esi, BYTE PTR [edi+ebx*2]
	movd	mm1, esi
	psubusw	mm0, mm1
	movd	esi, mm0
	emms
	imul	edx, esi
	mov	ebx, DWORD PTR [eax+ebx*4]
	shr	edx, 6
	and	edx, 255				; 000000ffH
	mov	esi, ebx
	and	esi, 65280				; 0000ff00H
	mov	edi, 256				; 00000100H
	sub	edi, edx
	imul	esi, edi
	mov	DWORD PTR _ia$237107[esp+112], edi
	mov	edi, DWORD PTR tv1933[esp+112]
	inc	edx
	imul	edi, edx
	add	esi, edi
	mov	edi, DWORD PTR tv1927[esp+112]
	mov	DWORD PTR tv3377[esp+112], ebx
	imul	edi, edx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, DWORD PTR _ia$237107[esp+112]
	add	ebx, edi
	mov	edi, DWORD PTR tv3377[esp+112]
	xor	esi, ebx
	mov	ebx, DWORD PTR tv1927[esp+112]
	imul	ebx, edx
	mov	edx, DWORD PTR tv3377[esp+112]
	and	edi, 16711935				; 00ff00ffH
	imul	edi, DWORD PTR _ia$237107[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237107[esp+112]
	and	esi, 16711680				; 00ff0000H
	add	edi, ebx
	mov	ebx, DWORD PTR _wt$131196[esp+112]
	xor	esi, edi

; 1021 : 				}
; 1022 : 			}
; 1023 : 			// not (switchpts[1] == 0xffffffff)
; 1024 : 			else

	mov	edi, DWORD PTR _src$[esp+112]
	shr	esi, 8
	and	edx, -16777216				; ff000000H
	or	esi, edx
	mov	DWORD PTR [eax+ebx*4], esi
	mov	esi, DWORD PTR _w$[esp+112]
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131196[esp+112], ebx
	jl	$LL229@Draw
	jmp	$LN4@Draw
$LN101@Draw:

; 1025 : 			{
; 1026 : 				// switchpts plays an important rule here
; 1027 : 				const long *sw = switchpts;
; 1028 : 
; 1029 : 				if(fBody)

	cmp	BYTE PTR _fBody$[ebp], 0
	mov	edx, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$131201[esp+112], edx
	je	$LN81@Draw

; 1030 : 				{
; 1031 : 					if(fSSE2) 

	test	bl, bl
	je	$LN80@Draw

; 1032 : 					for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131204[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	DWORD PTR tv2030[esp+112], edx
	mov	edx, DWORD PTR _xo$[esp+112]
	pxor	xmm1, xmm1
	mov	DWORD PTR tv3396[esp+112], edx
$LN79@Draw:

; 1033 : 					{
; 1034 : 						// xo is the offset (usually negative) we have moved into the image
; 1035 : 						// So if we have passed the switchpoint (?) switch to another colour
; 1036 : 						// (So switchpts stores both colours *and* coordinates?)
; 1037 : 						if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	edi, DWORD PTR tv2030[esp+112]
	cmp	edx, DWORD PTR [edi]
	jl	SHORT $LN76@Draw
	mov	ecx, DWORD PTR _sw$131201[esp+112]
	npad	7
$LL75@Draw:
	add	ecx, 8
	cmp	edx, DWORD PTR [ecx+4]
	lea	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2030[esp+112], edi
	jge	SHORT $LL75@Draw
	mov	DWORD PTR _sw$131201[esp+112], ecx
	mov	ecx, DWORD PTR [ecx-8]
$LN76@Draw:

; 1038 : 						pixmix_sse2(&dst[wt], color, s[wt*2]);

	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	edi, ecx
	shr	edi, 24					; 00000018H
	imul	edx, edi
	mov	edi, DWORD PTR [eax+ebx*4]
	movd	xmm0, edi
	shr	edx, 6
	and	edx, 255				; 000000ffH
	mov	edi, ecx
	and	edi, 16777215				; 00ffffffH
	movd	xmm2, edi
	lea	edi, DWORD PTR [edx+1]
	punpcklbw xmm0, xmm1
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	shl	edi, 16					; 00000010H
	or	edi, ebx
	mov	ebx, DWORD PTR _wt$131204[esp+112]
	punpcklbw xmm2, xmm1
	punpcklwd xmm0, xmm2
	movd	xmm2, edi
	pshufd	xmm2, xmm2, 0
	pmaddwd	xmm0, xmm2
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edx, xmm0
	mov	DWORD PTR [eax+ebx*4], edx
	mov	edx, DWORD PTR tv3396[esp+112]
	inc	ebx
	inc	edx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131204[esp+112], ebx
	mov	DWORD PTR tv3396[esp+112], edx
	jl	$LN79@Draw

; 1039 : 					}

	jmp	$LN246@Draw
$LN80@Draw:

; 1040 : 					else
; 1041 : 					for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131213[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	esi, DWORD PTR tv1870[esp+112]
	mov	edi, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv2030[esp+112], esi
	mov	DWORD PTR tv3483[esp+112], edi
	jmp	SHORT $LN72@Draw
	npad	3
$LL230@Draw:
	mov	edx, DWORD PTR _sw$131201[esp+112]
$LN72@Draw:

; 1042 : 					{
; 1043 : 						if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];}

	mov	esi, DWORD PTR tv2030[esp+112]
	cmp	edi, DWORD PTR [esi]
	jl	SHORT $LN69@Draw
	npad	4
$LL68@Draw:
	add	edx, 8
	cmp	edi, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv2030[esp+112], ecx
	jge	SHORT $LL68@Draw
	mov	ecx, DWORD PTR [edx-8]
	mov	DWORD PTR _sw$131201[esp+112], edx
$LN69@Draw:

; 1044 : 						pixmix(&dst[wt], color, s[wt*2]);

	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	ebx, DWORD PTR [eax+ebx*4]
	mov	esi, ecx
	shr	esi, 24					; 00000018H
	imul	edx, esi
	shr	edx, 6
	and	edx, 255				; 000000ffH
	mov	esi, 256				; 00000100H
	sub	esi, edx
	inc	edx
	mov	DWORD PTR _ia$237135[esp+112], esi
	mov	esi, ebx
	and	esi, -65281				; ffff00ffH
	imul	esi, DWORD PTR _ia$237135[esp+112]
	mov	edi, ecx
	and	edi, -65281				; ffff00ffH
	imul	edi, edx
	add	edi, esi
	mov	esi, ecx
	and	esi, 65280				; 0000ff00H
	imul	esi, edx
	mov	DWORD PTR tv3570[esp+112], ebx
	and	ebx, 65280				; 0000ff00H
	mov	DWORD PTR tv5012[esp+112], esi
	mov	esi, DWORD PTR _ia$237135[esp+112]
	imul	ebx, esi
	mov	DWORD PTR _a$237134[esp+112], edx
	mov	edx, DWORD PTR tv5012[esp+112]
	add	edx, ebx
	mov	ebx, DWORD PTR tv3570[esp+112]
	xor	edi, edx
	and	ebx, 16711935				; 00ff00ffH
	mov	edx, ecx
	imul	ebx, esi
	and	edx, 16711935				; 00ff00ffH
	imul	edx, DWORD PTR _a$237134[esp+112]
	add	edx, ebx
	mov	ebx, DWORD PTR _wt$131213[esp+112]
	and	edi, 16711680				; 00ff0000H
	xor	edi, edx
	mov	edx, DWORD PTR tv3570[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, esi
	mov	esi, DWORD PTR _w$[esp+112]
	shr	edi, 8
	and	edx, -16777216				; ff000000H
	or	edi, edx
	mov	DWORD PTR [eax+ebx*4], edi
	mov	edi, DWORD PTR tv3483[esp+112]
	inc	ebx
	inc	edi
	cmp	ebx, esi
	mov	DWORD PTR _wt$131213[esp+112], ebx
	mov	DWORD PTR tv3483[esp+112], edi
	jl	$LL230@Draw

; 1045 : 					}
; 1046 : 				}
; 1047 : 				// Not body
; 1048 : 				else

	jmp	$LN246@Draw
$LN81@Draw:

; 1049 : 				{
; 1050 : 					if(fSSE2) 

	test	bl, bl
	je	$LN65@Draw

; 1051 : 					for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$131223[esp+112], 0
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	ebx, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv2030[esp+112], edx
	pxor	xmm1, xmm1
	mov	DWORD PTR tv3589[esp+112], ebx
$LL64@Draw:

; 1052 : 					{
; 1053 : 						if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];} 

	mov	edx, DWORD PTR tv2030[esp+112]
	cmp	ebx, DWORD PTR [edx]
	jl	SHORT $LN61@Draw
	mov	ecx, DWORD PTR _sw$131201[esp+112]
$LL60@Draw:
	add	ecx, 8
	cmp	ebx, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2030[esp+112], edx
	jge	SHORT $LL60@Draw
	mov	DWORD PTR _sw$131201[esp+112], ecx
	mov	ecx, DWORD PTR [ecx-8]
$LN61@Draw:

; 1054 : 						pixmix_sse2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]));

	mov	ebx, DWORD PTR _wt$131223[esp+112]
	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	edi, mm0
	emms
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	imul	edx, edi
	mov	edi, DWORD PTR [eax+ebx*4]
	movd	xmm0, edi
	shr	edx, 6
	and	edx, 255				; 000000ffH
	mov	edi, ecx
	and	edi, 16777215				; 00ffffffH
	movd	xmm2, edi
	lea	edi, DWORD PTR [edx+1]
	shl	edi, 16					; 00000010H
	punpcklbw xmm0, xmm1
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	mov	edx, DWORD PTR _wt$131223[esp+112]
	or	edi, ebx
	mov	ebx, DWORD PTR tv3589[esp+112]
	punpcklbw xmm2, xmm1
	punpcklwd xmm0, xmm2
	movd	xmm2, edi
	pshufd	xmm2, xmm2, 0
	pmaddwd	xmm0, xmm2
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edi, xmm0
	mov	DWORD PTR [eax+edx*4], edi

; 1055 : 					}

	mov	edi, DWORD PTR _src$[esp+112]
	inc	edx
	inc	ebx
	cmp	edx, esi
	mov	DWORD PTR _wt$131223[esp+112], edx
	mov	DWORD PTR tv3589[esp+112], ebx
	jl	$LL64@Draw
	jmp	$LN4@Draw
$LN65@Draw:

; 1056 : 					else
; 1057 : 					for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131232[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	DWORD PTR tv2030[esp+112], edx
	mov	edx, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv3714[esp+112], edx
$LL57@Draw:

; 1058 : 					{
; 1059 : 						if(wt+xo >= sw[1]) {while(wt+xo >= sw[1]) sw += 2; color = sw[-2];} 

	mov	esi, DWORD PTR tv2030[esp+112]
	cmp	edx, DWORD PTR [esi]
	jl	SHORT $LN54@Draw
	mov	ecx, DWORD PTR _sw$131201[esp+112]
	npad	1
$LL53@Draw:
	add	ecx, 8
	cmp	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2030[esp+112], esi
	jge	SHORT $LL53@Draw
	mov	DWORD PTR _sw$131201[esp+112], ecx
	mov	ecx, DWORD PTR [ecx-8]
$LN54@Draw:

; 1060 : 						pixmix(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]));

	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	esi, mm0
	emms
	mov	ebx, DWORD PTR [eax+ebx*4]
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	imul	edx, esi
	mov	DWORD PTR tv3837[esp+112], ebx
	mov	edi, ebx
	shr	edx, 6
	and	edx, 255				; 000000ffH
	and	edi, -65281				; ffff00ffH
	mov	esi, 256				; 00000100H
	sub	esi, edx
	imul	edi, esi
	inc	edx
	mov	ebx, ecx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, edx
	add	edi, ebx
	mov	ebx, DWORD PTR tv3837[esp+112]
	and	ebx, 65280				; 0000ff00H
	imul	ebx, esi
	mov	DWORD PTR _ia$237188[esp+112], esi
	mov	esi, ecx
	and	esi, 65280				; 0000ff00H
	imul	esi, edx
	add	ebx, esi
	mov	esi, DWORD PTR tv3837[esp+112]
	xor	edi, ebx
	mov	ebx, ecx
	and	ebx, 16711935				; 00ff00ffH
	imul	ebx, edx
	mov	edx, DWORD PTR tv3837[esp+112]
	and	esi, 16711935				; 00ff00ffH
	imul	esi, DWORD PTR _ia$237188[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237188[esp+112]
	and	edi, 16711680				; 00ff0000H
	add	esi, ebx
	mov	ebx, DWORD PTR _wt$131232[esp+112]
	xor	edi, esi
	mov	esi, DWORD PTR _w$[esp+112]
	and	edx, -16777216				; ff000000H
	shr	edi, 8
	or	edi, edx
	mov	edx, DWORD PTR tv3714[esp+112]
	mov	DWORD PTR [eax+ebx*4], edi

; 1061 : 					}
; 1062 : 				}
; 1063 : 			}
; 1064 : 		}
; 1065 : 		// Here we *do* have an alpha mask
; 1066 : 		else

	mov	edi, DWORD PTR _src$[esp+112]
	inc	ebx
	inc	edx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131232[esp+112], ebx
	mov	DWORD PTR tv3714[esp+112], edx
	jl	$LL57@Draw
	jmp	$LN4@Draw
$LN102@Draw:

; 1067 : 		{
; 1068 : 			if(switchpts[1] == 0xffffffff)

	cmp	DWORD PTR [edx], -1
	jne	$LN50@Draw

; 1069 : 			{
; 1070 : 				if(fBody)

	cmp	BYTE PTR _fBody$[ebp], 0
	je	$LN49@Draw

; 1071 : 				{
; 1072 : 					if(fSSE2)

	test	bl, bl
	je	$LN48@Draw

; 1073 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131244[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	DWORD PTR tv1917[esp+112], edx
	mov	edx, ecx
	and	edx, 16777215				; 00ffffffH
	pxor	xmm0, xmm0

; 1074 : 							// Both s and am contain 6-bit bitmaps of two different
; 1075 : 							// alpha masks; s is the subtitle shape and am is the
; 1076 : 							// clipping mask.
; 1077 : 							// Multiplying them together yields a 12-bit number.
; 1078 : 							// I think some imprecision is introduced here??
; 1079 : 							pixmix2_sse2(&dst[wt], color, s[wt*2], am[wt]);

	movdqa	xmm2, xmm0
	movd	xmm1, edx
	punpcklbw xmm1, xmm2
$LN47@Draw:
	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	edi, DWORD PTR _am$[esp+112]
	movzx	edi, BYTE PTR [ebx+edi]
	imul	edx, edi
	imul	edx, DWORD PTR tv1917[esp+112]
	mov	edi, DWORD PTR [eax+ebx*4]
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	movd	xmm0, edi
	lea	edi, DWORD PTR [edx+1]
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	shl	edi, 16					; 00000010H
	or	edi, ebx
	mov	ebx, DWORD PTR _wt$131244[esp+112]
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm1
	movd	xmm3, edi
	pshufd	xmm3, xmm3, 0
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edx, xmm0
	mov	DWORD PTR [eax+ebx*4], edx
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131244[esp+112], ebx
	jl	SHORT $LN47@Draw
	jmp	$LN246@Draw
$LN48@Draw:

; 1080 : 					else
; 1081 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131249[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	mov	DWORD PTR tv1927[esp+112], edx
	mov	esi, ecx
	shr	esi, 24					; 00000018H
	mov	edx, ecx
	and	edx, 65280				; 0000ff00H
	mov	DWORD PTR tv1917[esp+112], esi
	mov	DWORD PTR tv1933[esp+112], edx
	jmp	SHORT $LN43@Draw
	npad	3
$LL232@Draw:

; 1060 : 						pixmix(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]));

	mov	esi, DWORD PTR tv1917[esp+112]
$LN43@Draw:

; 1082 : 							pixmix2(&dst[wt], color, s[wt*2], am[wt]);

	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	edi, DWORD PTR _am$[esp+112]
	movzx	edi, BYTE PTR [ebx+edi]
	mov	ebx, DWORD PTR [eax+ebx*4]
	imul	edx, edi
	imul	edx, esi
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	mov	edi, ebx
	and	edi, 65280				; 0000ff00H
	mov	esi, 256				; 00000100H
	sub	esi, edx
	imul	edi, esi
	mov	DWORD PTR _ia$237218[esp+112], esi
	mov	esi, DWORD PTR tv1933[esp+112]
	inc	edx
	imul	esi, edx
	add	edi, esi
	mov	esi, DWORD PTR tv1927[esp+112]
	mov	DWORD PTR tv4051[esp+112], ebx
	imul	esi, edx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, DWORD PTR _ia$237218[esp+112]
	add	ebx, esi
	mov	esi, DWORD PTR tv4051[esp+112]
	xor	edi, ebx
	mov	ebx, DWORD PTR tv1927[esp+112]
	imul	ebx, edx
	mov	edx, DWORD PTR tv4051[esp+112]
	and	esi, 16711935				; 00ff00ffH
	imul	esi, DWORD PTR _ia$237218[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237218[esp+112]
	add	esi, ebx
	mov	ebx, DWORD PTR _wt$131249[esp+112]
	and	edi, 16711680				; 00ff0000H
	xor	edi, esi
	mov	esi, DWORD PTR _w$[esp+112]
	shr	edi, 8
	and	edx, -16777216				; ff000000H
	or	edi, edx
	mov	DWORD PTR [eax+ebx*4], edi
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131249[esp+112], ebx
	jl	$LL232@Draw

; 1083 : 				}
; 1084 : 				else

	jmp	$LN246@Draw
$LN49@Draw:

; 1085 : 				{
; 1086 : 					if(fSSE2)

	test	bl, bl
	je	$LN39@Draw

; 1087 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131255[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	shr	edx, 24					; 00000018H
	mov	DWORD PTR tv1917[esp+112], edx
	mov	edx, ecx
	and	edx, 16777215				; 00ffffffH
	pxor	xmm0, xmm0

; 1088 : 							pixmix2_sse2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]), am[wt]);

	movdqa	xmm2, xmm0
	movd	xmm1, edx
	punpcklbw xmm1, xmm2
$LL241@Draw:
	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	DWORD PTR _r$237230[esp+112], mm0
	emms
	mov	edx, DWORD PTR _am$[esp+112]
	movzx	edx, BYTE PTR [ebx+edx]
	imul	edx, DWORD PTR tv1917[esp+112]
	imul	edx, DWORD PTR _r$237230[esp+112]
	mov	edi, DWORD PTR [eax+ebx*4]
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	movd	xmm0, edi
	lea	edi, DWORD PTR [edx+1]
	shl	edi, 16					; 00000010H
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	or	edi, ebx
	mov	ebx, DWORD PTR _wt$131255[esp+112]
	punpcklbw xmm0, xmm2
	punpcklwd xmm0, xmm1
	movd	xmm3, edi
	mov	edi, DWORD PTR _src$[esp+112]
	pshufd	xmm3, xmm3, 0
	pmaddwd	xmm0, xmm3
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edx, xmm0
	mov	DWORD PTR [eax+ebx*4], edx
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131255[esp+112], ebx
	jl	$LL241@Draw
	jmp	$LN4@Draw
$LN39@Draw:

; 1089 : 					else
; 1090 : 						for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131260[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, ecx
	and	edx, 16711935				; 00ff00ffH
	mov	DWORD PTR tv1927[esp+112], edx
	mov	esi, ecx
	shr	esi, 24					; 00000018H
	mov	edx, ecx
	and	edx, 65280				; 0000ff00H
	mov	DWORD PTR tv1917[esp+112], esi
	mov	DWORD PTR tv1933[esp+112], edx
	jmp	SHORT $LN34@Draw
	npad	1
$LL233@Draw:

; 1082 : 							pixmix2(&dst[wt], color, s[wt*2], am[wt]);

	mov	esi, DWORD PTR tv1917[esp+112]
$LN34@Draw:

; 1091 : 							pixmix2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]), am[wt]);

	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	edi, mm0
	emms
	mov	edx, DWORD PTR _am$[esp+112]
	movzx	edx, BYTE PTR [ebx+edx]
	imul	edx, esi
	mov	ebx, DWORD PTR [eax+ebx*4]
	imul	edx, edi
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	mov	esi, ebx
	and	esi, 65280				; 0000ff00H
	mov	edi, 256				; 00000100H
	sub	edi, edx
	imul	esi, edi
	mov	DWORD PTR _ia$237273[esp+112], edi
	mov	edi, DWORD PTR tv1933[esp+112]
	inc	edx
	imul	edi, edx
	add	esi, edi
	mov	edi, DWORD PTR tv1927[esp+112]
	mov	DWORD PTR tv4334[esp+112], ebx
	imul	edi, edx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, DWORD PTR _ia$237273[esp+112]
	add	ebx, edi
	mov	edi, DWORD PTR tv4334[esp+112]
	xor	esi, ebx
	mov	ebx, DWORD PTR tv1927[esp+112]
	imul	ebx, edx
	mov	edx, DWORD PTR tv4334[esp+112]
	and	edi, 16711935				; 00ff00ffH
	imul	edi, DWORD PTR _ia$237273[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237273[esp+112]
	and	esi, 16711680				; 00ff0000H
	add	edi, ebx
	mov	ebx, DWORD PTR _wt$131260[esp+112]
	xor	esi, edi

; 1092 : 				}
; 1093 : 			}
; 1094 : 			else

	mov	edi, DWORD PTR _src$[esp+112]
	shr	esi, 8
	and	edx, -16777216				; ff000000H
	or	esi, edx
	mov	DWORD PTR [eax+ebx*4], esi
	mov	esi, DWORD PTR _w$[esp+112]
	inc	ebx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131260[esp+112], ebx
	jl	$LL233@Draw
	jmp	$LN4@Draw
$LN50@Draw:

; 1095 : 			{
; 1096 : 				const long *sw = switchpts;
; 1097 : 
; 1098 : 				if(fBody)

	cmp	BYTE PTR _fBody$[ebp], 0
	mov	edx, DWORD PTR _switchpts$[ebp]
	mov	DWORD PTR _sw$131265[esp+112], edx
	je	$LN30@Draw

; 1099 : 				{
; 1100 : 					if(fSSE2) 

	test	bl, bl
	je	$LN29@Draw

; 1101 : 					for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$131268[esp+112], 0
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	edi, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv2369[esp+112], edx
	mov	edx, DWORD PTR _am$[esp+112]
	sub	edx, edi
	mov	DWORD PTR tv4428[esp+112], edx
	mov	edx, DWORD PTR _wt$131268[esp+112]
	pxor	xmm1, xmm1
	mov	DWORD PTR tv4355[esp+112], edi
$LN28@Draw:

; 1102 : 					{
; 1103 : 						if(wt+xo >= sw[1]) {

	mov	ebx, DWORD PTR tv2369[esp+112]
	cmp	edi, DWORD PTR [ebx]
	jl	SHORT $LN25@Draw
	mov	ebx, DWORD PTR _sw$131265[esp+112]
$LL24@Draw:

; 1104 : 							while(wt+xo >= sw[1])
; 1105 : 								sw += 2; color = sw[-2];

	add	ebx, 8
	cmp	edi, DWORD PTR [ebx+4]
	lea	ecx, DWORD PTR [ebx+4]
	mov	DWORD PTR tv2369[esp+112], ecx
	jge	SHORT $LL24@Draw
	mov	ecx, DWORD PTR [ebx-8]
	mov	DWORD PTR _sw$131265[esp+112], ebx
$LN25@Draw:

; 1106 : 						}
; 1107 : 						pixmix2_sse2(&dst[wt], color, s[wt*2], am[wt]);

	mov	ebx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [ebx+edx*2]
	mov	ebx, DWORD PTR tv4428[esp+112]
	movzx	edi, BYTE PTR [ebx+edi]
	imul	edx, edi
	mov	edi, ecx
	shr	edi, 24					; 00000018H
	imul	edx, edi
	mov	edi, DWORD PTR _wt$131268[esp+112]
	mov	edi, DWORD PTR [eax+edi*4]
	movd	xmm0, edi
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	mov	edi, ecx
	and	edi, 16777215				; 00ffffffH
	movd	xmm2, edi
	lea	edi, DWORD PTR [edx+1]
	shl	edi, 16					; 00000010H
	punpcklbw xmm0, xmm1
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	mov	edx, DWORD PTR _wt$131268[esp+112]
	or	edi, ebx
	punpcklbw xmm2, xmm1
	punpcklwd xmm0, xmm2
	movd	xmm2, edi
	pshufd	xmm2, xmm2, 0
	pmaddwd	xmm0, xmm2
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edi, xmm0
	mov	DWORD PTR [eax+edx*4], edi
	mov	edi, DWORD PTR tv4355[esp+112]
	inc	edx
	inc	edi
	cmp	edx, esi
	mov	DWORD PTR _wt$131268[esp+112], edx
	mov	DWORD PTR tv4355[esp+112], edi
	jl	$LN28@Draw

; 1108 : 					}

	jmp	$LN246@Draw
$LN29@Draw:

; 1109 : 					else
; 1110 : 					for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131277[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edi, DWORD PTR _xo$[esp+112]
	mov	esi, DWORD PTR _am$[esp+112]
	mov	edx, DWORD PTR tv1870[esp+112]
	sub	esi, edi
	mov	DWORD PTR tv2369[esp+112], edx
	mov	DWORD PTR tv4469[esp+112], edi
	mov	DWORD PTR tv4428[esp+112], esi
	jmp	SHORT $LN21@Draw
	npad	6
$LL234@Draw:
	mov	esi, DWORD PTR tv4428[esp+112]
$LN21@Draw:

; 1111 : 					{
; 1112 : 						if(wt+xo >= sw[1]) {

	mov	edx, DWORD PTR tv2369[esp+112]
	cmp	edi, DWORD PTR [edx]
	jl	SHORT $LN18@Draw
	mov	edx, DWORD PTR _sw$131265[esp+112]
$LL17@Draw:

; 1113 : 							while(wt+xo >= sw[1])
; 1114 : 								sw += 2; color = sw[-2];

	add	edx, 8
	cmp	edi, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR tv2369[esp+112], ecx
	jge	SHORT $LL17@Draw
	mov	ecx, DWORD PTR [edx-8]
	mov	DWORD PTR _sw$131265[esp+112], edx
$LN18@Draw:

; 1115 : 						}
; 1116 : 						pixmix2(&dst[wt], color, s[wt*2], am[wt]);

	movzx	esi, BYTE PTR [edi+esi]
	mov	edx, DWORD PTR _s$[esp+112]
	movzx	edx, BYTE PTR [edx+ebx*2]
	mov	ebx, DWORD PTR [eax+ebx*4]
	imul	edx, esi
	mov	esi, ecx
	shr	esi, 24					; 00000018H
	imul	edx, esi
	mov	DWORD PTR tv4580[esp+112], ebx
	mov	edi, ebx
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	and	edi, -65281				; ffff00ffH
	mov	esi, 256				; 00000100H
	sub	esi, edx
	imul	edi, esi
	inc	edx
	mov	ebx, ecx
	and	ebx, -65281				; ffff00ffH
	imul	ebx, edx
	add	edi, ebx
	mov	ebx, DWORD PTR tv4580[esp+112]
	and	ebx, 65280				; 0000ff00H
	imul	ebx, esi
	mov	DWORD PTR _ia$237304[esp+112], esi
	mov	esi, ecx
	and	esi, 65280				; 0000ff00H
	imul	esi, edx
	add	ebx, esi
	mov	esi, DWORD PTR tv4580[esp+112]
	xor	edi, ebx
	mov	ebx, ecx
	and	ebx, 16711935				; 00ff00ffH
	imul	ebx, edx
	mov	edx, DWORD PTR tv4580[esp+112]
	and	esi, 16711935				; 00ff00ffH
	imul	esi, DWORD PTR _ia$237304[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, DWORD PTR _ia$237304[esp+112]
	and	edi, 16711680				; 00ff0000H
	add	esi, ebx
	mov	ebx, DWORD PTR _wt$131277[esp+112]
	xor	edi, esi
	mov	esi, DWORD PTR _w$[esp+112]
	shr	edi, 8
	and	edx, -16777216				; ff000000H
	or	edi, edx
	mov	DWORD PTR [eax+ebx*4], edi
	mov	edi, DWORD PTR tv4469[esp+112]
	inc	ebx
	inc	edi
	cmp	ebx, esi
	mov	DWORD PTR _wt$131277[esp+112], ebx
	mov	DWORD PTR tv4469[esp+112], edi
	jl	$LL234@Draw

; 1117 : 					}
; 1118 : 				}
; 1119 : 				else

	jmp	$LN246@Draw
$LN30@Draw:

; 1120 : 				{
; 1121 : 					if(fSSE2) 

	test	bl, bl
	je	$LN14@Draw

; 1122 : 					for(int wt=0; wt<w; ++wt)

	mov	DWORD PTR _wt$131287[esp+112], 0
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	ebx, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv2369[esp+112], edx
	mov	edx, DWORD PTR _am$[esp+112]
	sub	edx, ebx
	pxor	xmm1, xmm1
	mov	DWORD PTR tv4601[esp+112], ebx
	mov	DWORD PTR tv4428[esp+112], edx
	npad	6
$LL13@Draw:

; 1123 : 					{
; 1124 : 						if(wt+xo >= sw[1]) {

	mov	edx, DWORD PTR tv2369[esp+112]
	cmp	ebx, DWORD PTR [edx]
	jl	SHORT $LN10@Draw
	mov	ecx, DWORD PTR _sw$131265[esp+112]
	npad	4
$LL9@Draw:

; 1125 : 							while(wt+xo >= sw[1])
; 1126 : 								sw += 2; color = sw[-2];

	add	ecx, 8
	cmp	ebx, DWORD PTR [ecx+4]
	lea	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2369[esp+112], edx
	jge	SHORT $LL9@Draw
	mov	DWORD PTR _sw$131265[esp+112], ecx
	mov	ecx, DWORD PTR [ecx-8]
$LN10@Draw:

; 1127 : 						} 
; 1128 : 						pixmix2_sse2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]), am[wt]);

	mov	ebx, DWORD PTR _wt$131287[esp+112]
	movzx	edx, BYTE PTR [edi+ebx*2+1]
	movd	mm0, edx
	movzx	edx, BYTE PTR [edi+ebx*2]
	movd	mm1, edx
	psubusw	mm0, mm1
	movd	DWORD PTR _r$237316[esp+112], mm0
	emms
	mov	edi, DWORD PTR tv4601[esp+112]
	mov	edx, DWORD PTR tv4428[esp+112]
	movzx	edx, BYTE PTR [edi+edx]
	mov	edi, ecx
	shr	edi, 24					; 00000018H
	imul	edx, edi
	imul	edx, DWORD PTR _r$237316[esp+112]
	mov	edi, DWORD PTR [eax+ebx*4]
	movd	xmm0, edi
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	mov	edi, ecx
	and	edi, 16777215				; 00ffffffH
	movd	xmm2, edi
	lea	edi, DWORD PTR [edx+1]
	shl	edi, 16					; 00000010H
	punpcklbw xmm0, xmm1
	mov	ebx, 256				; 00000100H
	sub	ebx, edx
	mov	edx, DWORD PTR _wt$131287[esp+112]
	or	edi, ebx
	mov	ebx, DWORD PTR tv4601[esp+112]
	punpcklbw xmm2, xmm1
	punpcklwd xmm0, xmm2
	movd	xmm2, edi
	pshufd	xmm2, xmm2, 0
	pmaddwd	xmm0, xmm2
	psrld	xmm0, 8
	packssdw xmm0, xmm0
	packuswb xmm0, xmm0
	movd	edi, xmm0
	mov	DWORD PTR [eax+edx*4], edi

; 1129 : 					}

	mov	edi, DWORD PTR _src$[esp+112]
	inc	edx
	inc	ebx
	cmp	edx, esi
	mov	DWORD PTR _wt$131287[esp+112], edx
	mov	DWORD PTR tv4601[esp+112], ebx
	jl	$LL13@Draw
	jmp	$LN4@Draw
$LN14@Draw:

; 1130 : 					else
; 1131 : 					for(int wt=0; wt<w; ++wt)

	xor	ebx, ebx
	mov	DWORD PTR _wt$131296[esp+112], ebx
	test	esi, esi
	jle	$LN4@Draw
	mov	edx, DWORD PTR tv1870[esp+112]
	mov	esi, DWORD PTR _xo$[esp+112]
	mov	DWORD PTR tv2369[esp+112], edx
	mov	edx, DWORD PTR _am$[esp+112]
	sub	edx, esi
	mov	DWORD PTR tv4428[esp+112], edx
	mov	DWORD PTR tv4757[esp+112], esi
	mov	edx, esi
	jmp	SHORT $LN6@Draw
$LL235@Draw:
	mov	edi, DWORD PTR _src$[esp+112]
$LN6@Draw:

; 1132 : 					{
; 1133 : 						if(wt+xo >= sw[1]) {

	mov	esi, DWORD PTR tv2369[esp+112]
	cmp	edx, DWORD PTR [esi]
	jl	SHORT $LN3@Draw
	mov	ecx, DWORD PTR _sw$131265[esp+112]
$LL2@Draw:

; 1134 : 							while(wt+xo >= sw[1])
; 1135 : 								sw += 2; color = sw[-2];

	add	ecx, 8
	cmp	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR tv2369[esp+112], esi
	jge	SHORT $LL2@Draw
	mov	DWORD PTR _sw$131265[esp+112], ecx
	mov	ecx, DWORD PTR [ecx-8]
$LN3@Draw:

; 1136 : 						} 
; 1137 : 						pixmix2(&dst[wt], color, safe_subtract(src[wt*2+1], src[wt*2]), am[wt]);

	movzx	esi, BYTE PTR [edi+ebx*2+1]
	movd	mm0, esi
	movzx	esi, BYTE PTR [edi+ebx*2]
	movd	mm1, esi
	psubusw	mm0, mm1
	movd	esi, mm0
	emms
	mov	edi, DWORD PTR tv4428[esp+112]
	movzx	edx, BYTE PTR [edx+edi]
	mov	ebx, DWORD PTR [eax+ebx*4]
	mov	edi, ecx
	shr	edi, 24					; 00000018H
	imul	edx, edi
	imul	edx, esi
	shr	edx, 12					; 0000000cH
	and	edx, 255				; 000000ffH
	mov	esi, 256				; 00000100H
	sub	esi, edx
	inc	edx
	mov	DWORD PTR _ia$237358[esp+112], esi
	mov	esi, ebx
	and	esi, -65281				; ffff00ffH
	imul	esi, DWORD PTR _ia$237358[esp+112]
	mov	edi, ecx
	and	edi, -65281				; ffff00ffH
	imul	edi, edx
	add	edi, esi
	mov	esi, ecx
	and	esi, 65280				; 0000ff00H
	imul	esi, edx
	mov	DWORD PTR tv4909[esp+112], ebx
	and	ebx, 65280				; 0000ff00H
	mov	DWORD PTR tv5010[esp+112], esi
	mov	esi, DWORD PTR _ia$237358[esp+112]
	imul	ebx, esi
	mov	DWORD PTR _a$237357[esp+112], edx
	mov	edx, DWORD PTR tv5010[esp+112]
	add	edx, ebx
	mov	ebx, DWORD PTR tv4909[esp+112]
	xor	edi, edx
	and	ebx, 16711935				; 00ff00ffH
	mov	edx, ecx
	imul	ebx, esi
	and	edx, 16711935				; 00ff00ffH
	imul	edx, DWORD PTR _a$237357[esp+112]
	add	edx, ebx
	mov	ebx, DWORD PTR _wt$131296[esp+112]
	and	edi, 16711680				; 00ff0000H
	xor	edi, edx
	mov	edx, DWORD PTR tv4909[esp+112]
	shr	edx, 8
	and	edx, 16711680				; 00ff0000H
	imul	edx, esi
	mov	esi, DWORD PTR _w$[esp+112]
	and	edx, -16777216				; ff000000H
	shr	edi, 8
	or	edi, edx
	mov	edx, DWORD PTR tv4757[esp+112]
	mov	DWORD PTR [eax+ebx*4], edi
	inc	ebx
	inc	edx
	cmp	ebx, esi
	mov	DWORD PTR _wt$131296[esp+112], ebx
	mov	DWORD PTR tv4757[esp+112], edx
	jl	$LL235@Draw
$LN246@Draw:

; 1130 : 					else
; 1131 : 					for(int wt=0; wt<w; ++wt)

	mov	edi, DWORD PTR _src$[esp+112]
$LN4@Draw:

; 1138 : 					}
; 1139 : 				}
; 1140 : 			}
; 1141 : 		}
; 1142 : 
; 1143 : 		// Step to next scanline
; 1144 : 		src += 2*mOverlayWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+116]
	add	edx, edx

; 1145 : 		s += 2*mOverlayWidth;

	add	DWORD PTR _s$[esp+112], edx
	add	edi, edx

; 1146 : 		am += spd.w;

	mov	edx, DWORD PTR _spd$[ebp]
	mov	ebx, DWORD PTR [edx+4]
	add	DWORD PTR _am$[esp+112], ebx

; 1147 : 		dst = (unsigned long *)((char *)dst + spd.pitch);

	add	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR _h$[esp+112], 0
	mov	DWORD PTR _src$[esp+112], edi
	jne	$LL244@Draw

; 1148 : 	}
; 1149 : 
; 1150 : 	// Remember to EMMS!
; 1151 : 	// Rendering fails in funny ways if we don't do this.
; 1152 : 	_mm_empty();

	emms
$LN105@Draw:

; 953  : 
; 954  : 	// Check if there's actually anything to render
; 955  : 	if(w <= 0 || h <= 0) return(bbox);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN113@Draw:

; 1153 : 
; 1154 : 	return bbox;
; 1155 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?Draw@Rasterizer@@QAE?AVCRect@@AAUSubPicDesc@@AAV2@PAEHHPBJ_N4@Z ENDP ; Rasterizer::Draw
_TEXT	ENDS
PUBLIC	?PartialBeginPath@Rasterizer@@QAE_NPAUHDC__@@_N@Z ; Rasterizer::PartialBeginPath
; Function compile flags: /Ogtpy
;	COMDAT ?PartialBeginPath@Rasterizer@@QAE_NPAUHDC__@@_N@Z
_TEXT	SEGMENT
?PartialBeginPath@Rasterizer@@QAE_NPAUHDC__@@_N@Z PROC	; Rasterizer::PartialBeginPath, COMDAT
; _this$ = esi

; 289  : 	if(bClearPath)
; 290  : 		_TrashPath();

	mov	eax, DWORD PTR [esi+24]
	push	edi
	mov	edi, DWORD PTR _g_hDC
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	ecx, DWORD PTR [esi+28]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	xor	eax, eax
	add	esp, 8

; 291  : 
; 292  : 	return !!::BeginPath(hdc);

	push	edi
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+32], eax
	call	DWORD PTR __imp__BeginPath@4
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi

; 293  : }

	ret	0
?PartialBeginPath@Rasterizer@@QAE_NPAUHDC__@@_N@Z ENDP	; Rasterizer::PartialBeginPath
_TEXT	ENDS
PUBLIC	?BeginPath@Rasterizer@@QAE_NPAUHDC__@@@Z	; Rasterizer::BeginPath
; Function compile flags: /Ogtpy
;	COMDAT ?BeginPath@Rasterizer@@QAE_NPAUHDC__@@@Z
_TEXT	SEGMENT
?BeginPath@Rasterizer@@QAE_NPAUHDC__@@@Z PROC		; Rasterizer::BeginPath, COMDAT
; _this$ = esi

; 259  : 	_TrashPath();

	mov	eax, DWORD PTR [esi+24]
	push	edi
	mov	edi, DWORD PTR _g_hDC
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	ecx, DWORD PTR [esi+28]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	xor	eax, eax
	add	esp, 8

; 260  : 
; 261  : 	return !!::BeginPath(hdc);

	push	edi
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], eax
	mov	DWORD PTR [esi+32], eax
	call	DWORD PTR __imp__BeginPath@4
	neg	eax
	sbb	eax, eax
	neg	eax
	pop	edi

; 262  : }

	ret	0
?BeginPath@Rasterizer@@QAE_NPAUHDC__@@@Z ENDP		; Rasterizer::BeginPath
_TEXT	ENDS
PUBLIC	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z		; Rasterizer::_EvaluateLine
EXTRN	__allshr:PROC
; Function compile flags: /Ogtpy
;	COMDAT ?_EvaluateLine@Rasterizer@@AAEXHHHH@Z
_TEXT	SEGMENT
_y$128730 = -24						; size = 4
_invslope$128716 = -24					; size = 8
_dy$128712 = -24					; size = 4
_invslope$128733 = -16					; size = 8
_dy$128729 = -16					; size = 4
_y$128713 = -16						; size = 4
_xacc$128727 = -8					; size = 8
_xacc$128710 = -8					; size = 8
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?_EvaluateLine@Rasterizer@@AAEXHHHH@Z PROC		; Rasterizer::_EvaluateLine, COMDAT
; _this$ = ecx

; 176  : {

	sub	esp, 28					; 0000001cH
	push	ebx

; 177  : 	if(lastp.x != x0 || lastp.y != y0)

	mov	ebx, DWORD PTR _y0$[esp+28]
	push	ebp
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR _x0$[esp+40]
	cmp	eax, edi
	jne	SHORT $LN15@EvaluateLi
	cmp	DWORD PTR [esi+20], ebx
	je	SHORT $LN16@EvaluateLi
$LN15@EvaluateLi:

; 178  : 	{
; 179  : 		_EvaluateLine(lastp.x, lastp.y, x0, y0);

	mov	ecx, DWORD PTR [esi+20]
	push	ebx
	push	edi
	push	ecx
	push	eax
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine
$LN16@EvaluateLi:

; 180  : 	}
; 181  : 
; 182  : 	if(!fFirstSet) {firstp.x = x0; firstp.y = y0; fFirstSet = true;}

	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN14@EvaluateLi
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+12], ebx
	mov	BYTE PTR [esi+4], 1
$LN14@EvaluateLi:

; 183  : 	lastp.x = x1; lastp.y = y1;

	mov	ecx, DWORD PTR _y1$[esp+40]

; 184  : 
; 185  : 	if(y1 > y0)	// down

	cmp	ecx, ebx
	mov	eax, DWORD PTR _x1$[esp+40]
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], ecx
	jle	$LN31@EvaluateLi

; 186  : 	{
; 187  : 		__int64 xacc = (__int64)x0 << 13;

	mov	eax, edi
	cdq
	mov	ebp, eax

; 188  : 
; 189  : 		// prestep y0 down
; 190  : 
; 191  : 		int dy = y1 - y0;

	mov	eax, ecx
	sub	eax, ebx

; 192  : 		int y = ((y0 + 3)&~7) + 4;

	add	ebx, 3
	and	ebx, -8					; fffffff8H
	add	ebx, 4
	shld	edx, ebp, 13

; 193  : 		int iy = y >> 3;
; 194  : 
; 195  : 		y1 = (y1 - 5) >> 3;

	add	ecx, -5					; fffffffbH
	mov	edi, ebx
	sar	ecx, 3
	sar	edi, 3
	shl	ebp, 13					; 0000000dH

; 196  : 
; 197  : 		if(iy <= y1)

	cmp	edi, ecx
	mov	DWORD PTR _xacc$128710[esp+48], edx
	mov	DWORD PTR _dy$128712[esp+44], eax
	mov	DWORD PTR _y$128713[esp+44], ebx
	mov	DWORD PTR _y1$[esp+40], ecx
	jg	$LN1@EvaluateLi

; 198  : 		{
; 199  : 			__int64 invslope = (__int64(x1 - x0) << 16) / dy;

	mov	eax, DWORD PTR _x1$[esp+40]
	sub	eax, DWORD PTR _x0$[esp+40]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _dy$128712[esp+44]
	mov	ebx, edx
	cdq
	shld	ebx, ecx, 16
	push	edx
	push	eax
	shl	ecx, 16					; 00000010H
	push	ebx
	push	ecx
	call	__alldiv

; 200  : 
; 201  : 			while(mEdgeNext + y1 + 1 - iy > mEdgeHeapSize)

	mov	ebx, DWORD PTR _y1$[esp+40]
	mov	DWORD PTR _invslope$128716[esp+48], edx
	mov	edx, ebx
	mov	DWORD PTR _invslope$128716[esp+44], eax
	mov	eax, DWORD PTR [esi+104]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx+eax+1]
	cmp	ecx, DWORD PTR [esi+100]
	jbe	SHORT $LN10@EvaluateLi
	npad	5
$LL11@EvaluateLi:

; 202  : 				_ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+100]
	add	eax, eax
	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+100], eax
	mov	eax, DWORD PTR [esi+96]
	push	edx
	push	eax
	call	_realloc
	mov	DWORD PTR [esi+96], eax
	mov	edx, DWORD PTR [esi+104]
	mov	ecx, ebx
	sub	ecx, edi
	lea	eax, DWORD PTR [ecx+edx+1]
	add	esp, 8
	cmp	eax, DWORD PTR [esi+100]
	ja	SHORT $LL11@EvaluateLi
$LN10@EvaluateLi:

; 203  : 
; 204  : 			xacc += (invslope * (y - y0)) >> 3;

	mov	eax, DWORD PTR _y$128713[esp+44]
	mov	ecx, DWORD PTR _invslope$128716[esp+48]
	sub	eax, DWORD PTR _y0$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR _invslope$128716[esp+48]
	cdq
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	cl, 3
	call	__allshr
	mov	ebx, DWORD PTR _xacc$128710[esp+48]
	add	ebp, eax
	adc	ebx, edx
	npad	8
$LL9@EvaluateLi:

; 205  : 
; 206  : 			while(iy <= y1)
; 207  : 			{
; 208  : 				int ix = (int)((xacc + 32768) >> 16);
; 209  : 
; 210  : 				mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	edx, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+96]
	mov	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [ecx+eax*8], edx
	mov	eax, ebp
	add	eax, 32768				; 00008000H
	mov	edx, ebx
	adc	edx, 0
	mov	cl, 16					; 00000010H
	call	__allshr

; 211  : 				mpEdgeBuffer[mEdgeNext].posandflag = ix*2 + 1;

	mov	ecx, DWORD PTR [esi+104]
	mov	edx, DWORD PTR [esi+96]
	lea	eax, DWORD PTR [eax+eax+1]
	mov	DWORD PTR [edx+ecx*8+4], eax

; 212  : 
; 213  : 				mpScanBuffer[iy] = mEdgeNext++;

	mov	ecx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [eax+edi*4], ecx
	inc	DWORD PTR [esi+104]

; 214  : 
; 215  : 				++iy;

	inc	edi

; 216  : 				xacc += invslope;

	add	ebp, DWORD PTR _invslope$128716[esp+44]
	adc	ebx, DWORD PTR _invslope$128716[esp+48]
	cmp	edi, DWORD PTR _y1$[esp+40]
	jle	SHORT $LL9@EvaluateLi

; 252  : 			}
; 253  : 		}
; 254  : 	}
; 255  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
$LN31@EvaluateLi:

; 217  : 			}
; 218  : 		}
; 219  : 	}
; 220  : 	else if(y1 < y0) // up

	jge	$LN1@EvaluateLi

; 221  : 	{
; 222  : 		__int64 xacc = (__int64)x1 << 13;

	cdq
	mov	ebp, eax

; 223  : 
; 224  : 		// prestep y1 down
; 225  : 
; 226  : 		int dy = y0 - y1;

	mov	eax, ebx
	sub	eax, ecx

; 227  : 		int y = ((y1 + 3)&~7) + 4;

	add	ecx, 3
	and	ecx, -8					; fffffff8H
	add	ecx, 4
	shld	edx, ebp, 13

; 228  : 		int iy = y >> 3;
; 229  : 
; 230  : 		y0 = (y0 - 5) >> 3;

	add	ebx, -5					; fffffffbH
	mov	edi, ecx
	sar	ebx, 3
	sar	edi, 3
	shl	ebp, 13					; 0000000dH

; 231  : 
; 232  : 		if(iy <= y0)

	cmp	edi, ebx
	mov	DWORD PTR _xacc$128727[esp+48], edx
	mov	DWORD PTR _dy$128729[esp+44], eax
	mov	DWORD PTR _y$128730[esp+44], ecx
	mov	DWORD PTR _y0$[esp+40], ebx
	jg	$LN1@EvaluateLi

; 233  : 		{
; 234  : 			__int64 invslope = (__int64(x0 - x1) << 16) / dy;

	mov	eax, DWORD PTR _x0$[esp+40]
	sub	eax, DWORD PTR _x1$[esp+40]
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _dy$128729[esp+44]
	mov	ebx, edx
	cdq
	shld	ebx, ecx, 16
	push	edx
	push	eax
	shl	ecx, 16					; 00000010H
	push	ebx
	push	ecx
	call	__alldiv

; 235  : 
; 236  : 			while(mEdgeNext + y0 + 1 - iy > mEdgeHeapSize)

	mov	ebx, DWORD PTR _y0$[esp+40]
	mov	DWORD PTR _invslope$128733[esp+48], edx
	mov	edx, ebx
	mov	DWORD PTR _invslope$128733[esp+44], eax
	mov	eax, DWORD PTR [esi+104]
	sub	edx, edi
	lea	ecx, DWORD PTR [edx+eax+1]
	cmp	ecx, DWORD PTR [esi+100]
	jbe	SHORT $LN3@EvaluateLi
$LL4@EvaluateLi:

; 237  : 				_ReallocEdgeBuffer(mEdgeHeapSize*2);

	mov	eax, DWORD PTR [esi+100]
	add	eax, eax
	lea	edx, DWORD PTR [eax*8]
	mov	DWORD PTR [esi+100], eax
	mov	eax, DWORD PTR [esi+96]
	push	edx
	push	eax
	call	_realloc
	mov	DWORD PTR [esi+96], eax
	mov	edx, DWORD PTR [esi+104]
	mov	ecx, ebx
	sub	ecx, edi
	lea	eax, DWORD PTR [ecx+edx+1]
	add	esp, 8
	cmp	eax, DWORD PTR [esi+100]
	ja	SHORT $LL4@EvaluateLi
$LN3@EvaluateLi:

; 238  : 
; 239  : 			xacc += (invslope * (y - y1)) >> 3;

	mov	eax, DWORD PTR _y$128730[esp+44]
	mov	ecx, DWORD PTR _invslope$128733[esp+48]
	sub	eax, DWORD PTR _y1$[esp+40]
	push	ecx
	mov	ecx, DWORD PTR _invslope$128733[esp+48]
	cdq
	push	ecx
	push	edx
	push	eax
	call	__allmul
	mov	cl, 3
	call	__allshr
	mov	ebx, DWORD PTR _xacc$128727[esp+48]
	add	ebp, eax
	adc	ebx, edx
	npad	5
$LL2@EvaluateLi:

; 240  : 
; 241  : 			while(iy <= y0)
; 242  : 			{
; 243  : 				int ix = (int)((xacc + 32768) >> 16);
; 244  : 
; 245  : 				mpEdgeBuffer[mEdgeNext].next = mpScanBuffer[iy];

	mov	edx, DWORD PTR [esi+108]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+96]
	mov	eax, DWORD PTR [esi+104]
	mov	DWORD PTR [ecx+eax*8], edx
	mov	eax, ebp
	add	eax, 32768				; 00008000H
	mov	edx, ebx
	adc	edx, 0
	mov	cl, 16					; 00000010H
	call	__allshr

; 246  : 				mpEdgeBuffer[mEdgeNext].posandflag = ix*2;

	mov	ecx, DWORD PTR [esi+104]
	mov	edx, DWORD PTR [esi+96]
	add	eax, eax
	mov	DWORD PTR [edx+ecx*8+4], eax

; 247  : 
; 248  : 				mpScanBuffer[iy] = mEdgeNext++;

	mov	ecx, DWORD PTR [esi+104]
	mov	eax, DWORD PTR [esi+108]
	mov	DWORD PTR [eax+edi*4], ecx
	inc	DWORD PTR [esi+104]

; 249  : 
; 250  : 				++iy;

	inc	edi

; 251  : 				xacc += invslope;

	add	ebp, DWORD PTR _invslope$128733[esp+44]
	adc	ebx, DWORD PTR _invslope$128733[esp+48]
	cmp	edi, DWORD PTR _y0$[esp+40]
	jle	SHORT $LL2@EvaluateLi
$LN1@EvaluateLi:

; 252  : 			}
; 253  : 		}
; 254  : 	}
; 255  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 28					; 0000001cH
	ret	16					; 00000010H
?_EvaluateLine@Rasterizer@@AAEXHHHH@Z ENDP		; Rasterizer::_EvaluateLine
_TEXT	ENDS
PUBLIC	?_EvaluateLine@Rasterizer@@AAEXHH@Z		; Rasterizer::_EvaluateLine
; Function compile flags: /Ogtpy
;	COMDAT ?_EvaluateLine@Rasterizer@@AAEXHH@Z
_TEXT	SEGMENT
?_EvaluateLine@Rasterizer@@AAEXHH@Z PROC		; Rasterizer::_EvaluateLine, COMDAT
; _this$ = ecx
; _pt1idx$ = esi
; _pt2idx$ = edx

; 169  : 	const POINT* pt1 = mpPathPoints + pt1idx;

	mov	eax, DWORD PTR [ecx+28]
	push	edi

; 170  : 	const POINT* pt2 = mpPathPoints + pt2idx;
; 171  : 
; 172  : 	_EvaluateLine(pt1->x, pt1->y, pt2->x, pt2->y);

	mov	edi, DWORD PTR [eax+edx*8+4]
	mov	edx, DWORD PTR [eax+edx*8]
	push	edi
	push	edx
	mov	edx, DWORD PTR [eax+esi*8+4]
	mov	eax, DWORD PTR [eax+esi*8]
	push	edx
	push	eax
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine

; 173  : }

	pop	edi
	ret	0
?_EvaluateLine@Rasterizer@@AAEXHH@Z ENDP		; Rasterizer::_EvaluateLine
_TEXT	ENDS
PUBLIC	__real@4020000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@4018000000000000
PUBLIC	__real@3fc5555555555555
PUBLIC	__real@4008000000000000
PUBLIC	?_EvaluateBezier@Rasterizer@@AAEXH_N@Z		; Rasterizer::_EvaluateBezier
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4018000000000000
CONST	SEGMENT
__real@4018000000000000 DQ 04018000000000000r	; 6
CONST	ENDS
;	COMDAT __real@3fc5555555555555
CONST	SEGMENT
__real@3fc5555555555555 DQ 03fc5555555555555r	; 0.166667
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ?_EvaluateBezier@Rasterizer@@AAEXH_N@Z
_TEXT	SEGMENT
tv432 = -80						; size = 8
_cy0$ = -80						; size = 8
_cy3$ = -72						; size = 8
_cx0$ = -64						; size = 8
tv427 = -56						; size = 8
_cx2$ = -56						; size = 8
_cx3$ = -48						; size = 8
_h$ = -40						; size = 8
_y2$ = -40						; size = 8
_cy1$ = -32						; size = 8
_cy2$ = -24						; size = 8
_y3$ = -24						; size = 8
_cx1$ = -16						; size = 8
_x3$ = -16						; size = 8
_t$128680 = -8						; size = 8
_x2$ = -8						; size = 8
_fBSpline$ = 8						; size = 1
?_EvaluateBezier@Rasterizer@@AAEXH_N@Z PROC		; Rasterizer::_EvaluateBezier, COMDAT
; _this$ = esi
; _ptbase$ = edx

; 75   : {

	sub	esp, 80					; 00000050H

; 76   : 	const POINT* pt0 = mpPathPoints + ptbase;
; 77   : 	const POINT* pt1 = mpPathPoints + ptbase + 1;
; 78   : 	const POINT* pt2 = mpPathPoints + ptbase + 2;
; 79   : 	const POINT* pt3 = mpPathPoints + ptbase + 3;
; 80   : 
; 81   : 	double x0 = pt0->x;
; 82   : 	double x1 = pt1->x;
; 83   : 	double x2 = pt2->x;
; 84   : 	double x3 = pt3->x;
; 85   : 	double y0 = pt0->y;
; 86   : 	double y1 = pt1->y;
; 87   : 	double y2 = pt2->y;
; 88   : 	double y3 = pt3->y;
; 89   : 
; 90   : 	double cx3, cx2, cx1, cx0, cy3, cy2, cy1, cy0;
; 91   : 
; 92   : 	if(fBSpline)

	cmp	BYTE PTR _fBSpline$[esp+76], 0
	mov	eax, DWORD PTR [esi+28]
	fild	DWORD PTR [eax+edx*8]
	lea	ecx, DWORD PTR [eax+edx*8]
	fild	DWORD PTR [ecx+8]
	push	ebx
	fild	DWORD PTR [eax+edx*8+16]
	push	edi
	lea	edi, DWORD PTR [ecx+8]
	lea	ebx, DWORD PTR [eax+edx*8+16]
	fst	QWORD PTR _x2$[esp+88]
	lea	eax, DWORD PTR [eax+edx*8+24]
	fild	DWORD PTR [eax]
	fst	QWORD PTR _x3$[esp+88]
	fild	DWORD PTR [ecx+4]
	fild	DWORD PTR [edi+4]
	fild	DWORD PTR [ebx+4]
	fstp	QWORD PTR _y2$[esp+88]
	fild	DWORD PTR [eax+4]
	fstp	QWORD PTR _y3$[esp+88]
	je	$LN16@EvaluateBe

; 93   : 	{
; 94   : 		// 1   [-1 +3 -3 +1]
; 95   : 		// - * [+3 -6 +3  0]
; 96   : 		// 6   [-3  0 +3  0]
; 97   : 		//	   [+1 +4 +1  0]
; 98   : 
; 99   : 		double _1div6 = 1.0/6.0;
; 100  : 
; 101  : 		cx3 = _1div6*(-  x0+3*x1-3*x2+x3);

	fld	QWORD PTR __real@4008000000000000
	fmul	ST(4), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv427[esp+88]
	fld	ST(5)
	fmul	ST(0), ST(5)
	fsub	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	fld	QWORD PTR __real@3fc5555555555555
	fmul	ST(3), ST(0)
	fxch	ST(3)
	fstp	QWORD PTR _cx3$[esp+88]

; 102  : 		cx2 = _1div6*( 3*x0-6*x1+3*x2);

	fld	ST(5)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR tv432[esp+88]
	fld	ST(4)
	fmul	QWORD PTR __real@4018000000000000
	fsubr	QWORD PTR tv432[esp+88]
	fld	QWORD PTR tv427[esp+88]
	fadd	ST(1), ST(0)
	fxch	ST(1)
	fmul	ST(0), ST(4)
	fstp	QWORD PTR _cx2$[esp+88]

; 103  : 		cx1 = _1div6*(-3*x0	   +3*x2);

	fsub	QWORD PTR tv432[esp+88]
	fmul	ST(0), ST(3)
	fstp	QWORD PTR _cx1$[esp+88]

; 104  : 		cx0 = _1div6*(   x0+4*x1+1*x2);

	fxch	ST(4)
	fmul	QWORD PTR __real@4010000000000000
	faddp	ST(5), ST(0)
	fxch	ST(4)
	fadd	QWORD PTR _x2$[esp+88]
	fmul	ST(0), ST(1)
	fstp	QWORD PTR _cx0$[esp+88]

; 105  : 
; 106  : 		cy3 = _1div6*(-  y0+3*y1-3*y2+y3);

	fld	QWORD PTR _y2$[esp+88]
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(3)
	fsub	ST(0), ST(5)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR _y3$[esp+88]
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _cy3$[esp+88]

; 107  : 		cy2 = _1div6*( 3*y0-6*y1+3*y2);

	fld	ST(4)
	fmulp	ST(3), ST(0)
	fld	ST(3)
	fld	QWORD PTR __real@4018000000000000
	fmul	ST(1), ST(0)
	fld	ST(4)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(2)
	fmul	ST(0), ST(3)
	fst	QWORD PTR _cy2$[esp+88]

; 108  : 		cy1 = _1div6*(-3*y0     +3*y2);

	fxch	ST(2)
	fsubrp	ST(4), ST(0)
	fxch	ST(3)
	fmul	ST(0), ST(2)
	fstp	QWORD PTR _cy1$[esp+88]

; 109  : 		cy0 = _1div6*(   y0+4*y1+1*y2);

	fxch	ST(3)
	fmul	QWORD PTR __real@4010000000000000
	faddp	ST(4), ST(0)
	fxch	ST(3)
	fadd	QWORD PTR _y2$[esp+88]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fstp	QWORD PTR _cy0$[esp+88]

; 110  : 	}
; 111  : 	else // bezier

	jmp	$LN6@EvaluateBe
$LN16@EvaluateBe:

; 76   : 	const POINT* pt0 = mpPathPoints + ptbase;
; 77   : 	const POINT* pt1 = mpPathPoints + ptbase + 1;
; 78   : 	const POINT* pt2 = mpPathPoints + ptbase + 2;
; 79   : 	const POINT* pt3 = mpPathPoints + ptbase + 3;
; 80   : 
; 81   : 	double x0 = pt0->x;
; 82   : 	double x1 = pt1->x;
; 83   : 	double x2 = pt2->x;
; 84   : 	double x3 = pt3->x;
; 85   : 	double y0 = pt0->y;
; 86   : 	double y1 = pt1->y;
; 87   : 	double y2 = pt2->y;
; 88   : 	double y3 = pt3->y;
; 89   : 
; 90   : 	double cx3, cx2, cx1, cx0, cy3, cy2, cy1, cy0;
; 91   : 
; 92   : 	if(fBSpline)

	fstp	ST(2)

; 112  : 	{
; 113  : 		// [-1 +3 -3 +1]
; 114  : 		// [+3 -6 +3  0]
; 115  : 		// [-3 +3  0  0]
; 116  : 		// [+1  0  0  0]
; 117  : 
; 118  : 		cx3 = -  x0+3*x1-3*x2+x3;

	fld	ST(3)
	fld	QWORD PTR __real@4008000000000000
	fmul	ST(1), ST(0)
	fmul	ST(4), ST(0)
	fxch	ST(4)
	fst	QWORD PTR tv427[esp+88]
	fld	ST(1)
	fsub	ST(0), ST(7)
	fsubrp	ST(1), ST(0)
	fadd	QWORD PTR _x3$[esp+88]
	fstp	QWORD PTR _cx3$[esp+88]

; 119  : 		cx2 =  3*x0-6*x1+3*x2;

	fld	ST(5)
	fmul	ST(0), ST(4)
	fst	QWORD PTR tv432[esp+88]
	fld	QWORD PTR __real@4018000000000000
	fmul	ST(6), ST(0)
	fxch	ST(1)
	fsubrp	ST(6), ST(0)
	fxch	ST(5)
	fadd	QWORD PTR tv427[esp+88]
	fstp	QWORD PTR _cx2$[esp+88]

; 120  : 		cx1 = -3*x0+3*x1;

	fsub	QWORD PTR tv432[esp+88]
	fstp	QWORD PTR _cx1$[esp+88]

; 121  : 		cx0 =    x0;

	fxch	ST(4)
	fstp	QWORD PTR _cx0$[esp+88]

; 122  : 
; 123  : 		cy3 = -  y0+3*y1-3*y2+y3;

	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	QWORD PTR _y2$[esp+88]
	fmul	ST(0), ST(3)
	fld	ST(1)
	fsub	ST(0), ST(6)
	fsub	ST(0), ST(1)
	fadd	QWORD PTR _y3$[esp+88]
	fstp	QWORD PTR _cy3$[esp+88]

; 124  : 		cy2 =  3*y0-6*y1+3*y2;

	fld	ST(5)
	fmulp	ST(4), ST(0)
	fxch	ST(2)
	fmul	ST(0), ST(4)
	fsubr	ST(0), ST(3)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fst	QWORD PTR _cy2$[esp+88]

; 125  : 		cy1 = -3*y0+3*y1;

	fxch	ST(1)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	QWORD PTR _cy1$[esp+88]

; 126  : 		cy0 =    y0;

	fxch	ST(2)
	fstp	QWORD PTR _cy0$[esp+88]
	fxch	ST(1)
$LN6@EvaluateBe:

; 127  : 	}
; 128  : 
; 129  : 	//
; 130  : 	// This equation is from Graphics Gems I.
; 131  : 	//
; 132  : 	// The idea is that since we're approximating a cubic curve with lines,
; 133  : 	// any error we incur is due to the curvature of the line, which we can
; 134  : 	// estimate by calculating the maximum acceleration of the curve.  For
; 135  : 	// a cubic, the acceleration (second derivative) is a line, meaning that
; 136  : 	// the absolute maximum acceleration must occur at either the beginning
; 137  : 	// (|c2|) or the end (|c2+c3|).  Our bounds here are a little more
; 138  : 	// conservative than that, but that's okay.
; 139  : 	//
; 140  : 	// If the acceleration of the parametric formula is zero (c2 = c3 = 0),
; 141  : 	// that component of the curve is linear and does not incur any error.
; 142  : 	// If a=0 for both X and Y, the curve is a line segment and we can
; 143  : 	// use a step size of 1.
; 144  : 
; 145  : 	double maxaccel1 = fabs(2*cy2) + fabs(6*cy3);

	fld	QWORD PTR __real@4000000000000000
	fmul	ST(1), ST(0)
	fxch	ST(1)
	fabs
	fld	QWORD PTR _cy3$[esp+88]
	fmul	ST(0), ST(3)
	fabs
	faddp	ST(1), ST(0)

; 146  : 	double maxaccel2 = fabs(2*cx2) + fabs(6*cx3);

	fld	QWORD PTR _cx2$[esp+88]
	fmulp	ST(2), ST(0)
	fxch	ST(1)
	fabs
	fld	QWORD PTR _cx3$[esp+88]
	fmulp	ST(3), ST(0)
	fxch	ST(2)
	fabs
	faddp	ST(2), ST(0)

; 147  : 
; 148  : 	double maxaccel = maxaccel1 > maxaccel2 ? maxaccel1 : maxaccel2;

	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN20@EvaluateBe
	fstp	ST(1)
	jmp	SHORT $LN11@EvaluateBe
$LN20@EvaluateBe:
	fstp	ST(0)
$LN11@EvaluateBe:

; 149  : 	double h = 1.0;

	fld1
	fstp	QWORD PTR _h$[esp+88]

; 150  : 
; 151  : 	if(maxaccel > 8.0) h = sqrt(8.0 / maxaccel);

	fld	QWORD PTR __real@4020000000000000
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN24@EvaluateBe
	fdivrp	ST(1), ST(0)
	call	__CIsqrt
	fstp	QWORD PTR _h$[esp+88]
	jmp	SHORT $LN5@EvaluateBe
$LN24@EvaluateBe:
	fstp	ST(1)
	fstp	ST(0)
$LN5@EvaluateBe:

; 152  : 
; 153  : 	if(!fFirstSet) {firstp.x = (LONG)cx0; firstp.y = (LONG)cy0; lastp = firstp; fFirstSet = true;}

	cmp	BYTE PTR [esi+4], 0
	jne	SHORT $LN4@EvaluateBe
	fld	QWORD PTR _cx0$[esp+88]
	call	__ftol2_sse
	fld	QWORD PTR _cy0$[esp+88]
	mov	DWORD PTR [esi+8], eax
	call	__ftol2_sse
	mov	DWORD PTR [esi+12], eax
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], ecx
	mov	BYTE PTR [esi+4], 1
$LN4@EvaluateBe:

; 154  : 
; 155  : 	for(double t = 0; t < 1.0; t += h)

	fldz
	fst	QWORD PTR _t$128680[esp+88]
$LN3@EvaluateBe:

; 156  : 	{
; 157  : 		double x = cx0 + t*(cx1 + t*(cx2 + t*cx3));
; 158  : 		double y = cy0 + t*(cy1 + t*(cy2 + t*cy3));

	fld	QWORD PTR _cy3$[esp+88]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy2$[esp+88]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy1$[esp+88]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cy0$[esp+88]

; 159  : 		_EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	call	__ftol2_sse
	fld	QWORD PTR _cx3$[esp+88]
	fmul	ST(0), ST(1)
	push	eax
	fadd	QWORD PTR _cx2$[esp+92]
	fmul	ST(0), ST(1)
	fadd	QWORD PTR _cx1$[esp+92]
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR _cx0$[esp+92]
	call	__ftol2_sse
	mov	edx, DWORD PTR [esi+20]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	push	edx
	push	eax
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine
	fld	QWORD PTR _t$128680[esp+88]
	fadd	QWORD PTR _h$[esp+88]
	fst	QWORD PTR _t$128680[esp+88]
	fld1
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN3@EvaluateBe
	fstp	ST(0)

; 160  : 	}
; 161  : 
; 162  : 	double x = cx0 + cx1 + cx2 + cx3;
; 163  : 	double y = cy0 + cy1 + cy2 + cy3;

	fld	QWORD PTR _cy0$[esp+88]
	fadd	QWORD PTR _cy1$[esp+88]
	fadd	QWORD PTR _cy2$[esp+88]
	fadd	QWORD PTR _cy3$[esp+88]

; 164  : 	_EvaluateLine(lastp.x, lastp.y, (int)x, (int)y);

	call	__ftol2_sse
	fld	QWORD PTR _cx0$[esp+88]
	fadd	QWORD PTR _cx1$[esp+88]
	push	eax
	fadd	QWORD PTR _cx2$[esp+92]
	fadd	QWORD PTR _cx3$[esp+92]
	call	__ftol2_sse
	mov	ecx, DWORD PTR [esi+20]
	mov	edx, DWORD PTR [esi+16]
	push	eax
	push	ecx
	push	edx
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine

; 165  : }

	pop	edi
	pop	ebx
	add	esp, 80					; 00000050H
	ret	4
?_EvaluateBezier@Rasterizer@@AAEXH_N@Z ENDP		; Rasterizer::_EvaluateBezier
_TEXT	ENDS
PUBLIC	??1Rasterizer@@UAE@XZ				; Rasterizer::~Rasterizer
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Rasterizer@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Rasterizer@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1Rasterizer@@UAE@XZ$1
__ehfuncinfo$??1Rasterizer@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Rasterizer@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??1Rasterizer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Rasterizer@@UAE@XZ PROC				; Rasterizer::~Rasterizer, COMDAT
; _this$ = ecx

; 48   : {

	push	-1
	push	__ehhandler$??1Rasterizer@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+24], esi
	mov	DWORD PTR [esi], OFFSET ??_7Rasterizer@@6B@
	mov	DWORD PTR __$EHRec$[esp+32], 1

; 49   : 	_TrashPath();

	mov	eax, DWORD PTR [esi+24]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	eax, DWORD PTR [esi+28]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]

; 50   : 	_TrashOverlay();

	mov	eax, DWORD PTR [esi+112]
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+32], ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 12					; 0000000cH

; 51   : }

	lea	eax, DWORD PTR [esi+68]
	push	eax
	mov	DWORD PTR [esi+112], ebx
	mov	BYTE PTR __$EHRec$[esp+36], bl
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esi, 44					; 0000002cH
	push	esi
	mov	DWORD PTR __$EHRec$[esp+36], -1
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Rasterizer@@UAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	ret	0
__unwindfunclet$??1Rasterizer@@UAE@XZ$1:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	ret	0
__ehhandler$??1Rasterizer@@UAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1Rasterizer@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Rasterizer@@UAE@XZ ENDP				; Rasterizer::~Rasterizer
; Function compile flags: /Ogtpy
;	COMDAT ??_GRasterizer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GRasterizer@@UAEPAXI@Z PROC				; Rasterizer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1Rasterizer@@UAE@XZ			; Rasterizer::~Rasterizer
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar@2
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@scalar@2:
	mov	eax, esi
	pop	esi
	ret	4
??_GRasterizer@@UAEPAXI@Z ENDP				; Rasterizer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@406fe00000000000
;	COMDAT __real@406fe00000000000
; File d:\-=svn=-\svplayer\src\subtitles\separablefilter.h
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT ??0GaussianKernel@@QAE@N@Z
_TEXT	SEGMENT
tv227 = -12						; size = 4
tv192 = -12						; size = 8
_sigma$ = 8						; size = 8
??0GaussianKernel@@QAE@N@Z PROC				; GaussianKernel::GaussianKernel, COMDAT
; _this$ = esi

; 104  : 	{
; 105  : 		width = (int)(sigma*3 + 0.5) | 1; // binary-or with 1 to make sure the number is odd

	fld	QWORD PTR _sigma$[esp-4]
	sub	esp, 16					; 00000010H
	fmul	QWORD PTR __real@4008000000000000
	push	edi
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	or	eax, 1

; 106  : 		if (width < 3) width = 3;

	cmp	eax, 3
	mov	DWORD PTR [esi+4], eax
	jge	SHORT $LN4@GaussianKe
	mov	DWORD PTR [esi+4], 3
$LN4@GaussianKe:

; 107  : 		kernel = new int[width];

	mov	eax, DWORD PTR [esi+4]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 108  : 		kernel[width/2] = (int)(NormalDist(sigma, 0) * 255);

	fldz
	sub	esp, 12					; 0000000cH
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _sigma$[esp+32]
	mov	edi, eax
	fstp	QWORD PTR [esp]
	mov	DWORD PTR [esi], edi
	call	?NormalDist@@YANNN@Z			; NormalDist
	fmul	QWORD PTR __real@406fe00000000000
	add	esp, 16					; 00000010H
	call	__ftol2_sse
	mov	ecx, eax
	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR [edi+eax*4], ecx

; 109  : 		divisor = kernel[width/2];

	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR [esi]
	sar	eax, 1
	mov	ecx, DWORD PTR [edx+eax*4]

; 110  : 		for (int x = width/2-1; x >= 0; x--) {

	lea	edi, DWORD PTR [eax-1]
	mov	DWORD PTR [esi+8], ecx
	test	edi, edi
	jl	$LN15@GaussianKe
	fld	QWORD PTR _sigma$[esp+16]
	fldz
$LN3@GaussianKe:

; 111  : 			int val = (int)(NormalDist(sigma, width/2-x) * 255 + 0.5);

	mov	eax, DWORD PTR [esi+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, edi
	mov	DWORD PTR tv227[esp+20], eax
	fild	DWORD PTR tv227[esp+20]
	fxch	ST(2)
	fcom	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN18@GaussianKe
	fld	ST(1)
	fucomp	ST(3)
	fnstsw	ax
	fstp	ST(2)
	test	ah, 68					; 00000044H
	jp	SHORT $LN10@GaussianKe
	fld1
	jmp	SHORT $LN7@GaussianKe
$LN10@GaussianKe:
	fld	ST(0)
	jmp	SHORT $LN7@GaussianKe
$LN18@GaussianKe:
	fstp	ST(1)
	fld	ST(1)
	fmulp	ST(2), ST(0)
	fld	ST(0)
	fadd	ST(0), ST(1)
	fmulp	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fchs
	call	__CIexp
	fstp	QWORD PTR tv192[esp+20]
	fld	QWORD PTR __real@401921fb54411744
	call	__CIsqrt
	fld	QWORD PTR _sigma$[esp+16]
	fmul	ST(1), ST(0)
	fld	QWORD PTR tv192[esp+20]
	fdivrp	ST(2), ST(0)
	fldz
	fxch	ST(1)
	fxch	ST(2)
$LN7@GaussianKe:
	fmul	QWORD PTR __real@406fe00000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse

; 112  : 			divisor += val*2;
; 113  : 			kernel[x] = val;

	mov	ecx, DWORD PTR [esi]
	lea	edx, DWORD PTR [eax+eax]
	add	DWORD PTR [esi+8], edx
	mov	DWORD PTR [ecx+edi*4], eax

; 114  : 			kernel[width - x - 1] = val;

	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	sub	edx, edi
	sub	edi, 1
	mov	DWORD PTR [ecx+edx*4-4], eax
	jns	$LN3@GaussianKe
	fstp	ST(1)
	fstp	ST(0)
$LN15@GaussianKe:

; 115  : 		}
; 116  : 	}

	mov	eax, esi
	pop	edi
	add	esp, 16					; 00000010H
	ret	8
??0GaussianKernel@@QAE@N@Z ENDP				; GaussianKernel::GaussianKernel
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __Last$ = edx
; __Dest$ = eax

; 122  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	mov	ecx, DWORD PTR __First$[esp-4]

; 123  : 	_DEBUG_RANGE(_First, _Last);
; 124  : 	_DEBUG_POINTER(_Dest);
; 125  : 	_FwdIt _Next = _Dest;
; 126  : 
; 127  : 	_TRY_BEGIN
; 128  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop@2
	push	esi
	npad	7
$LL6@Uninit_cop@2:

; 129  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop@2
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
$LN5@Uninit_cop@2:
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop@2
	pop	esi
$LN4@Uninit_cop@2:

; 130  : 	_CATCH_ALL
; 131  : 	for (; _Next != _Dest; ++_Next)
; 132  : 		_Al.destroy(_Next);
; 133  : 	_RERAISE;
; 134  : 	_CATCH_END
; 135  : 	return (_Dest);
; 136  : 	}

	ret	0
??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __Last$ = edx
; __Dest$ = eax

; 122  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

	mov	ecx, DWORD PTR __First$[esp-4]

; 123  : 	_DEBUG_RANGE(_First, _Last);
; 124  : 	_DEBUG_POINTER(_Dest);
; 125  : 	_FwdIt _Next = _Dest;
; 126  : 
; 127  : 	_TRY_BEGIN
; 128  : 	for (; _First != _Last; ++_Dest, ++_First)

	cmp	ecx, edx
	je	SHORT $LN4@Uninit_cop@3
	push	esi
	npad	7
$LL6@Uninit_cop@3:

; 129  : 		_Al.construct(_Dest, *_First);

	test	eax, eax
	je	SHORT $LN5@Uninit_cop@3
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], esi
	mov	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], esi
	mov	esi, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], esi
$LN5@Uninit_cop@3:
	add	ecx, 16					; 00000010H
	add	eax, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL6@Uninit_cop@3
	pop	esi
$LN4@Uninit_cop@3:

; 130  : 	_CATCH_ALL
; 131  : 	for (; _Next != _Dest; ++_Next)
; 132  : 		_Al.destroy(_Next);
; 133  : 	_RERAISE;
; 134  : 	_CATCH_END
; 135  : 	return (_Dest);
; 136  : 	}

	ret	0
??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z
_TEXT	SEGMENT
$T259956 = -4						; size = 1
__Cat$259960 = 8					; size = 1
__Last$ = 8						; size = 4
__Dest$ = 12						; size = 4
??$unchecked_uninitialized_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __First$ = edx

; 809  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 810  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 811  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$259960[esp]
	mov	BYTE PTR $T259956[esp+4], 0
	mov	eax, DWORD PTR $T259956[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 812  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$unchecked_uninitialized_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z
_TEXT	SEGMENT
$T259985 = -4						; size = 1
__Cat$259989 = 8					; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Dest$ = 24						; size = 4
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z PROC ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 809  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 810  : 		return (_STD _Uninit_copy(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 811  : 			_STD _Ptr_cat(_First, _Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$259989[esp]
	mov	edx, DWORD PTR __First$[esp+4]
	mov	BYTE PTR $T259985[esp+4], 0
	mov	eax, DWORD PTR $T259985[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+16]
	call	??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 812  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$unchecked_uninitialized_copy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ENDP ; stdext::unchecked_uninitialized_copy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??G?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEHABV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEHABV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator-, COMDAT
; _this$ = ecx

; 397  : 		{	// return difference of iterators

	push	esi
	mov	esi, ecx

; 398  : 		return (*(_Mybase *)this - _Right);

	mov	eax, DWORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR __Right$[esp+4]
	test	eax, eax
	je	SHORT $LN6@operator@7
	cmp	eax, DWORD PTR [edi]
	je	SHORT $LN5@operator@7
$LN6@operator@7:
	call	__invalid_parameter_noinfo
$LN5@operator@7:
	mov	eax, DWORD PTR [esi+4]
	sub	eax, DWORD PTR [edi+4]
	pop	edi
	sar	eax, 2
	pop	esi

; 399  : 		}

	ret	4
??G?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEHABV?$_Vector_const_iterator@HV?$allocator@H@std@@@1@@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator-
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z
_TEXT	SEGMENT
$T260078 = -4						; size = 1
__Last$ = 8						; size = 4
__Cat$260081 = 12					; size = 1
__Ptr$ = 12						; size = 4
??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = edx

; 1143 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1144 : 		{	// copy initializing [_First, _Last), using allocator
; 1145 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1146 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$260081[esp]
	mov	BYTE PTR $T260078[esp+4], 0
	mov	eax, DWORD PTR $T260078[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1147 : 		}

	add	esp, 16					; 00000010H
	ret	8
??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Ucopy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z
_TEXT	SEGMENT
$T260141 = -4						; size = 1
__Cat$260145 = 8					; size = 1
__Ptr$ = 8						; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
??$_Ucopy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT

; 1143 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1144 : 		{	// copy initializing [_First, _Last), using allocator
; 1145 : 		return (_STDEXT unchecked_uninitialized_copy(_First, _Last,
; 1146 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$260145[esp]
	mov	edx, DWORD PTR __First$[esp+4]
	mov	BYTE PTR $T260141[esp+4], 0
	mov	eax, DWORD PTR $T260141[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+16]
	call	??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1147 : 		}

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
??$_Ucopy@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\algorithm
_TEXT	ENDS
;	COMDAT ??$sort@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAXV?$_Vector_iterator@HV?$allocator@H@std@@@0@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
??$sort@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAXV?$_Vector_iterator@HV?$allocator@H@std@@@0@0@Z PROC ; std::sort<std::_Vector_iterator<int,std::allocator<int> > >, COMDAT

; 3112 : 	_DEBUG_RANGE(_First, _Last);
; 3113 : 	std::_Sort(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Last - _First);

	mov	eax, DWORD PTR __Last$[esp-4]
	test	eax, eax
	je	SHORT $LN8@sort
	cmp	eax, DWORD PTR __First$[esp-4]
	je	SHORT $LN7@sort
$LN8@sort:
	call	__invalid_parameter_noinfo
$LN7@sort:
	mov	eax, DWORD PTR __Last$[esp]
	mov	ecx, DWORD PTR __First$[esp]
	mov	edx, eax
	sub	edx, ecx
	sar	edx, 2
	push	edx
	push	eax
	push	ecx
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>
	add	esp, 12					; 0000000cH

; 3114 : 	}

	ret	0
??$sort@V?$_Vector_iterator@HV?$allocator@H@std@@@std@@@std@@YAXV?$_Vector_iterator@HV?$allocator@H@std@@@0@0@Z ENDP ; std::sort<std::_Vector_iterator<int,std::allocator<int> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=, COMDAT
; _this$ = esi
; __Off$ = eax

; 159  : 		{	// increment by integer

	push	edi
	mov	edi, eax

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN26@operator@8
	call	__invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN16@operator@8
$LN26@operator@8:
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN17@operator@8
$LN16@operator@8:
	xor	edx, edx
$LN17@operator@8:
	mov	ecx, DWORD PTR [esi+4]
	shl	edi, 4
	add	ecx, edi
	cmp	ecx, DWORD PTR [edx+16]
	ja	SHORT $LN4@operator@8
	test	eax, eax
	je	SHORT $LN22@operator@8
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN23@operator@8
$LN22@operator@8:
	xor	eax, eax
$LN23@operator@8:
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN27@operator@8
$LN4@operator@8:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	__invalid_parameter_noinfo
$LN27@operator@8:

; 164  : 		_Myptr += _Off;

	add	DWORD PTR [esi+4], edi

; 165  : 		return (*this);

	mov	eax, esi
	pop	edi

; 166  : 		}

	ret	0
??Y?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 159  : 		{	// increment by integer

	push	esi
	mov	esi, ecx

; 160  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	push	edi
	test	eax, eax
	jne	SHORT $LN26@operator@9
	call	__invalid_parameter_noinfo

; 161  : 		_SCL_SECURE_VALIDATE_RANGE(

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN16@operator@9
$LN26@operator@9:
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN17@operator@9
$LN16@operator@9:
	xor	edx, edx
$LN17@operator@9:
	mov	edi, DWORD PTR __Off$[esp+4]
	mov	ecx, DWORD PTR [esi+4]
	add	edi, edi
	add	edi, edi
	add	ecx, edi
	cmp	ecx, DWORD PTR [edx+16]
	ja	SHORT $LN4@operator@9
	test	eax, eax
	je	SHORT $LN22@operator@9
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN23@operator@9
$LN22@operator@9:
	xor	eax, eax
$LN23@operator@9:
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN27@operator@9
$LN4@operator@9:

; 162  : 			_Myptr + _Off <= ((_Myvec *)(this->_Getmycont()))->_Mylast &&
; 163  : 			_Myptr + _Off >= ((_Myvec *)(this->_Getmycont()))->_Myfirst);

	call	__invalid_parameter_noinfo
$LN27@operator@9:

; 164  : 		_Myptr += _Off;

	add	DWORD PTR [esi+4], edi
	pop	edi

; 165  : 		return (*this);

	mov	eax, esi
	pop	esi

; 166  : 		}

	ret	4
??Y?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
??Y?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=, COMDAT
; _this$ = esi
; __Off$ = eax

; 374  : 		{	// increment by integer

	push	edi
	mov	edi, eax

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN28@operator@10
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN18@operator@10
$LN28@operator@10:
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN19@operator@10
$LN18@operator@10:
	xor	edx, edx
$LN19@operator@10:
	mov	ecx, DWORD PTR [esi+4]
	shl	edi, 4
	add	ecx, edi
	cmp	ecx, DWORD PTR [edx+16]
	ja	SHORT $LN6@operator@10
	test	eax, eax
	je	SHORT $LN24@operator@10
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN25@operator@10
$LN24@operator@10:
	xor	eax, eax
$LN25@operator@10:
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN29@operator@10
$LN6@operator@10:
	call	__invalid_parameter_noinfo
$LN29@operator@10:
	add	DWORD PTR [esi+4], edi

; 376  : 		return (*this);

	mov	eax, esi
	pop	edi

; 377  : 		}

	ret	0
??Y?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+=, COMDAT
; _this$ = ecx

; 374  : 		{	// increment by integer

	push	esi
	mov	esi, ecx

; 375  : 		(*(_Mybase *)this) += _Off;

	mov	eax, DWORD PTR [esi]
	push	edi
	test	eax, eax
	jne	SHORT $LN28@operator@11
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN18@operator@11
$LN28@operator@11:
	mov	edx, DWORD PTR [eax]
	jmp	SHORT $LN19@operator@11
$LN18@operator@11:
	xor	edx, edx
$LN19@operator@11:
	mov	edi, DWORD PTR __Off$[esp+4]
	mov	ecx, DWORD PTR [esi+4]
	add	edi, edi
	add	edi, edi
	add	ecx, edi
	cmp	ecx, DWORD PTR [edx+16]
	ja	SHORT $LN6@operator@11
	test	eax, eax
	je	SHORT $LN24@operator@11
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN25@operator@11
$LN24@operator@11:
	xor	eax, eax
$LN25@operator@11:
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN29@operator@11
$LN6@operator@11:
	call	__invalid_parameter_noinfo
$LN29@operator@11:
	add	DWORD PTR [esi+4], edi
	pop	edi

; 376  : 		return (*this);

	mov	eax, esi
	pop	esi

; 377  : 		}

	ret	4
??Y?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??H?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+, COMDAT
; _this$ = eax
; __Off$ = ecx

; 380  : 		{	// return this + integer

	push	ebx

; 381  : 		_Myt _Tmp = *this;

	mov	ebx, DWORD PTR [eax+4]
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp+4]
	push	esi
	mov	esi, DWORD PTR [eax]
	push	edi
	mov	edi, ecx

; 382  : 		return (_Tmp += _Off);

	test	esi, esi
	jne	SHORT $LN30@operator@12
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN21@operator@12:
	shl	edi, 4
	add	edi, ebx
	cmp	edi, DWORD PTR [eax+16]
	ja	SHORT $LN8@operator@12
	test	esi, esi
	je	SHORT $LN26@operator@12
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN27@operator@12
$LN30@operator@12:
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN21@operator@12
$LN26@operator@12:
	xor	eax, eax
$LN27@operator@12:
	cmp	edi, DWORD PTR [eax+12]
	jae	SHORT $LN7@operator@12
$LN8@operator@12:
	call	__invalid_parameter_noinfo
$LN7@operator@12:
	mov	DWORD PTR [ebp+4], edi

; 383  : 		}

	pop	edi
	mov	DWORD PTR [ebp], esi
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
	ret	4
??H?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator+
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator+, COMDAT
; _this$ = ecx

; 380  : 		{	// return this + integer

	push	esi

; 381  : 		_Myt _Tmp = *this;

	mov	esi, DWORD PTR [ecx]
	push	edi
	mov	edi, DWORD PTR [ecx+4]

; 382  : 		return (_Tmp += _Off);

	test	esi, esi
	jne	SHORT $LN30@operator@13
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN21@operator@13:
	mov	ecx, DWORD PTR __Off$[esp+4]
	lea	edi, DWORD PTR [edi+ecx*4]
	cmp	edi, DWORD PTR [eax+16]
	ja	SHORT $LN8@operator@13
	test	esi, esi
	je	SHORT $LN26@operator@13
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN27@operator@13
$LN30@operator@13:
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN21@operator@13
$LN26@operator@13:
	xor	eax, eax
$LN27@operator@13:
	cmp	edi, DWORD PTR [eax+12]
	jae	SHORT $LN7@operator@13
$LN8@operator@13:
	call	__invalid_parameter_noinfo
$LN7@operator@13:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	DWORD PTR [eax+4], edi

; 383  : 		}

	pop	edi
	mov	DWORD PTR [eax], esi
	pop	esi
	ret	8
??H?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBE?AV01@H@Z ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator+
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >, COMDAT
; _this$ = ecx

; 419  : 		{

	push	esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	4
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Container_
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi], eax

; 421  : 		}

	mov	eax, esi
	pop	esi
	ret	4
$LN3@Container_:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	xor	eax, eax
	mov	DWORD PTR [esi], eax

; 421  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Container_base_aux_alloc_real@V?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<int> >::_Container_base_aux_alloc_real<std::allocator<int> >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z PROC ; std::vector<int,std::allocator<int> >::_Make_iter, COMDAT
; _this$ = ecx

; 660  : 		{	// make iterator from const_iterator

	push	esi
	push	edi

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	edi, DWORD PTR ___$ReturnUdt$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [edi], 0
	test	esi, esi
	je	SHORT $LN8@Make_iter
	mov	eax, DWORD PTR __Where$[esp+8]
	cmp	DWORD PTR [esi+12], eax
	ja	SHORT $LN8@Make_iter
	cmp	eax, DWORD PTR [esi+16]
	jbe	SHORT $LN7@Make_iter
$LN8@Make_iter:
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR __Where$[esp+8]
$LN7@Make_iter:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi+4], eax
	mov	DWORD PTR [edi], ecx
	mov	eax, edi
	pop	edi
	pop	esi

; 662  : 		}

	ret	12					; 0000000cH
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@@Z ENDP ; std::vector<int,std::allocator<int> >::_Make_iter
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z PROC ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = esi

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@Container_@2
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi], eax

; 421  : 		}

	mov	eax, esi
	ret	4
$LN3@Container_@2:

; 420  : 		_Myownedaux = new (_Alaux.allocate(1)) _Aux_cont(this);

	xor	eax, eax
	mov	DWORD PTR [esi], eax

; 421  : 		}

	mov	eax, esi
	ret	4
??0?$_Container_base_aux_alloc_real@V?$allocator@U?$pair@_K_K@std@@@std@@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ENDP ; std::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Container_base_aux_alloc_real<std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter, COMDAT
; _this$ = edi
; ___$ReturnUdt$ = esi

; 661  : 		return (iterator(_Where._Myptr, this));

	mov	DWORD PTR [esi], 0
	test	edi, edi
	je	SHORT $LN8@Make_iter@2
	mov	eax, DWORD PTR __Where$[esp]
	cmp	DWORD PTR [edi+12], eax
	ja	SHORT $LN8@Make_iter@2
	cmp	eax, DWORD PTR [edi+16]
	jbe	SHORT $LN7@Make_iter@2
$LN8@Make_iter@2:
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR __Where$[esp]
$LN7@Make_iter@2:
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], ecx
	mov	eax, esi

; 662  : 		}

	ret	8
?_Make_iter@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Make_iter
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++, COMDAT
; _this$ = esi

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN19@operator@14
	call	__invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN15@operator@14
$LN19@operator@14:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN16@operator@14
$LN15@operator@14:
	xor	eax, eax
$LN16@operator@14:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN20@operator@14
	call	__invalid_parameter_noinfo
$LN20@operator@14:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [esi+4], 16			; 00000010H

; 126  : 		return (*this);

	mov	eax, esi

; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEABU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEABU?$pair@_K_K@1@XZ PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*, COMDAT
; _this$ = esi

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN19@operator@15
	call	__invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN15@operator@15
$LN19@operator@15:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN16@operator@15
$LN15@operator@15:
	xor	eax, eax
$LN16@operator@15:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN20@operator@15
	call	__invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [esi+4]

; 107  : 		}

	ret	0
$LN20@operator@15:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, ecx

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEABU?$pair@_K_K@1@XZ ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++, COMDAT
; _this$ = ecx

; 115  : 		{	// preincrement

	push	esi
	mov	esi, ecx

; 116  : 		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN19@operator@16
	call	__invalid_parameter_noinfo

; 117  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN15@operator@16
$LN19@operator@16:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN16@operator@16
$LN15@operator@16:
	xor	eax, eax
$LN16@operator@16:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN20@operator@16
	call	__invalid_parameter_noinfo
$LN20@operator@16:

; 118  : 
; 119  :  #if _HAS_ITERATOR_DEBUGGING
; 120  : 		if (this->_Mycont == 0
; 121  : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 122  : 			_DEBUG_ERROR("vector iterator not incrementable");
; 123  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 124  : 
; 125  : 		++_Myptr;

	add	DWORD PTR [esi+4], 4

; 126  : 		return (*this);

	mov	eax, esi
	pop	esi

; 127  : 		}

	ret	0
??E?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ PROC ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*, COMDAT
; _this$ = ecx

; 91   : 		{	// return designated object

	push	esi
	mov	esi, ecx

; 92   : 
; 93   :  #if _HAS_ITERATOR_DEBUGGING
; 94   : 		if (this->_Mycont == 0
; 95   : 			|| _Myptr < ((_Myvec *)this->_Mycont)->_Myfirst
; 96   : 			|| ((_Myvec *)this->_Mycont)->_Mylast <= _Myptr)
; 97   : 			{
; 98   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 99   : 			_SCL_SECURE_OUT_OF_RANGE;
; 100  : 			}
; 101  :  #else
; 102  :  		_SCL_SECURE_VALIDATE(this->_Has_container());

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN19@operator@17
	call	__invalid_parameter_noinfo

; 103  : 		_SCL_SECURE_VALIDATE_RANGE(_Myptr < ((_Myvec *)(this->_Getmycont()))->_Mylast);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN15@operator@17
$LN19@operator@17:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN16@operator@17
$LN15@operator@17:
	xor	eax, eax
$LN16@operator@17:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN20@operator@17
	call	__invalid_parameter_noinfo

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, DWORD PTR [esi+4]
	pop	esi

; 107  : 		}

	ret	0
$LN20@operator@17:

; 104  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 105  : 
; 106  : 		return (*_Myptr);

	mov	eax, ecx
	pop	esi

; 107  : 		}

	ret	0
??D?$_Vector_const_iterator@HV?$allocator@H@std@@@std@@QBEABHXZ ENDP ; std::_Vector_const_iterator<int,std::allocator<int> >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z PROC ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 425  : 		{	// construct allocator from _Al

	push	esi
	push	4
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Vector_val
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi], eax

; 426  : 		}

	mov	eax, esi
	pop	esi
	ret	4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val:
	xor	eax, eax
	mov	DWORD PTR [esi], eax

; 426  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0?$_Vector_val@HV?$allocator@H@std@@@std@@IAE@V?$allocator@H@1@@Z ENDP ; std::_Vector_val<int,std::allocator<int> >::_Vector_val<int,std::allocator<int> >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First_arg$ = 12					; size = 8
__Last_arg$ = 20					; size = 8
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z PROC ; std::vector<int,std::allocator<int> >::erase, COMDAT
; _this$ = ecx

; 1033 : 		{	// erase [_First, _Last)

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	ecx
	push	ebx

; 1034 : 		iterator _First = _Make_iter(_First_arg);

	mov	ebx, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR [ebx], 0
	test	esi, esi
	je	SHORT $LN11@erase
	mov	eax, DWORD PTR __First_arg$[ebp+4]
	cmp	DWORD PTR [esi+12], eax
	ja	SHORT $LN11@erase
	cmp	eax, DWORD PTR [esi+16]
	jbe	SHORT $LN10@erase
$LN11@erase:
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR __First_arg$[ebp+4]
$LN10@erase:

; 1035 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	edi, DWORD PTR __Last_arg$[ebp+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [ebx], ecx
	mov	DWORD PTR [ebx+4], eax
	cmp	DWORD PTR [esi+12], edi
	ja	SHORT $LN30@erase
	cmp	edi, DWORD PTR [esi+16]
	jbe	SHORT $LN29@erase
$LN30@erase:
	call	__invalid_parameter_noinfo
	mov	edi, DWORD PTR __Last_arg$[ebp+4]
$LN29@erase:

; 1036 : 
; 1037 : 		if (_First != _Last)

	mov	eax, DWORD PTR [ebx]
	mov	ecx, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN47@erase
	cmp	eax, ecx
	je	SHORT $LN46@erase
$LN47@erase:
	call	__invalid_parameter_noinfo
$LN46@erase:
	mov	edx, DWORD PTR [ebx+4]
	cmp	edx, edi
	je	SHORT $LN72@erase

; 1038 : 			{	// worth doing, copy down over hole
; 1039 : 
; 1040 :  #if _HAS_ITERATOR_DEBUGGING
; 1041 : 			if (_Last < _First || _First._Mycont != this
; 1042 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1043 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));
; 1046 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1047 : 
; 1048 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1049 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1050 : 				_VEC_ITER_BASE(_First));

	mov	eax, DWORD PTR [esi+16]
	sub	eax, edi
	sar	eax, 2
	lea	ecx, DWORD PTR [eax*4]
	lea	ebx, DWORD PTR [ecx+edx]
	test	eax, eax
	jle	SHORT $LN69@erase
	push	ecx
	push	edi
	push	ecx
	push	edx
	call	_memmove_s
	add	esp, 16					; 00000010H
$LN69@erase:

; 1051 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1052 : 
; 1053 : 			_Destroy(_Ptr, _Mylast);
; 1054 : 			_Mylast = _Ptr;

	mov	DWORD PTR [esi+16], ebx

; 1055 : 			}
; 1056 : #if _HAS_ITERATOR_DEBUGGING
; 1057 :         return (iterator(_First._Myptr, this));
; 1058 : #else
; 1059 : 		return (_First);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1060 : #endif
; 1061 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN72@erase:
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ENDP ; std::vector<int,std::allocator<int> >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z PROC ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; _this$ = esi

; 425  : 		{	// construct allocator from _Al

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@Vector_val@2
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [esi], eax

; 426  : 		}

	mov	eax, esi
	ret	4

; 425  : 		{	// construct allocator from _Al

$LN8@Vector_val@2:
	xor	eax, eax
	mov	DWORD PTR [esi], eax

; 426  : 		}

	mov	eax, esi
	ret	4
??0?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE@V?$allocator@U?$pair@_K_K@std@@@1@@Z ENDP ; std::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Vector_val<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??9?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
??9?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator!=, COMDAT
; _this$ = edi
; __Right$ = esi

; 216  : 		return (!(*this == _Right));

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN6@operator@18
	cmp	eax, DWORD PTR [esi]
	je	SHORT $LN5@operator@18
$LN6@operator@18:
	call	__invalid_parameter_noinfo
$LN5@operator@18:
	mov	eax, DWORD PTR [edi+4]
	xor	ecx, ecx
	cmp	eax, DWORD PTR [esi+4]
	setne	cl
	mov	al, cl

; 217  : 		}

	ret	0
??9?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator!=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++, COMDAT
; _this$ = esi

; 349  : 		++(*(_Mybase *)this);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN21@operator@19
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@operator@19
$LN21@operator@19:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN18@operator@19
$LN17@operator@19:
	xor	eax, eax
$LN18@operator@19:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN22@operator@19
	call	__invalid_parameter_noinfo
$LN22@operator@19:
	add	DWORD PTR [esi+4], 16			; 00000010H

; 350  : 		return (*this);

	mov	eax, esi

; 351  : 		}

	ret	0
??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEAAU?$pair@_K_K@1@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEAAU?$pair@_K_K@1@XZ PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*, COMDAT
; _this$ = esi

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN21@operator@20
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@operator@20
$LN21@operator@20:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN18@operator@20
$LN17@operator@20:
	xor	eax, eax
$LN18@operator@20:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN22@operator@20
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi+4]

; 340  : 		}

	ret	0
$LN22@operator@20:

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, ecx

; 340  : 		}

	ret	0
??D?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QBEAAU?$pair@_K_K@1@XZ ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator++, COMDAT
; _this$ = ecx

; 348  : 		{	// preincrement

	push	esi
	mov	esi, ecx

; 349  : 		++(*(_Mybase *)this);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN21@operator@21
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@operator@21
$LN21@operator@21:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN18@operator@21
$LN17@operator@21:
	xor	eax, eax
$LN18@operator@21:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN22@operator@21
	call	__invalid_parameter_noinfo
$LN22@operator@21:
	add	DWORD PTR [esi+4], 4

; 350  : 		return (*this);

	mov	eax, esi
	pop	esi

; 351  : 		}

	ret	0
??E?$_Vector_iterator@HV?$allocator@H@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??D?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEAAHXZ
_TEXT	SEGMENT
??D?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEAAHXZ PROC ; std::_Vector_iterator<int,std::allocator<int> >::operator*, COMDAT
; _this$ = ecx

; 338  : 		{	// return designated object

	push	esi
	mov	esi, ecx

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN21@operator@22
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@operator@22
$LN21@operator@22:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN18@operator@22
$LN17@operator@22:
	xor	eax, eax
$LN18@operator@22:
	mov	ecx, DWORD PTR [esi+4]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN22@operator@22
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi+4]
	pop	esi

; 340  : 		}

	ret	0
$LN22@operator@22:

; 339  : 		return ((reference)**(_Mybase *)this);

	mov	eax, ecx
	pop	esi

; 340  : 		}

	ret	0
??D?$_Vector_iterator@HV?$allocator@H@std@@@std@@QBEAAHXZ ENDP ; std::_Vector_iterator<int,std::allocator<int> >::operator*
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T261506 = -8						; size = 8
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT
; _this$ = ecx

; 1064 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 1065 : 		erase(begin(), end());

	mov	ebp, DWORD PTR [esi+16]
	push	edi
	cmp	DWORD PTR [esi+12], ebp
	jbe	SHORT $LN9@clear
	call	__invalid_parameter_noinfo
$LN9@clear:
	mov	edi, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR [esi]
	cmp	edi, DWORD PTR [esi+16]
	jbe	SHORT $LN28@clear
	call	__invalid_parameter_noinfo
$LN28@clear:
	mov	eax, DWORD PTR [esi]
	push	ebp
	push	ebx
	push	edi
	push	eax
	lea	eax, DWORD PTR $T261506[esp+40]
	push	eax
	mov	ecx, esi
	call	?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@0@Z ; std::vector<int,std::allocator<int> >::erase

; 1066 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
PUBLIC	?Rasterize@Rasterizer@@QAE_NHHHN@Z		; Rasterizer::Rasterize
EXTRN	__aullshr:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Rasterize@Rasterizer@@QAE_NHHHN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Rasterize@Rasterizer@@QAE_NHHHN@Z$0
__ehfuncinfo$?Rasterize@Rasterizer@@QAE_NHHHN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Rasterize@Rasterizer@@QAE_NHHHN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?Rasterize@Rasterizer@@QAE_NHHHN@Z
_TEXT	SEGMENT
_pass$129767 = -60					; size = 4
_i$129707 = -60						; size = 4
_width$ = -60						; size = 4
tv1631 = -56						; size = 4
_x1$129720 = -56					; size = 4
_height$ = -56						; size = 4
$T261803 = -52						; size = 4
_tmp$129773 = -52					; size = 4
_border$129777 = -48					; size = 4
_last$129726 = -48					; size = 4
tv1661 = -44						; size = 4
_x2$129722 = -44					; size = 4
_pOutline$ = -40					; size = 8
_it$129711 = -32					; size = 8
_filter$129734 = -24					; size = 12
_itEnd$129713 = -24					; size = 8
__$EHRec$ = -12						; size = 12
tv1570 = 8						; size = 4
_xsub$ = 8						; size = 4
_dst$129783 = 12					; size = 4
_ysub$ = 12						; size = 4
_fBlur$ = 16						; size = 4
_j$129778 = 20						; size = 4
_fGaussianBlur$ = 20					; size = 8
?Rasterize@Rasterizer@@QAE_NHHHN@Z PROC			; Rasterizer::Rasterize, COMDAT
; _this$ = edi

; 688  : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?Rasterize@Rasterizer@@QAE_NHHHN@Z
	push	eax
	mov	DWORD PTR fs:0, esp

; 689  : 	_TrashOverlay();

	mov	eax, DWORD PTR [edi+112]
	sub	esp, 48					; 00000030H
	push	ebx
	push	ebp
	push	esi
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]

; 690  : 
; 691  : 	if(!mWidth || !mHeight)

	mov	eax, DWORD PTR [edi+36]
	xor	ebp, ebp
	add	esp, 4
	mov	DWORD PTR [edi+112], ebp
	cmp	eax, ebp
	je	$LN30@Rasterize
	mov	edx, DWORD PTR [edi+40]
	cmp	edx, ebp
	je	$LN30@Rasterize

; 694  : 		return true;
; 695  : 	}
; 696  : 
; 697  : 	xsub &= 7;

	mov	ecx, DWORD PTR _xsub$[esp+68]

; 698  : 	ysub &= 7;
; 699  : 
; 700  : 	int width = mWidth + xsub;
; 701  : 	int height = mHeight + ysub;
; 702  : 
; 703  : 	mOffsetX = mPathOffsetX - xsub;
; 704  : 	mOffsetY = mPathOffsetY - ysub;
; 705  : 
; 706  : 	mWideBorder = (mWideBorder+7)&~7;
; 707  : 
; 708  : 	if(!mWideOutline.empty() || fBlur || fGaussianBlur > 0)

	fld	QWORD PTR _fGaussianBlur$[esp+68]
	mov	esi, DWORD PTR _ysub$[esp+68]
	fldz
	and	ecx, 7
	add	eax, ecx
	mov	DWORD PTR _width$[esp+72], eax
	mov	eax, DWORD PTR [edi+124]
	and	esi, 7
	sub	eax, ecx
	mov	DWORD PTR _xsub$[esp+68], ecx
	mov	ecx, DWORD PTR [edi+128]
	add	edx, esi
	sub	ecx, esi
	mov	DWORD PTR _ysub$[esp+68], esi
	mov	esi, DWORD PTR [edi+92]
	add	esi, 7
	and	esi, -8					; fffffff8H
	lea	ebx, DWORD PTR [edi+68]
	mov	DWORD PTR [edi+132], eax
	mov	DWORD PTR [edi+136], ecx
	mov	DWORD PTR [edi+92], esi
	mov	eax, DWORD PTR [ebx+16]
	sub	eax, DWORD PTR [ebx+12]
	mov	DWORD PTR _height$[esp+72], edx
	test	eax, -16				; fffffff0H
	jne	SHORT $LN28@Rasterize
	cmp	DWORD PTR _fBlur$[esp+68], ebp
	jne	SHORT $LN28@Rasterize
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN217@Rasterize
$LN28@Rasterize:

; 709  : 	{
; 710  : 		int bluradjust = 0;
; 711  : 		if (fGaussianBlur > 0)

	fcomp	ST(1)
	xor	ecx, ecx
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN220@Rasterize

; 712  : 			bluradjust += (int)(fGaussianBlur*3*8 + 0.5) | 1;

	fmul	QWORD PTR __real@4008000000000000
	fmul	QWORD PTR __real@4020000000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	ecx, eax
	or	ecx, 1
	jmp	SHORT $LN27@Rasterize
$LN220@Rasterize:

; 709  : 	{
; 710  : 		int bluradjust = 0;
; 711  : 		if (fGaussianBlur > 0)

	fstp	ST(0)
$LN27@Rasterize:

; 713  : 		if (fBlur)

	cmp	DWORD PTR _fBlur$[esp+68], ebp
	je	SHORT $LN26@Rasterize

; 714  : 			bluradjust += 8;

	add	ecx, 8
$LN26@Rasterize:

; 715  : 
; 716  : 		// Expand the buffer a bit when we're blurring, since that can also widen the borders a bit
; 717  : 		bluradjust = (bluradjust+7)&~7;
; 718  : 
; 719  : 		width += 2*mWideBorder + bluradjust*2;
; 720  : 		height += 2*mWideBorder + bluradjust*2;

	mov	edx, DWORD PTR _height$[esp+72]
	lea	eax, DWORD PTR [ecx+7]
	and	eax, -8					; fffffff8H
	lea	ecx, DWORD PTR [esi+eax]

; 721  : 
; 722  : 		xsub += mWideBorder + bluradjust;

	add	DWORD PTR _xsub$[esp+68], ecx

; 723  : 		ysub += mWideBorder + bluradjust;

	add	DWORD PTR _ysub$[esp+68], ecx
	lea	ebp, DWORD PTR [ecx+ecx]
	add	DWORD PTR _width$[esp+72], ebp

; 724  : 
; 725  : 		mOffsetX -= mWideBorder + bluradjust;

	lea	ecx, DWORD PTR [esi+eax]
	sub	DWORD PTR [edi+132], ecx

; 726  : 		mOffsetY -= mWideBorder + bluradjust;

	add	esi, eax
	sub	DWORD PTR [edi+136], esi
	add	edx, ebp
	xor	ebp, ebp
	jmp	SHORT $LN29@Rasterize
$LN217@Rasterize:

; 698  : 	ysub &= 7;
; 699  : 
; 700  : 	int width = mWidth + xsub;
; 701  : 	int height = mHeight + ysub;
; 702  : 
; 703  : 	mOffsetX = mPathOffsetX - xsub;
; 704  : 	mOffsetY = mPathOffsetY - ysub;
; 705  : 
; 706  : 	mWideBorder = (mWideBorder+7)&~7;
; 707  : 
; 708  : 	if(!mWideOutline.empty() || fBlur || fGaussianBlur > 0)

	fstp	ST(1)
	fstp	ST(0)
$LN29@Rasterize:

; 727  : 	}
; 728  : 
; 729  : 	mOverlayWidth = ((width+7)>>3) + 1;

	mov	eax, DWORD PTR _width$[esp+72]
	lea	ecx, DWORD PTR [eax+7]

; 730  : 	mOverlayHeight = ((height+7)>>3) + 1;

	lea	eax, DWORD PTR [edx+7]
	sar	eax, 3
	inc	eax
	sar	ecx, 3
	inc	ecx
	mov	DWORD PTR [edi+120], eax

; 731  : 
; 732  : 	mpOverlayBuffer = new byte[2 * mOverlayWidth * mOverlayHeight];

	imul	eax, ecx
	add	eax, eax
	push	eax
	mov	DWORD PTR [edi+116], ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 733  : 	memset(mpOverlayBuffer, 0, 2 * mOverlayWidth * mOverlayHeight);

	mov	ecx, DWORD PTR [edi+120]
	imul	ecx, DWORD PTR [edi+116]
	add	esp, 4
	add	ecx, ecx
	push	ecx
	push	ebp
	push	eax
	mov	DWORD PTR [edi+112], eax
	call	_memset

; 734  : 
; 735  : 	// Are we doing a border?
; 736  : 
; 737  : 	tSpanBuffer* pOutline[2] = {&mOutline, &mWideOutline};

	lea	edx, DWORD PTR [edi+44]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pOutline$[esp+72], edx
	mov	DWORD PTR _pOutline$[esp+76], ebx

; 738  : 
; 739  : 	for(int i = countof(pOutline)-1; i >= 0; i--)

	mov	DWORD PTR _i$129707[esp+72], 1
$LN25@Rasterize:

; 740  : 	{
; 741  : 		tSpanBuffer::iterator it = pOutline[i]->begin();

	mov	eax, DWORD PTR _i$129707[esp+72]
	mov	esi, DWORD PTR _pOutline$[esp+eax*4+72]
	mov	ebp, DWORD PTR [esi+12]
	cmp	ebp, DWORD PTR [esi+16]
	jbe	SHORT $LN47@Rasterize
	call	__invalid_parameter_noinfo
$LN47@Rasterize:

; 742  : 		tSpanBuffer::iterator itEnd = pOutline[i]->end();

	mov	eax, DWORD PTR [esi+16]
	mov	ebx, DWORD PTR [esi]
	mov	DWORD PTR _it$129711[esp+72], ebx
	mov	DWORD PTR $T261803[esp+72], eax
	cmp	DWORD PTR [esi+12], eax
	jbe	SHORT $LN66@Rasterize
	call	__invalid_parameter_noinfo
$LN66@Rasterize:
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR _itEnd$129713[esp+72], ecx
	npad	5

; 743  : 
; 744  : 		for(; it!=itEnd; ++it)

$LL89@Rasterize:
	test	ebx, ebx
	je	SHORT $LN104@Rasterize
	cmp	ebx, DWORD PTR _itEnd$129713[esp+72]
	je	SHORT $LN103@Rasterize
$LN104@Rasterize:
	call	__invalid_parameter_noinfo
$LN103@Rasterize:
	cmp	ebp, DWORD PTR $T261803[esp+72]
	je	$LN24@Rasterize

; 745  : 		{
; 746  : 			int y = (int)(((*it).first >> 32) - 0x40000000 + ysub);

	test	ebx, ebx
	jne	$LN199@Rasterize
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN129@Rasterize:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN116@Rasterize
	call	__invalid_parameter_noinfo
$LN116@Rasterize:
	mov	eax, DWORD PTR [ebp]
	mov	edx, DWORD PTR [ebp+4]
	mov	cl, 32					; 00000020H
	call	__aullshr
	mov	edx, DWORD PTR _ysub$[esp+68]
	lea	esi, DWORD PTR [eax+edx-1073741824]

; 747  : 			int x1 = (int)(((*it).first & 0xffffffff) - 0x40000000 + xsub);

	test	ebx, ebx
	jne	$LN198@Rasterize
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN149@Rasterize:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN136@Rasterize
	call	__invalid_parameter_noinfo
$LN136@Rasterize:
	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR _xsub$[esp+68]
	lea	edx, DWORD PTR [eax+ecx-1073741824]
	mov	DWORD PTR _x1$129720[esp+72], edx

; 748  : 			int x2 = (int)(((*it).second & 0xffffffff) - 0x40000000 + xsub);

	test	ebx, ebx
	jne	SHORT $LN197@Rasterize
	call	__invalid_parameter_noinfo
$LN169@Rasterize:
	cmp	ebp, DWORD PTR [ebx+16]
	jb	SHORT $LN156@Rasterize
	call	__invalid_parameter_noinfo
$LN156@Rasterize:
	mov	ecx, DWORD PTR _xsub$[esp+68]
	mov	eax, DWORD PTR [ebp+8]
	lea	ebx, DWORD PTR [eax+ecx-1073741824]

; 749  : 
; 750  : 			if(x2 > x1)

	mov	ecx, DWORD PTR _x1$129720[esp+72]
	cmp	ebx, ecx
	mov	DWORD PTR _x2$129722[esp+72], ebx
	jle	SHORT $LN21@Rasterize

; 751  : 			{
; 752  : 				int first = x1>>3;
; 753  : 				int last = (x2-1)>>3;
; 754  : 				byte* dst = mpOverlayBuffer + 2*(mOverlayWidth*(y>>3) + first) + i;

	mov	eax, DWORD PTR _i$129707[esp+72]
	sar	esi, 3
	imul	esi, DWORD PTR [edi+116]
	sar	ecx, 3
	add	esi, ecx
	lea	edx, DWORD PTR [ebx-1]
	sar	edx, 3
	lea	eax, DWORD PTR [eax+esi*2]
	add	eax, DWORD PTR [edi+112]
	mov	DWORD PTR _last$129726[esp+72], edx

; 755  : 
; 756  : 				if(first == last)

	cmp	ecx, edx
	jne	SHORT $LN18@Rasterize

; 757  : 					*dst += x2-x1;

	sub	bl, BYTE PTR _x1$129720[esp+72]
	add	BYTE PTR [eax], bl

; 758  : 				else

	jmp	SHORT $LN21@Rasterize
$LN199@Rasterize:

; 745  : 		{
; 746  : 			int y = (int)(((*it).first >> 32) - 0x40000000 + ysub);

	mov	eax, DWORD PTR [ebx]
	jmp	$LN129@Rasterize
$LN198@Rasterize:

; 747  : 			int x1 = (int)(((*it).first & 0xffffffff) - 0x40000000 + xsub);

	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN149@Rasterize
$LN197@Rasterize:

; 748  : 			int x2 = (int)(((*it).second & 0xffffffff) - 0x40000000 + xsub);

	mov	ebx, DWORD PTR [ebx]
	jmp	SHORT $LN169@Rasterize
$LN18@Rasterize:

; 759  : 				{
; 760  : 					*dst += ((first+1)<<3) - x1;
; 761  : 					dst += 2;
; 762  : 
; 763  : 					while(++first < last)

	mov	ebx, DWORD PTR _last$129726[esp+72]
	mov	dl, cl
	add	dl, dl
	add	dl, dl
	add	dl, dl
	sub	dl, BYTE PTR _x1$129720[esp+72]
	inc	ecx
	add	dl, 8
	add	BYTE PTR [eax], dl
	add	eax, 2
	cmp	ecx, ebx
	jge	SHORT $LN15@Rasterize
	mov	edx, ebx
	sub	edx, ecx
	npad	2
$LL16@Rasterize:

; 764  : 					{
; 765  : 						*dst += 0x08;

	add	BYTE PTR [eax], 8

; 766  : 						dst += 2;

	add	eax, 2
	sub	edx, 1
	jne	SHORT $LL16@Rasterize
$LN15@Rasterize:

; 767  : 					}
; 768  : 
; 769  : 					*dst += x2 - (last<<3);

	mov	cl, BYTE PTR _x2$129722[esp+72]
	add	bl, bl
	add	bl, bl
	add	bl, bl
	sub	cl, bl
	add	BYTE PTR [eax], cl
$LN21@Rasterize:
	mov	eax, DWORD PTR _it$129711[esp+72]
	test	eax, eax
	jne	SHORT $LN196@Rasterize
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN96@Rasterize:

; 743  : 
; 744  : 		for(; it!=itEnd; ++it)

	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN83@Rasterize
	call	__invalid_parameter_noinfo
$LN83@Rasterize:
	mov	ebx, DWORD PTR _it$129711[esp+72]
	add	ebp, 16					; 00000010H
	jmp	$LL89@Rasterize
$LN196@Rasterize:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN96@Rasterize
$LN24@Rasterize:

; 738  : 
; 739  : 	for(int i = countof(pOutline)-1; i >= 0; i--)

	sub	DWORD PTR _i$129707[esp+72], 1
	jns	$LN25@Rasterize

; 770  : 				}
; 771  : 			}
; 772  : 		}
; 773  : 	}
; 774  : 
; 775  : 	// Do some gaussian blur magic
; 776  : 	if (fGaussianBlur > 0)

	fldz
	fld	QWORD PTR _fGaussianBlur$[esp+68]
	fcom	ST(1)
	fnstsw	ax
	fstp	ST(1)
	test	ah, 65					; 00000041H
	jne	$LN223@Rasterize

; 777  : 	{
; 778  : 		GaussianKernel filter(fGaussianBlur);

	sub	esp, 8
	lea	esi, DWORD PTR _filter$129734[esp+80]
	fstp	QWORD PTR [esp]
	call	??0GaussianKernel@@QAE@N@Z		; GaussianKernel::GaussianKernel
	mov	DWORD PTR __$EHRec$[esp+80], 0

; 779  : 		if (mOverlayWidth >= filter.width && mOverlayHeight >= filter.width)

	mov	ecx, DWORD PTR [edi+116]
	mov	edx, DWORD PTR _filter$129734[esp+76]
	cmp	ecx, edx
	jl	$LN13@Rasterize
	mov	eax, DWORD PTR [edi+120]
	cmp	eax, edx
	jl	$LN13@Rasterize

; 780  : 		{
; 781  : 			int pitch = mOverlayWidth*2;

	lea	ebp, DWORD PTR [ecx+ecx]

; 782  : 
; 783  : 			byte *tmp = new byte[pitch*mOverlayHeight];

	imul	eax, ebp
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	mov	ebx, eax
	add	esp, 4

; 784  : 			if(!tmp) return(false);

	test	ebx, ebx
	jne	SHORT $LN12@Rasterize
	mov	DWORD PTR __$EHRec$[esp+80], -1
	mov	eax, DWORD PTR _filter$129734[esp+72]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN190@Rasterize:
	xor	al, al

; 827  : 		}
; 828  : 	}
; 829  : 
; 830  : 	return true;
; 831  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+72]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 60					; 0000003cH
	ret	20					; 00000014H
$LN12@Rasterize:

; 785  : 
; 786  : 			int border = !mWideOutline.empty() ? 1 : 0;

	mov	eax, DWORD PTR [edi+84]
	sub	eax, DWORD PTR [edi+80]

; 787  : 
; 788  : 			byte *src = mpOverlayBuffer + border;
; 789  : 
; 790  : 			SeparableFilterX<2>(src, tmp, mOverlayWidth, mOverlayHeight, pitch, filter.kernel, filter.width, filter.divisor);

	mov	ecx, DWORD PTR _filter$129734[esp+80]
	mov	esi, DWORD PTR [edi+112]
	mov	edx, DWORD PTR _filter$129734[esp+76]
	and	eax, -16				; fffffff0H
	neg	eax
	sbb	eax, eax
	push	ecx
	mov	ecx, DWORD PTR [edi+116]
	neg	eax
	add	esi, eax
	mov	eax, DWORD PTR _filter$129734[esp+76]
	push	edx
	push	eax
	mov	eax, DWORD PTR [edi+120]
	push	ebp
	push	ecx
	push	ebx
	mov	ecx, esi
	call	??$SeparableFilterX@$01@@YAXPAE0HHHPAHHH@Z ; SeparableFilterX<2>

; 791  : 			SeparableFilterY<2>(tmp, src, mOverlayWidth, mOverlayHeight, pitch, filter.kernel, filter.width, filter.divisor);

	mov	edx, DWORD PTR _filter$129734[esp+104]
	mov	eax, DWORD PTR _filter$129734[esp+100]
	mov	ecx, DWORD PTR _filter$129734[esp+96]
	push	edx
	mov	edx, DWORD PTR [edi+120]
	push	eax
	mov	eax, DWORD PTR [edi+116]
	push	ecx
	push	ebp
	push	edx
	push	esi
	mov	edx, ebx
	call	??$SeparableFilterY@$01@@YAXPAE0HHHPAHHH@Z ; SeparableFilterY<2>

; 792  : 
; 793  : 			delete[] tmp;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 52					; 00000034H
$LN13@Rasterize:

; 794  : 		}
; 795  : 	}

	mov	DWORD PTR __$EHRec$[esp+80], -1
	mov	eax, DWORD PTR _filter$129734[esp+72]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	jmp	SHORT $LN178@Rasterize
$LN223@Rasterize:

; 770  : 				}
; 771  : 			}
; 772  : 		}
; 773  : 	}
; 774  : 
; 775  : 	// Do some gaussian blur magic
; 776  : 	if (fGaussianBlur > 0)

	fstp	ST(0)

; 794  : 		}
; 795  : 	}

$LN178@Rasterize:

; 796  : 
; 797  : 	// If we're blurring, do a 3x3 box blur
; 798  : 	// Can't do it on subpictures smaller than 3x3 pixels
; 799  : 	for (int pass = 0; pass < fBlur; pass++)

	cmp	DWORD PTR _fBlur$[esp+68], 0
	mov	DWORD PTR _pass$129767[esp+72], 0
	jle	$LN9@Rasterize
$LN11@Rasterize:

; 800  : 	{
; 801  : 		if(mOverlayWidth >= 3 && mOverlayHeight >= 3)

	mov	ecx, DWORD PTR [edi+116]
	cmp	ecx, 3
	jl	$LN10@Rasterize
	mov	eax, DWORD PTR [edi+120]
	cmp	eax, 3
	jl	$LN10@Rasterize

; 802  : 		{
; 803  : 			int pitch = mOverlayWidth*2;

	lea	esi, DWORD PTR [ecx+ecx]

; 804  : 
; 805  : 			byte* tmp = new byte[pitch*mOverlayHeight];

	imul	eax, esi
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _tmp$129773[esp+72], ebx

; 806  : 			if(!tmp) return(false);

	test	ebx, ebx
	je	$LN190@Rasterize

; 807  : 
; 808  : 			memcpy(tmp, mpOverlayBuffer, pitch*mOverlayHeight);

	mov	ecx, DWORD PTR [edi+120]
	mov	edx, DWORD PTR [edi+112]
	imul	ecx, esi
	push	ecx
	push	edx
	push	ebx
	call	_memcpy

; 809  : 
; 810  : 			int border = !mWideOutline.empty() ? 1 : 0;

	mov	edx, DWORD PTR [edi+84]
	sub	edx, DWORD PTR [edi+80]

; 811  : 
; 812  : 			// This could be done in a separated way and win some speed
; 813  : 			for(int j = 1; j < mOverlayHeight-1; j++)

	mov	eax, DWORD PTR [edi+120]
	and	edx, -16				; fffffff0H
	add	esp, 12					; 0000000cH
	neg	edx
	sbb	edx, edx
	neg	edx
	dec	eax
	cmp	eax, 1
	mov	DWORD PTR _border$129777[esp+72], edx
	mov	DWORD PTR _j$129778[esp+68], 1
	jle	$LN4@Rasterize
	lea	ecx, DWORD PTR [edx+ebx]
	mov	eax, 2
	lea	ecx, DWORD PTR [ecx+esi+2]
	sub	eax, esi
	mov	DWORD PTR tv1570[esp+68], esi
	mov	DWORD PTR tv1631[esp+72], ecx
	mov	DWORD PTR tv1661[esp+72], eax
$LN6@Rasterize:

; 814  : 			{
; 815  : 				byte* src = tmp + pitch*j + 2 + border;
; 816  : 				byte* dst = mpOverlayBuffer + pitch*j + 2 + border;

	mov	eax, DWORD PTR tv1570[esp+68]
	mov	ebx, DWORD PTR [edi+112]
	add	eax, edx
	lea	eax, DWORD PTR [eax+ebx+2]
	mov	DWORD PTR _dst$129783[esp+68], eax

; 817  : 
; 818  : 				for(int i = 1; i < mOverlayWidth-1; i++, src+=2, dst+=2)

	mov	eax, DWORD PTR [edi+116]
	mov	ebp, 1
	dec	eax
	cmp	eax, ebp
	jle	SHORT $LN5@Rasterize
	mov	edx, DWORD PTR tv1661[esp+72]
	lea	eax, DWORD PTR [edx+ecx]
	npad	6
$LL3@Rasterize:

; 819  : 				{
; 820  : 					*dst = (src[-2-pitch] + (src[-pitch]<<1) + src[+2-pitch]
; 821  : 						+ (src[-2]<<1) + (src[0]<<2) + (src[+2]<<1)
; 822  : 						+ src[-2+pitch] + (src[+pitch]<<1) + src[+2+pitch]) >> 4;

	movzx	ebx, BYTE PTR [esi+ecx]
	movzx	edx, BYTE PTR [eax+esi]
	add	edx, ebx
	movzx	ebx, BYTE PTR [esi+eax-4]
	add	edx, ebx
	movzx	ebx, BYTE PTR [eax-2]
	add	edx, ebx
	movzx	ebx, BYTE PTR [ecx]
	lea	edx, DWORD PTR [edx+ebx*2]
	movzx	ebx, BYTE PTR [esi+ecx+2]
	lea	ebx, DWORD PTR [ebx+edx*2]
	movzx	edx, BYTE PTR [esi+ecx-2]
	add	ebx, edx
	movzx	edx, BYTE PTR [eax-4]
	add	ebx, edx
	movzx	edx, BYTE PTR [eax]
	add	ebx, edx
	mov	edx, DWORD PTR _dst$129783[esp+68]
	sar	ebx, 4
	mov	BYTE PTR [edx], bl
	add	edx, 2
	mov	DWORD PTR _dst$129783[esp+68], edx
	mov	edx, DWORD PTR [edi+116]
	inc	ebp
	dec	edx
	add	ecx, 2
	add	eax, 2
	cmp	ebp, edx
	jl	SHORT $LL3@Rasterize
	mov	edx, DWORD PTR _border$129777[esp+72]
	mov	ecx, DWORD PTR tv1631[esp+72]
$LN5@Rasterize:
	mov	eax, DWORD PTR _j$129778[esp+68]
	mov	ebx, DWORD PTR [edi+120]
	add	DWORD PTR tv1570[esp+68], esi
	inc	eax
	add	ecx, esi
	dec	ebx
	cmp	eax, ebx
	mov	DWORD PTR _j$129778[esp+68], eax
	mov	DWORD PTR tv1631[esp+72], ecx
	jl	$LN6@Rasterize

; 811  : 
; 812  : 			// This could be done in a separated way and win some speed
; 813  : 			for(int j = 1; j < mOverlayHeight-1; j++)

	mov	ebx, DWORD PTR _tmp$129773[esp+72]
$LN4@Rasterize:

; 823  : 				}
; 824  : 			}
; 825  : 
; 826  : 			delete [] tmp;

	push	ebx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN10@Rasterize:
	mov	eax, DWORD PTR _pass$129767[esp+72]
	inc	eax
	cmp	eax, DWORD PTR _fBlur$[esp+68]
	mov	DWORD PTR _pass$129767[esp+72], eax
	jl	$LN11@Rasterize

; 806  : 			if(!tmp) return(false);

	jmp	SHORT $LN9@Rasterize
$LN30@Rasterize:

; 692  : 	{
; 693  : 		mOverlayWidth = mOverlayHeight = 0;

	mov	DWORD PTR [edi+120], ebp
	mov	DWORD PTR [edi+116], ebp
$LN9@Rasterize:

; 827  : 		}
; 828  : 	}
; 829  : 
; 830  : 	return true;
; 831  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+72]
	pop	esi
	pop	ebp
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 60					; 0000003cH
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Rasterize@Rasterizer@@QAE_NHHHN@Z$0:
	lea	eax, DWORD PTR _filter$129734[ebp]
	jmp	??1GaussianKernel@@QAE@XZ		; GaussianKernel::~GaussianKernel
__ehhandler$?Rasterize@Rasterizer@@QAE_NHHHN@Z:
	mov	eax, OFFSET __ehfuncinfo$?Rasterize@Rasterizer@@QAE_NHHHN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Rasterize@Rasterizer@@QAE_NHHHN@Z ENDP			; Rasterizer::Rasterize
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 109  : 		{	// destroy the object

	push	esi
	mov	esi, ecx

; 110  : 		}

	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN21@length_err
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN21@length_err:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	BYTE PTR [esi+16], al
	mov	ecx, esi
	pop	esi
	jmp	??1exception@std@@UAE@XZ		; std::exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z
_TEXT	SEGMENT
$T290226 = -4						; size = 1
__Last$ = 8						; size = 4
__Cat$290229 = 12					; size = 1
__Dest$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z PROC ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::_Undefined_move_tag>, COMDAT
; __First$ = edx

; 204  : 	{	// move defaults to copy if there is not a more effecient way

	push	ecx

; 205  : 	return _STDEXT unchecked_uninitialized_copy(_First, _Last, _Dest, _Al);

	mov	ecx, DWORD PTR __Cat$290229[esp]
	mov	BYTE PTR $T290226[esp+4], 0
	mov	eax, DWORD PTR $T290226[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 206  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Uninit_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@U_Undefined_move_tag@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Undefined_move_tag@0@U_Range_checked_iterator_tag@0@@Z ENDP ; std::_Uninit_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> >,std::_Undefined_move_tag>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unchecked_uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z
_TEXT	SEGMENT
$T290325 = -4						; size = 1
__Last$ = 8						; size = 4
__Cat$290328 = 12					; size = 1
__Dest$ = 12						; size = 4
??$_Unchecked_uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT
; __First$ = edx

; 849  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 850  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 851  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$290328[esp]
	mov	BYTE PTR $T290325[esp+4], 0
	mov	eax, DWORD PTR $T290325[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 852  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Unchecked_uninitialized_move@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Unchecked_uninitialized_move@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z
_TEXT	SEGMENT
$T290437 = -4						; size = 1
__First$ = 8						; size = 8
__Last$ = 16						; size = 8
__Cat$290440 = 24					; size = 1
__Dest$ = 24						; size = 4
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z PROC ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 849  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ecx

; 850  : 		return (_STD _Uninit_move(_CHECKED_BASE(_First), _CHECKED_BASE(_Last), _Dest, _Al,
; 851  : 			_STD _Move_cat(_Dest), _STD _Range_checked_iterator_tag()));

	mov	ecx, DWORD PTR __Cat$290440[esp]
	mov	edx, DWORD PTR __First$[esp+4]
	mov	BYTE PTR $T290437[esp+4], 0
	mov	eax, DWORD PTR $T290437[esp+4]
	push	eax
	mov	eax, DWORD PTR __Dest$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+16]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 852  : 	}

	add	esp, 16					; 00000010H
	ret	0
??$_Unchecked_uninitialized_move@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@PAU?$pair@_K_K@2@V?$allocator@U?$pair@_K_K@std@@@2@@stdext@@YAPAU?$pair@_K_K@std@@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0PAU12@AAV?$allocator@U?$pair@_K_K@std@@@2@@Z ENDP ; stdext::_Unchecked_uninitialized_move<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z
_TEXT	SEGMENT
$T290574 = -4						; size = 1
__Last$ = 8						; size = 4
__Cat$290577 = 12					; size = 1
__Ptr$ = 12						; size = 4
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>, COMDAT
; __First$ = edx

; 1150 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1151 : 		{	// move initializing [_First, _Last), using allocator
; 1152 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1153 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$290577[esp]
	mov	BYTE PTR $T290574[esp+4], 0
	mov	eax, DWORD PTR $T290574[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+12]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1154 : 		}

	add	esp, 16					; 00000010H
	ret	8
??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$_Umove@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z
_TEXT	SEGMENT
$T290730 = -4						; size = 1
__Cat$290733 = 8					; size = 1
__Ptr$ = 8						; size = 4
__First$ = 12						; size = 8
__Last$ = 20						; size = 8
??$_Umove@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >, COMDAT

; 1150 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ecx

; 1151 : 		{	// move initializing [_First, _Last), using allocator
; 1152 : 		return (_STDEXT _Unchecked_uninitialized_move(_First, _Last,
; 1153 : 			_Ptr, this->_Alval));

	mov	ecx, DWORD PTR __Cat$290733[esp]
	mov	edx, DWORD PTR __First$[esp+4]
	mov	BYTE PTR $T290730[esp+4], 0
	mov	eax, DWORD PTR $T290730[esp+4]
	push	eax
	mov	eax, DWORD PTR __Ptr$[esp+4]
	push	ecx
	push	edx
	mov	edx, DWORD PTR __Last$[esp+16]
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1154 : 		}

	add	esp, 16					; 00000010H
	ret	20					; 00000014H
??$_Umove@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@V?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@1@0PAU21@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > > >
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC			; std::length_error::length_error, COMDAT
; _this$ = ecx
	mov	eax, DWORD PTR ___that$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV01@@Z
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@
	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__First_arg$ = 16					; size = 8
__Last_arg$ = 24					; size = 8
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase, COMDAT

; 1033 : 		{	// erase [_First, _Last)

	push	ebx
	mov	ebx, DWORD PTR _this$[esp]
	push	ebp
	mov	ebp, DWORD PTR ___$ReturnUdt$[esp+4]
	push	esi
	push	edi

; 1034 : 		iterator _First = _Make_iter(_First_arg);

	mov	DWORD PTR [ebp], 0
	test	ebx, ebx
	je	SHORT $LN11@erase@2
	mov	eax, DWORD PTR __First_arg$[esp+16]
	cmp	DWORD PTR [ebx+12], eax
	ja	SHORT $LN11@erase@2
	cmp	eax, DWORD PTR [ebx+16]
	jbe	SHORT $LN10@erase@2
$LN11@erase@2:
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR __First_arg$[esp+16]
$LN10@erase@2:

; 1035 : 		iterator _Last = _Make_iter(_Last_arg);

	mov	esi, DWORD PTR __Last_arg$[esp+16]
	mov	ecx, DWORD PTR [ebx]
	mov	DWORD PTR [ebp], ecx
	mov	DWORD PTR [ebp+4], eax
	cmp	DWORD PTR [ebx+12], esi
	ja	SHORT $LN30@erase@2
	cmp	esi, DWORD PTR [ebx+16]
	jbe	SHORT $LN29@erase@2
$LN30@erase@2:
	call	__invalid_parameter_noinfo
	mov	esi, DWORD PTR __Last_arg$[esp+16]
$LN29@erase@2:

; 1036 : 
; 1037 : 		if (_First != _Last)

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN47@erase@2
	cmp	eax, ecx
	je	SHORT $LN46@erase@2
$LN47@erase@2:
	call	__invalid_parameter_noinfo
$LN46@erase@2:
	mov	ecx, DWORD PTR [ebp+4]
	cmp	ecx, esi
	je	SHORT $LN82@erase@2

; 1038 : 			{	// worth doing, copy down over hole
; 1039 : 
; 1040 :  #if _HAS_ITERATOR_DEBUGGING
; 1041 : 			if (_Last < _First || _First._Mycont != this
; 1042 : 				|| _First._Myptr < _Myfirst || _Mylast < _Last._Myptr)
; 1043 : 				_DEBUG_ERROR("vector erase iterator outside range");
; 1044 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1045 : 				_VEC_ITER_BASE(_First));
; 1046 : 			_Orphan_range(_First._Myptr, _Mylast);
; 1047 : 
; 1048 :  #else /* _HAS_ITERATOR_DEBUGGING */
; 1049 : 			pointer _Ptr = _STDEXT unchecked_copy(_VEC_ITER_BASE(_Last), _Mylast,
; 1050 : 				_VEC_ITER_BASE(_First));

	mov	edi, DWORD PTR [ebx+16]
	mov	edx, edi
	sub	edx, esi
	sar	edx, 4
	shl	edx, 4
	add	edx, ecx
	mov	eax, esi
	cmp	esi, edi
	je	SHORT $LN75@erase@2
	sub	ecx, esi
	npad	3
$LL77@erase@2:
	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx+eax], esi
	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+eax+4], esi
	mov	esi, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+eax+8], esi
	mov	esi, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+eax+12], esi
	add	eax, 16					; 00000010H
	cmp	eax, edi
	jne	SHORT $LL77@erase@2
$LN75@erase@2:

; 1051 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1052 : 
; 1053 : 			_Destroy(_Ptr, _Mylast);
; 1054 : 			_Mylast = _Ptr;

	mov	DWORD PTR [ebx+16], edx
$LN82@erase@2:

; 1055 : 			}
; 1056 : #if _HAS_ITERATOR_DEBUGGING
; 1057 :         return (iterator(_First._Myptr, this));
; 1058 : #else
; 1059 : 		return (_First);
; 1060 : #endif
; 1061 : 		}

	pop	edi
	pop	esi
	mov	eax, ebp
	pop	ebp
	pop	ebx
	ret	24					; 00000018H
?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV01@H@Z PROC ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++, COMDAT
; _this$ = esi
; ___$ReturnUdt$ = edi

; 355  : 		_Myt _Tmp = *this;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], ecx

; 356  : 		++*this;

	test	eax, eax
	jne	SHORT $LN23@operator@23
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN19@operator@23
$LN23@operator@23:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN20@operator@23
$LN19@operator@23:
	xor	eax, eax
$LN20@operator@23:
	mov	edx, DWORD PTR [esi+4]
	cmp	edx, DWORD PTR [eax+16]
	jb	SHORT $LN24@operator@23
	call	__invalid_parameter_noinfo
$LN24@operator@23:
	add	DWORD PTR [esi+4], 16			; 00000010H

; 357  : 		return (_Tmp);

	mov	eax, edi

; 358  : 		}

	ret	0
??E?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV01@H@Z ENDP ; std::_Vector_iterator<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator++
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T291117 = -12						; size = 8
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear, COMDAT
; _this$ = esi

; 1064 : 		{	// erase all

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp

; 1065 : 		erase(begin(), end());

	mov	ebp, DWORD PTR [esi+16]
	push	edi
	cmp	DWORD PTR [esi+12], ebp
	jbe	SHORT $LN9@clear@2
	call	__invalid_parameter_noinfo
$LN9@clear@2:
	mov	edi, DWORD PTR [esi+12]
	mov	ebx, DWORD PTR [esi]
	cmp	edi, DWORD PTR [esi+16]
	jbe	SHORT $LN28@clear@2
	call	__invalid_parameter_noinfo
$LN28@clear@2:
	mov	eax, DWORD PTR [esi]
	push	ebp
	push	ebx
	push	edi
	push	eax
	lea	eax, DWORD PTR $T291117[esp+44]
	push	eax
	push	esi
	call	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase

; 1066 : 		}

	pop	edi
	pop	ebp
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
?clear@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC			; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET ??_7logic_error@std@@6B@
	cmp	DWORD PTR [esi+36], 16			; 00000010H
	jb	SHORT $LN24@scalar@4
	mov	eax, DWORD PTR [esi+16]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN24@scalar@4:
	xor	eax, eax
	mov	DWORD PTR [esi+36], 15			; 0000000fH
	mov	DWORD PTR [esi+32], eax
	mov	ecx, esi
	mov	BYTE PTR [esi+16], al
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN34@scalar@4
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN34@scalar@4:
	mov	eax, esi
	pop	esi
	ret	4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from message string

	mov	eax, DWORD PTR __Message$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	mov	DWORD PTR [esi], OFFSET ??_7length_error@std@@6B@

; 106  : 		}

	mov	eax, esi
	pop	esi
	ret	4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
_TEXT	SEGMENT
$T310212 = -84						; size = 28
$T310211 = -56						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1257 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH

; 1258 : 		_THROW(length_error, "vector<T> too long");

	push	18					; 00000012H
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T310212[esp+96]
	mov	DWORD PTR $T310212[esp+120], 15		; 0000000fH
	mov	DWORD PTR $T310212[esp+116], 0
	mov	BYTE PTR $T310212[esp+100], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	eax, DWORD PTR $T310212[esp+88]
	push	eax
	lea	ecx, DWORD PTR $T310211[esp+92]
	mov	DWORD PTR __$EHRec$[esp+100], 0
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T310211[esp+92]
	push	ecx
	mov	DWORD PTR $T310211[esp+96], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN45@Xlen:
$LN44@Xlen:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T310212[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 8
__Count$ = 16						; size = 4
__Tmp$132640 = 20					; size = 4
__Tmp$132630 = 20					; size = 4
__Val$ = 20						; size = 4
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z PROC ; std::vector<int,std::allocator<int> >::_Insert_n, COMDAT
; _this$ = ecx

; 1158 : 		{	// insert _Count * _Val at _Where

	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 1159 : 
; 1160 :  #if _HAS_ITERATOR_DEBUGGING
; 1161 : 		if (_Where._Mycont != this
; 1162 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1163 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1164 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1165 : 
; 1166 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR [esi+12]
	push	edi
	test	ecx, ecx
	jne	SHORT $LN27@Insert_n
	xor	ebp, ebp
	jmp	SHORT $LN28@Insert_n
$LN27@Insert_n:
	mov	ebp, DWORD PTR [esi+20]
	sub	ebp, ecx
	sar	ebp, 2
$LN28@Insert_n:

; 1167 : 
; 1168 : 		if (_Count == 0)

	mov	edi, DWORD PTR __Count$[esp+12]
	test	edi, edi
	je	$LN1@Insert_n

; 1169 : 			;
; 1170 : 		else if (max_size() - size() < _Count)

	mov	ebx, DWORD PTR [esi+16]
	mov	eax, ebx
	sub	eax, ecx
	sar	eax, 2
	mov	ecx, 1073741823				; 3fffffffH
	sub	ecx, eax
	cmp	ecx, edi
	jae	SHORT $LN10@Insert_n

; 1171 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN60@Insert_n:
$LN10@Insert_n:

; 1172 : 		else if (_Capacity < size() + _Count)

	lea	ecx, DWORD PTR [eax+edi]
	cmp	ebp, ecx
	jae	$LN8@Insert_n

; 1173 : 			{	// not enough room, reallocate
; 1174 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1175 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ebp
	shr	eax, 1
	mov	edx, 1073741823				; 3fffffffH
	sub	edx, eax
	cmp	edx, ebp
	jae	SHORT $LN15@Insert_n
	xor	ebp, ebp
	jmp	SHORT $LN16@Insert_n
$LN15@Insert_n:
	add	ebp, eax
$LN16@Insert_n:

; 1176 : 			if (_Capacity < size() + _Count)

	cmp	ebp, ecx
	jae	SHORT $LN7@Insert_n

; 1177 : 				_Capacity = size() + _Count;

	mov	ebp, ecx
$LN7@Insert_n:

; 1178 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	push	0
	push	ebp
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>

; 1179 : 			pointer _Ptr = _Newvec;
; 1180 : 
; 1181 : 			_TRY_BEGIN
; 1182 : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 1183 : 				_Newvec);	// copy prefix

	mov	ecx, DWORD PTR [esi+12]
	add	esp, 8
	mov	ebx, eax
	mov	eax, DWORD PTR __Where$[esp+16]
	push	ebx
	push	eax
	push	ecx
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1184 : 			_Ptr = _Ufill(_Ptr, _Count, _Val);	// add new stuff

	mov	edx, DWORD PTR __Val$[esp+12]
	push	edx
	push	edi
	push	eax
	mov	ecx, esi
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1185 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	ecx, DWORD PTR __Where$[esp+16]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	push	eax
	push	ecx
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1186 : 			_CATCH_ALL
; 1187 : 			_Destroy(_Newvec, _Ptr);
; 1188 : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 1189 : 			_RERAISE;
; 1190 : 			_CATCH_END
; 1191 : 
; 1192 : 			_Count += size();

	mov	eax, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+16]
	sub	edx, eax
	sar	edx, 2
	add	edi, edx

; 1193 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN55@Insert_n

; 1194 : 				{	// destroy and deallocate old array
; 1195 : 				_Destroy(_Myfirst, _Mylast);
; 1196 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN55@Insert_n:

; 1197 : 				}
; 1198 : 
; 1199 :  #if _HAS_ITERATOR_DEBUGGING
; 1200 : 			this->_Orphan_all();
; 1201 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1202 : 
; 1203 : 			_Myend = _Newvec + _Capacity;

	lea	eax, DWORD PTR [ebx+ebp*4]

; 1204 : 			_Mylast = _Newvec + _Count;

	lea	ecx, DWORD PTR [ebx+edi*4]
	mov	DWORD PTR [esi+20], eax
	mov	DWORD PTR [esi+16], ecx

; 1205 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+12], ebx

; 1247 : 			}
; 1248 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	16					; 00000010H
$LN8@Insert_n:

; 1206 : 			}
; 1207 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	eax, DWORD PTR __Where$[esp+16]

; 1208 : 			{	// new stuff spills off end
; 1209 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	ecx, DWORD PTR __Val$[esp+12]
	mov	edx, ebx
	sub	edx, eax
	sar	edx, 2
	cmp	edx, edi
	mov	edx, DWORD PTR [ecx]

; 1210 : 
; 1211 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1212 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ebp, DWORD PTR [edi*4]
	mov	DWORD PTR __Tmp$132630[esp+12], edx
	jae	SHORT $LN3@Insert_n
	lea	ecx, DWORD PTR [eax+ebp]
	push	ecx
	push	ebx
	push	eax
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1213 : 
; 1214 : 			_TRY_BEGIN
; 1215 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1216 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, eax
	sub	ecx, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$132630[esp+12]
	sar	ecx, 2
	push	edx
	sub	edi, ecx
	push	edi
	push	eax
	mov	ecx, esi
	call	?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIABH@Z ; std::vector<int,std::allocator<int> >::_Ufill

; 1217 : 			_CATCH_ALL
; 1218 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1219 : 			_RERAISE;
; 1220 : 			_CATCH_END
; 1221 : 
; 1222 : 			_Mylast += _Count;

	add	DWORD PTR [esi+16], ebp
	mov	esi, DWORD PTR [esi+16]

; 1223 : 
; 1224 :  #if _HAS_ITERATOR_DEBUGGING
; 1225 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1226 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1227 : 
; 1228 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1229 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Where$[esp+16]
	lea	edx, DWORD PTR __Tmp$132630[esp+12]
	push	edx
	sub	esi, ebp
	push	esi
	push	eax
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 12					; 0000000cH

; 1247 : 			}
; 1248 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	16					; 00000010H
$LN3@Insert_n:

; 1230 : 			}
; 1231 : 		else
; 1232 : 			{	// new stuff can all be assigned
; 1233 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence
; 1234 : 
; 1235 : 			pointer _Oldend = _Mylast;
; 1236 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1237 : 				_Mylast);	// copy suffix

	push	ebx
	mov	edi, ebx
	push	ebx
	sub	edi, ebp
	push	edi
	mov	ecx, esi
	call	??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int *>

; 1238 : 
; 1239 :  #if _HAS_ITERATOR_DEBUGGING
; 1240 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1241 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1242 : 
; 1243 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1244 : 				_Oldend);	// copy hole

	push	ebx
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR __Where$[esp+20]
	push	edi
	push	eax
	call	??$_Unchecked_move_backward@PAHPAH@stdext@@YAPAHPAH00@Z ; stdext::_Unchecked_move_backward<int *,int *>

; 1245 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1246 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[esp+28]
	lea	ecx, DWORD PTR __Tmp$132640[esp+24]
	push	ecx
	add	ebp, eax
	push	ebp
	push	eax
	call	??$fill@PAHH@std@@YAXPAH0ABH@Z		; std::fill<int *,int>
	add	esp, 24					; 00000018H
$LN1@Insert_n:

; 1247 : 			}
; 1248 : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	16					; 00000010H
$LN59@Insert_n:
?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ENDP ; std::vector<int,std::allocator<int> >::_Insert_n
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z PROC	; std::vector<int,std::allocator<int> >::_Buy, COMDAT
; _this$ = ecx

; 1107 : 		{	// allocate array with _Capacity elements

	push	esi

; 1108 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

	xor	eax, eax
	push	edi

; 1109 : 		if (_Capacity == 0)

	mov	edi, DWORD PTR __Capacity$[esp+4]
	mov	esi, ecx
	mov	DWORD PTR [esi+12], eax
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], eax
	cmp	edi, eax
	jne	SHORT $LN4@Buy

; 1110 : 			return (false);

	xor	al, al

; 1118 : 			}
; 1119 : 		return (true);
; 1120 : 		}

	pop	edi
	pop	esi
	ret	4
$LN4@Buy:

; 1111 : 		else if (max_size() < _Capacity)

	cmp	edi, 1073741823				; 3fffffffH
	jbe	SHORT $LN2@Buy

; 1112 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@KAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN16@Buy:
$LN2@Buy:

; 1113 : 		else
; 1114 : 			{	// nonempty array, allocate storage
; 1115 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	push	eax
	push	edi
	call	??$_Allocate@H@std@@YAPAHIPAH@Z		; std::_Allocate<int>
	mov	DWORD PTR [esi+12], eax

; 1116 : 			_Mylast = _Myfirst;

	mov	DWORD PTR [esi+16], eax
	add	esp, 8

; 1117 : 			_Myend = _Myfirst + _Capacity;

	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi+20], eax

; 1118 : 			}
; 1119 : 		return (true);
; 1120 : 		}

	pop	edi
	mov	al, 1
	pop	esi
	ret	4
$LN15@Buy:
?_Buy@?$vector@HV?$allocator@H@std@@@std@@IAE_NI@Z ENDP	; std::vector<int,std::allocator<int> >::_Buy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z
_TEXT	SEGMENT
__Tmp$310763 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 8
__Val$ = 20						; size = 4
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z PROC ; std::vector<int,std::allocator<int> >::insert, COMDAT
; _this$ = ecx

; 875  : 		{	// insert _Val at _Where

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	mov	esi, ecx

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [esi+16]
	push	edi
	mov	edi, DWORD PTR [esi+12]
	mov	ecx, eax
	sub	ecx, edi
	test	ecx, -4					; fffffffcH
	jne	SHORT $LN3@insert
	xor	ebx, ebx
	jmp	SHORT $LN4@insert
$LN3@insert:
	cmp	edi, eax
	jbe	SHORT $LN13@insert
	call	__invalid_parameter_noinfo
$LN13@insert:
	mov	ecx, DWORD PTR __Where$[ebp]
	mov	eax, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN29@insert
	cmp	ecx, eax
	je	SHORT $LN28@insert
$LN29@insert:
	call	__invalid_parameter_noinfo
$LN28@insert:
	mov	ebx, DWORD PTR __Where$[ebp+4]
	sub	ebx, edi
	sar	ebx, 2
$LN4@insert:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR __Where$[ebp+4]
	mov	ecx, DWORD PTR __Where$[ebp]
	push	edx
	push	1
	push	eax
	push	ecx
	mov	ecx, esi
	call	?_Insert_n@?$vector@HV?$allocator@H@std@@@std@@IAEXV?$_Vector_const_iterator@HV?$allocator@H@std@@@2@IABH@Z ; std::vector<int,std::allocator<int> >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	edi, DWORD PTR [esi+12]
	cmp	edi, DWORD PTR [esi+16]
	jbe	SHORT $LN43@insert
	call	__invalid_parameter_noinfo
$LN43@insert:
	mov	esi, DWORD PTR [esi]
	mov	DWORD PTR __Tmp$310763[esp+24], esi
	mov	DWORD PTR __Tmp$310763[esp+28], edi
	test	esi, esi
	jne	SHORT $LN85@insert
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN76@insert:
	lea	edi, DWORD PTR [edi+ebx*4]
	cmp	edi, DWORD PTR [eax+16]
	ja	SHORT $LN63@insert
	test	esi, esi
	je	SHORT $LN81@insert
	mov	esi, DWORD PTR [esi]
	jmp	SHORT $LN82@insert
$LN85@insert:
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN76@insert
$LN81@insert:
	xor	esi, esi
$LN82@insert:
	cmp	edi, DWORD PTR [esi+12]
	jae	SHORT $LN62@insert
$LN63@insert:
	call	__invalid_parameter_noinfo
$LN62@insert:
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Tmp$310763[esp+24]
	mov	DWORD PTR [eax+4], edi

; 879  : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR [eax], edx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ENDP ; std::vector<int,std::allocator<int> >::insert
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\stdexcept
xdata$x	SEGMENT
__unwindtable$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ$0
__ehfuncinfo$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ
_TEXT	SEGMENT
$T310768 = -84						; size = 28
$T310767 = -56						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen, COMDAT

; 1257 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	push	-1
	push	__ehhandler$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH

; 1258 : 		_THROW(length_error, "vector<T> too long");

	push	18					; 00000012H
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	lea	ecx, DWORD PTR $T310768[esp+96]
	mov	DWORD PTR $T310768[esp+120], 15		; 0000000fH
	mov	DWORD PTR $T310768[esp+116], 0
	mov	BYTE PTR $T310768[esp+100], 0
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	eax, DWORD PTR $T310768[esp+88]
	push	eax
	lea	ecx, DWORD PTR $T310767[esp+92]
	mov	DWORD PTR __$EHRec$[esp+100], 0
	call	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
	push	OFFSET __TI3?AVlength_error@std@@
	lea	ecx, DWORD PTR $T310767[esp+92]
	push	ecx
	mov	DWORD PTR $T310767[esp+96], OFFSET ??_7length_error@std@@6B@
	call	__CxxThrowException@8
$LN45@Xlen@2:
$LN44@Xlen@2:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ$0:
	lea	ecx, DWORD PTR $T310768[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
; Function compile flags: /Ogtpy
;	COMDAT ?_Buy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE_NI@Z
_TEXT	SEGMENT
?_Buy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE_NI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Buy, COMDAT
; _this$ = edi
; __Capacity$ = eax

; 1107 : 		{	// allocate array with _Capacity elements

	push	esi
	mov	esi, eax

; 1108 : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 1109 : 		if (_Capacity == 0)
; 1110 : 			return (false);
; 1111 : 		else if (max_size() < _Capacity)

	cmp	esi, 268435455				; 0fffffffH
	jbe	SHORT $LN2@Buy@2

; 1112 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
$LN18@Buy@2:
$LN2@Buy@2:

; 1113 : 		else
; 1114 : 			{	// nonempty array, allocate storage
; 1115 : 			_Myfirst = this->_Alval.allocate(_Capacity);

	mov	ecx, esi
	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate

; 1116 : 			_Mylast = _Myfirst;
; 1117 : 			_Myend = _Myfirst + _Capacity;

	shl	esi, 4
	add	esi, eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], esi

; 1118 : 			}
; 1119 : 		return (true);

	mov	al, 1

; 1120 : 		}

	pop	esi
	ret	0
$LN17@Buy@2:
?_Buy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE_NI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Buy
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T311113 = -8						; size = 8
__Right$ = 8						; size = 4
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=, COMDAT
; _this$ = eax

; 563  : 		{	// assign _Right

	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __Right$[esp+12]
	push	esi
	push	edi
	mov	edi, eax

; 564  : 		if (this != &_Right)

	cmp	edi, ebp
	je	$LN1@operator@24

; 565  : 			{	// worth doing
; 566  : 
; 567  :  #if _HAS_ITERATOR_DEBUGGING
; 568  : 			this->_Orphan_all();
; 569  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 570  : 
; 571  : 			if (_Right.size() == 0)

	mov	esi, DWORD PTR [ebp+16]
	mov	ebx, DWORD PTR [ebp+12]
	mov	ecx, esi
	sub	ecx, ebx
	sar	ecx, 4
	test	ecx, ecx
	jne	SHORT $LN8@operator@24

; 572  : 				clear();	// new sequence empty, erase existing sequence

	mov	ebp, DWORD PTR [edi+16]
	cmp	DWORD PTR [edi+12], ebp
	jbe	SHORT $LN22@operator@24
	call	__invalid_parameter_noinfo
$LN22@operator@24:
	mov	esi, DWORD PTR [edi+12]
	mov	ebx, DWORD PTR [edi]
	cmp	esi, DWORD PTR [edi+16]
	jbe	SHORT $LN41@operator@24
	call	__invalid_parameter_noinfo
$LN41@operator@24:
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	ebx
	push	esi
	push	eax
	lea	eax, DWORD PTR $T311113[esp+40]
	push	eax
	push	edi
	call	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, edi

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN8@operator@24:

; 573  : 			else if (_Right.size() <= size())

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi+16]
	sub	eax, edx
	sar	eax, 4
	cmp	ecx, eax
	ja	SHORT $LN6@operator@24

; 574  : 				{	// enough elements, copy new and destroy old
; 575  : 				pointer _Ptr = _STDEXT unchecked_copy(_Right._Myfirst, _Right._Mylast,
; 576  : 					_Myfirst);	// copy new

	mov	ecx, ebx
	call	??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ; stdext::unchecked_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>

; 577  : 				_Destroy(_Ptr, _Mylast);	// destroy old
; 578  : 				_Mylast = _Myfirst + _Right.size();

	mov	ecx, DWORD PTR [ebp+16]
	sub	ecx, DWORD PTR [ebp+12]

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, edi
	sar	ecx, 4
	shl	ecx, 4
	add	ecx, DWORD PTR [edi+12]
	mov	DWORD PTR [edi+16], ecx

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN6@operator@24:

; 579  : 				}
; 580  : 			else if (_Right.size() <= capacity())

	xor	ebx, ebx
	cmp	edx, ebx
	jne	SHORT $LN64@operator@24
	xor	esi, esi
	jmp	SHORT $LN65@operator@24
$LN64@operator@24:
	mov	esi, DWORD PTR [edi+20]
	sub	esi, edx
	sar	esi, 4
$LN65@operator@24:
	cmp	ecx, esi
	ja	SHORT $LN4@operator@24

; 581  : 				{	// enough room, copy and construct new
; 582  : 				pointer _Ptr = _Right._Myfirst + size();

	mov	ecx, DWORD PTR [ebp+12]
	shl	eax, 4
	add	eax, ecx
	mov	esi, eax

; 583  : 				_STDEXT unchecked_copy(_Right._Myfirst, _Ptr, _Myfirst);

	call	??$unchecked_copy@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ; stdext::unchecked_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>

; 584  : 				_Mylast = _Ucopy(_Ptr, _Right._Mylast, _Mylast);

	mov	edx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [ebp+16]
	push	edx
	push	eax
	mov	edx, esi

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	call	??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [edi+16], eax

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, edi

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
$LN4@operator@24:

; 585  : 				}
; 586  : 			else
; 587  : 				{	// not enough room, allocate new array and construct new
; 588  : 				if (_Myfirst != 0)

	cmp	edx, ebx
	je	SHORT $LN68@operator@24

; 589  : 					{	// discard old array
; 590  : 					_Destroy(_Myfirst, _Mylast);
; 591  : 					this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN68@operator@24:

; 592  : 					}
; 593  : 				if (_Buy(_Right.size()))

	mov	eax, DWORD PTR [ebp+16]
	sub	eax, DWORD PTR [ebp+12]
	mov	DWORD PTR [edi+12], ebx
	sar	eax, 4
	mov	DWORD PTR [edi+16], ebx
	mov	DWORD PTR [edi+20], ebx
	cmp	eax, ebx
	je	SHORT $LN84@operator@24
	call	?_Buy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAE_NI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Buy
	test	al, al
	je	SHORT $LN84@operator@24

; 594  : 					_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 595  : 						_Myfirst);

	mov	ecx, DWORD PTR [edi+12]
	mov	edx, DWORD PTR [ebp+16]
	push	ecx
	push	edx
	mov	edx, DWORD PTR [ebp+12]
	call	??$_Ucopy@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Ucopy<std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [edi+16], eax
$LN84@operator@24:

; 596  : 				}
; 597  : 			}
; 598  : 		return (*this);

	mov	eax, edi
$LN1@operator@24:

; 599  : 		}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	4
??4?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::operator=
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__catchsym$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$5
__ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
xdata$x	ENDS
;	COMDAT ??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T311396 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$311540 = 8					; size = 1
_this$ = 8						; size = 4
$T311536 = 12						; size = 1
__Right$ = 12						; size = 4
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 500  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	ebx
	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _this$[ebp]
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	4
	call	??2@YAPAXI@Z				; operator new
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, ecx
	je	SHORT $LN19@vector@3
	mov	DWORD PTR [eax], edi
	jmp	SHORT $LN20@vector@3
$LN19@vector@3:
	xor	eax, eax
$LN20@vector@3:
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR __$EHRec$[ebp+12], ecx

; 501  : 		if (_Buy(_Right.size()))

	mov	esi, DWORD PTR [ebx+16]
	sub	esi, DWORD PTR [ebx+12]
	mov	DWORD PTR [edi+12], ecx
	sar	esi, 4
	mov	DWORD PTR [edi+16], ecx
	mov	DWORD PTR [edi+20], ecx
	cmp	esi, ecx
	je	SHORT $LN8@vector@3
	cmp	esi, 268435455				; 0fffffffH
	jbe	SHORT $LN46@vector@3
	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
$LN113@vector@3:
$LN46@vector@3:
	mov	ecx, esi
	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate
	shl	esi, 4
	add	esi, eax
	mov	DWORD PTR [edi+12], eax
	mov	DWORD PTR [edi+16], eax
	mov	DWORD PTR [edi+20], esi

; 502  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 503  : 			_Mylast = _Ucopy(_Right.begin(), _Right.end(), _Myfirst);

	mov	eax, DWORD PTR [ebx+16]
	mov	DWORD PTR $T311396[ebp], eax
	cmp	DWORD PTR [ebx+12], eax
	jbe	SHORT $LN61@vector@3
	call	__invalid_parameter_noinfo
$LN61@vector@3:
	mov	esi, DWORD PTR [ebx+12]
	cmp	esi, DWORD PTR [ebx+16]
	jbe	SHORT $LN78@vector@3
	call	__invalid_parameter_noinfo
$LN78@vector@3:
	mov	edx, DWORD PTR __Cat$311540[ebp]
	mov	eax, DWORD PTR [edi+12]
	mov	BYTE PTR $T311536[ebp], 0
	mov	ecx, DWORD PTR $T311536[ebp]
	push	ecx
	push	edx
	mov	edx, DWORD PTR $T311396[ebp]
	push	esi
	call	??$_Uninit_copy@PBU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PBU10@0PAU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> const *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+16], eax
$LN8@vector@3:

; 507  : 			_CATCH_END
; 508  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
__catch$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$0:

; 504  : 			_CATCH_ALL
; 505  : 			_Tidy();

	mov	esi, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Tidy

; 506  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN114@vector@3:
$LN112@vector@3:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z$2:
	mov	eax, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
; Function compile flags: /Ogtpy
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z
_TEXT	SEGMENT
$T311576 = -8						; size = 8
__Val$ = 8						; size = 4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT
; _this$ = ecx

; 809  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 8
	push	esi
	mov	esi, ecx

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR [esi+12]
	push	edi
	test	ecx, ecx
	jne	SHORT $LN9@push_back
	xor	eax, eax
	jmp	SHORT $LN10@push_back
$LN9@push_back:
	mov	eax, DWORD PTR [esi+20]
	sub	eax, ecx
	sar	eax, 2
$LN10@push_back:
	mov	edi, DWORD PTR [esi+16]
	mov	edx, edi
	sub	edx, ecx
	sar	edx, 2
	cmp	edx, eax
	jae	SHORT $LN2@push_back

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edi], ecx
	add	edi, 4
	mov	DWORD PTR [esi+16], edi

; 824  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@push_back:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	cmp	ecx, edi
	jbe	SHORT $LN40@push_back
	call	__invalid_parameter_noinfo
$LN40@push_back:
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [esi]
	push	edx
	push	edi
	push	eax
	lea	eax, DWORD PTR $T311576[esp+28]
	push	eax
	mov	ecx, esi
	call	?insert@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@HV?$allocator@H@std@@@2@V?$_Vector_const_iterator@HV?$allocator@H@std@@@2@ABH@Z ; std::vector<int,std::allocator<int> >::insert

; 824  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT
; _this$ = ecx

; 470  : 		{	// construct empty vector

	push	-1
	push	__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	4
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, ecx
	je	SHORT $LN13@vector@4
	mov	DWORD PTR [eax], esi
	jmp	SHORT $LN14@vector@4
$LN13@vector@4:
	xor	eax, eax
$LN14@vector@4:
	mov	DWORD PTR [esi], eax

; 471  : 		_Buy(0);

	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+20], ecx

; 472  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
; Function compile flags: /Ogtpy
;	COMDAT ?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap, COMDAT
; _this$ = eax
; __Right$ = edx

; 1069 : 		{	// exchange contents with _Right

	push	ebx
	push	esi
	push	edi

; 1070 : 		if (this == &_Right)

	cmp	eax, edx
	je	SHORT $LN24@swap@5

; 1071 : 			;	// same object, do nothing
; 1072 : 		else if (this->_Alval == _Right._Alval)
; 1073 : 			{	// same allocator, swap control information
; 1074 : 
; 1075 :  #if _HAS_ITERATOR_DEBUGGING
; 1076 : 			this->_Swap_all(_Right);
; 1077 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1078 : 
; 1079 : 			this->_Swap_aux(_Right);

	mov	esi, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [edx], ecx
	mov	esi, DWORD PTR [eax]
	cmp	esi, ecx
	je	SHORT $LN15@swap@5
	mov	ebx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [ecx], edi
$LN15@swap@5:

; 1080 : 
; 1081 : 			std::swap(_Myfirst, _Right._Myfirst);

	lea	ecx, DWORD PTR [edx+12]
	lea	esi, DWORD PTR [eax+12]
	cmp	esi, ecx
	je	SHORT $LN18@swap@5
	mov	ebx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [ecx], edi
$LN18@swap@5:

; 1082 : 			std::swap(_Mylast, _Right._Mylast);

	lea	ecx, DWORD PTR [edx+16]
	lea	esi, DWORD PTR [eax+16]
	cmp	esi, ecx
	je	SHORT $LN21@swap@5
	mov	ebx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [ecx], edi
$LN21@swap@5:

; 1083 : 			std::swap(_Myend, _Right._Myend);

	lea	ecx, DWORD PTR [edx+20]
	add	eax, 20					; 00000014H
	cmp	eax, ecx
	je	SHORT $LN24@swap@5
	mov	esi, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [ecx], edx
$LN24@swap@5:

; 1084 : 			}
; 1085 : 		else
; 1086 : 			{	// different allocator, do multiple assigns
; 1087 : 			this->_Swap_aux(_Right);
; 1088 : 
; 1089 : 			_Myt _Ts = *this;
; 1090 : 
; 1091 : 			*this = _Right;
; 1092 : 			_Right = _Ts;
; 1093 : 			}
; 1094 : 		}

	pop	edi
	pop	esi
	pop	ebx
	ret	0
?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0
__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Ptr$131696 = -24					; size = 4
$T312433 = -20						; size = 1
$T312257 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Cat$312437 = 8					; size = 1
__Count$ = 8						; size = 4
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve, COMDAT
; _this$ = ecx

; 602  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 603  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __$EHRec$[ebp], esp
	cmp	ecx, 268435455				; 0fffffffH
	jbe	SHORT $LN5@reserve

; 604  : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
$LN101@reserve:
$LN5@reserve:

; 605  : 		else if (capacity() < _Count)

	mov	edx, DWORD PTR [edi+12]
	test	edx, edx
	jne	SHORT $LN20@reserve
	xor	eax, eax
	jmp	SHORT $LN21@reserve
$LN20@reserve:
	mov	eax, DWORD PTR [edi+20]
	sub	eax, edx
	sar	eax, 4
$LN21@reserve:
	cmp	eax, ecx
	jae	SHORT $LN3@reserve

; 606  : 			{	// not enough room, reallocate
; 607  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate

; 608  : 
; 609  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 610  : 			_Umove(begin(), end(), _Ptr);

	mov	esi, DWORD PTR [edi+16]
	mov	ebx, eax
	mov	DWORD PTR __Ptr$131696[ebp], ebx
	cmp	DWORD PTR [edi+12], esi
	jbe	SHORT $LN28@reserve
	call	__invalid_parameter_noinfo
$LN28@reserve:
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR $T312257[ebp], eax
	cmp	eax, DWORD PTR [edi+16]
	jbe	SHORT $LN47@reserve
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR $T312257[ebp]
$LN47@reserve:
	mov	edx, DWORD PTR __Cat$312437[ebp]
	mov	BYTE PTR $T312433[ebp], 0
	mov	ecx, DWORD PTR $T312433[ebp]
	push	ecx
	push	edx
	push	eax
	mov	eax, ebx
	mov	edx, esi
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 614  : 			_CATCH_END
; 615  : 
; 616  : 			size_type _Size = size();

	mov	eax, DWORD PTR [edi+12]
	mov	esi, DWORD PTR [edi+16]
	sub	esi, eax
	add	esp, 12					; 0000000cH
	sar	esi, 4

; 617  : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN96@reserve

; 618  : 				{	// destroy and deallocate old array
; 619  : 				_Destroy(_Myfirst, _Mylast);
; 620  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN96@reserve:

; 621  : 				}
; 622  : 
; 623  :  #if _HAS_ITERATOR_DEBUGGING
; 624  : 			this->_Orphan_all();
; 625  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 626  : 
; 627  : 			_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 4
	add	eax, ebx

; 628  : 			_Mylast = _Ptr + _Size;

	shl	esi, 4
	add	esi, ebx
	mov	DWORD PTR [edi+20], eax
	mov	DWORD PTR [edi+16], esi

; 629  : 			_Myfirst = _Ptr;

	mov	DWORD PTR [edi+12], ebx
$LN3@reserve:

; 630  : 			}
; 631  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z$0:

; 611  : 			_CATCH_ALL
; 612  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Ptr$131696[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 613  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN102@reserve:
$LN100@reserve:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0
__ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >, COMDAT

; 470  : 		{	// construct empty vector

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	push	esi
	mov	esi, DWORD PTR _this$[esp+12]
	push	4
	call	??2@YAPAXI@Z				; operator new
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, ecx
	je	SHORT $LN13@vector@5
	mov	DWORD PTR [eax], esi
	jmp	SHORT $LN14@vector@5
$LN13@vector@5:
	xor	eax, eax
$LN14@vector@5:
	mov	DWORD PTR [esi], eax

; 471  : 		_Buy(0);

	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+20], ecx

; 472  : 		}

	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	eax, esi
	mov	DWORD PTR fs:0, ecx
	pop	esi
	add	esp, 12					; 0000000cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp-4]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__ehhandler$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
PUBLIC	??0Rasterizer@@QAE@XZ				; Rasterizer::Rasterizer
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\exception
xdata$x	SEGMENT
__unwindtable$??0Rasterizer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Rasterizer@@QAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Rasterizer@@QAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0Rasterizer@@QAE@XZ$5
__ehfuncinfo$??0Rasterizer@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Rasterizer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ??0Rasterizer@@QAE@XZ
_TEXT	SEGMENT
$T313201 = -20						; size = 4
$T312952 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
??0Rasterizer@@QAE@XZ PROC				; Rasterizer::Rasterizer, COMDAT

; 41   : {

	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??0Rasterizer@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	esi, DWORD PTR _this$[esp+24]
	push	edi
	xor	ebx, ebx
	push	4
	mov	DWORD PTR [esi], OFFSET ??_7Rasterizer@@6B@
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+32], ebx
	lea	edi, DWORD PTR [esi+44]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN21@Rasterizer
	mov	DWORD PTR [eax], edi
	jmp	SHORT $LN22@Rasterizer
$LN21@Rasterizer:
	xor	eax, eax
$LN22@Rasterizer:
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	mov	DWORD PTR [edi+20], ebx
	push	4
	mov	DWORD PTR __$EHRec$[esp+44], 1
	lea	edi, DWORD PTR [esi+68]
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $LN81@Rasterizer
	mov	DWORD PTR [eax], edi
	jmp	SHORT $LN82@Rasterizer
$LN81@Rasterizer:
	xor	eax, eax
$LN82@Rasterizer:
	mov	DWORD PTR [edi], eax

; 42   : 	mOverlayWidth = mOverlayHeight = 0;
; 43   : 	mPathOffsetX = mPathOffsetY = 0;
; 44   : 	mOffsetX = mOffsetY = 0;
; 45   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	mov	DWORD PTR [edi+12], ebx
	mov	DWORD PTR [edi+16], ebx
	mov	DWORD PTR [edi+20], ebx
	mov	DWORD PTR [esi+112], ebx
	mov	DWORD PTR [esi+120], ebx
	mov	DWORD PTR [esi+116], ebx
	mov	DWORD PTR [esi+128], ebx
	mov	DWORD PTR [esi+124], ebx
	mov	DWORD PTR [esi+136], ebx
	mov	DWORD PTR [esi+132], ebx
	pop	edi
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Rasterizer@@QAE@XZ$2:
	mov	eax, DWORD PTR $T312952[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0Rasterizer@@QAE@XZ$0:
	mov	eax, DWORD PTR _this$[ebp-4]
	add	eax, 44					; 0000002cH
	push	eax
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	ret	0
__unwindfunclet$??0Rasterizer@@QAE@XZ$5:
	mov	eax, DWORD PTR $T313201[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__ehhandler$??0Rasterizer@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0Rasterizer@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Rasterizer@@QAE@XZ ENDP				; Rasterizer::Rasterizer
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__catchsym$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$0
__catchsym$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$2
__tryblocktable$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$4
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$5
__ehfuncinfo$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
__Tmp$132564 = -44					; size = 16
__Tmp$132546 = -44					; size = 16
$T348694 = -28						; size = 1
$T348656 = -28						; size = 1
__Newvec$132534 = -24					; size = 4
__$EHRec$ = -16						; size = 16
$T348905 = 8						; size = 1
__Cat$348908 = 8					; size = 1
$T348858 = 8						; size = 1
__Cat$348861 = 8					; size = 1
__Cat$348697 = 8					; size = 1
__Cat$348659 = 8					; size = 1
__Val$ = 8						; size = 4
__Where$ = 12						; size = 8
?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Insert_n, COMDAT
; _this$ = ecx

; 1158 : 		{	// insert _Count * _Val at _Where

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	mov	esi, ecx

; 1159 : 
; 1160 :  #if _HAS_ITERATOR_DEBUGGING
; 1161 : 		if (_Where._Mycont != this
; 1162 : 			|| _Where._Myptr < _Myfirst || _Mylast < _Where._Myptr)
; 1163 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1164 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1165 : 
; 1166 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR [esi+12]
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	test	ecx, ecx
	jne	SHORT $LN27@Insert_n@2
	xor	ebx, ebx
	jmp	SHORT $LN125@Insert_n@2
$LN27@Insert_n@2:
	mov	ebx, DWORD PTR [esi+20]
	sub	ebx, ecx
	sar	ebx, 4
$LN125@Insert_n@2:

; 1167 : 
; 1168 : 		if (_Count == 0)
; 1169 : 			;
; 1170 : 		else if (max_size() - size() < _Count)

	mov	edi, DWORD PTR [esi+16]
	mov	eax, edi
	sub	eax, ecx
	sar	eax, 4
	mov	ecx, 268435455				; 0fffffffH
	sub	ecx, eax
	cmp	ecx, 1
	jae	SHORT $LN10@Insert_n@2

; 1171 : 			_Xlen();	// result too long

	call	?_Xlen@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@KAXXZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Xlen
$LN129@Insert_n@2:
$LN10@Insert_n@2:

; 1172 : 		else if (_Capacity < size() + _Count)

	lea	ecx, DWORD PTR [eax+1]
	cmp	ebx, ecx
	jae	$LN8@Insert_n@2

; 1173 : 			{	// not enough room, reallocate
; 1174 : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1175 : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	eax, ebx
	shr	eax, 1
	mov	edx, 268435455				; 0fffffffH
	sub	edx, eax
	cmp	edx, ebx
	jae	SHORT $LN15@Insert_n@2
	xor	ebx, ebx
	jmp	SHORT $LN16@Insert_n@2
$LN15@Insert_n@2:
	add	ebx, eax
$LN16@Insert_n@2:

; 1176 : 			if (_Capacity < size() + _Count)

	cmp	ebx, ecx
	jae	SHORT $LN7@Insert_n@2

; 1177 : 				_Capacity = size() + _Count;

	mov	ebx, ecx
$LN7@Insert_n@2:

; 1178 : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

	mov	ecx, ebx
	call	?allocate@?$allocator@U?$pair@_K_K@std@@@std@@QAEPAU?$pair@_K_K@2@I@Z ; std::allocator<std::pair<unsigned __int64,unsigned __int64> >::allocate

; 1179 : 			pointer _Ptr = _Newvec;
; 1180 : 
; 1181 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1182 : 			_Ptr = _Umove(_Myfirst, _VEC_ITER_BASE(_Where),
; 1183 : 				_Newvec);	// copy prefix

	mov	ecx, DWORD PTR [esi+12]
	mov	BYTE PTR $T348656[ebp], 0
	mov	edx, DWORD PTR $T348656[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$348659[ebp]
	push	edx
	mov	edx, DWORD PTR __Where$[ebp+4]
	push	ecx
	mov	DWORD PTR __Newvec$132534[ebp], eax
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1184 : 			_Ptr = _Ufill(_Ptr, _Count, _Val);	// add new stuff

	mov	ecx, DWORD PTR __Cat$348697[ebp]
	mov	edx, DWORD PTR __Val$[ebp]
	mov	edi, eax
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T348694[ebp], 0
	mov	eax, DWORD PTR $T348694[ebp]
	push	eax
	push	ecx
	push	edi
	mov	ecx, 1
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1185 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

	mov	edx, DWORD PTR [esi+16]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T348858[ebp], 0
	mov	eax, DWORD PTR $T348858[ebp]
	mov	ecx, DWORD PTR __Cat$348861[ebp]
	push	eax
	mov	eax, DWORD PTR __Where$[ebp+4]
	push	ecx
	add	edi, 16					; 00000010H
	push	eax
	mov	eax, edi
	call	??$_Uninit_copy@PAU?$pair@_K_K@std@@PAU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAPAU?$pair@_K_K@0@PAU10@00AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_copy<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	DWORD PTR __$EHRec$[ebp+12], -1

; 1190 : 			_CATCH_END
; 1191 : 
; 1192 : 			_Count += size();

	mov	eax, DWORD PTR [esi+12]
	mov	edi, DWORD PTR [esi+16]
	sub	edi, eax
	sar	edi, 4
	add	esp, 12					; 0000000cH
	inc	edi

; 1193 : 			if (_Myfirst != 0)

	test	eax, eax
	je	SHORT $LN115@Insert_n@2

; 1194 : 				{	// destroy and deallocate old array
; 1195 : 				_Destroy(_Myfirst, _Mylast);
; 1196 : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN115@Insert_n@2:

; 1197 : 				}
; 1198 : 
; 1199 :  #if _HAS_ITERATOR_DEBUGGING
; 1200 : 			this->_Orphan_all();
; 1201 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1202 : 
; 1203 : 			_Myend = _Newvec + _Capacity;

	mov	eax, DWORD PTR __Newvec$132534[ebp]
	shl	ebx, 4
	add	ebx, eax

; 1204 : 			_Mylast = _Newvec + _Count;

	shl	edi, 4
	add	edi, eax
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+16], edi

; 1205 : 			_Myfirst = _Newvec;

	mov	DWORD PTR [esi+12], eax

; 1247 : 			}
; 1248 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
__catch$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$0:

; 1186 : 			_CATCH_ALL
; 1187 : 			_Destroy(_Newvec, _Ptr);
; 1188 : 			this->_Alval.deallocate(_Newvec, _Capacity);

	mov	ecx, DWORD PTR __Newvec$132534[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
__catch$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z$2:

; 1189 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN130@Insert_n@2:
$LN8@Insert_n@2:

; 1206 : 			}
; 1207 : 		else if ((size_type)(_Mylast - _VEC_ITER_BASE(_Where)) < _Count)

	mov	edx, DWORD PTR __Where$[ebp+4]
	mov	eax, edi
	sub	eax, edx
	sar	eax, 4
	cmp	eax, 1

; 1208 : 			{	// new stuff spills off end
; 1209 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$132546[ebp], ecx
	jae	SHORT $LN3@Insert_n@2
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Tmp$132546[ebp+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR __Tmp$132546[ebp+8], ecx

; 1210 : 
; 1211 : 			_Umove(_VEC_ITER_BASE(_Where), _Mylast,
; 1212 : 				_VEC_ITER_BASE(_Where) + _Count);	// copy suffix

	lea	ecx, DWORD PTR [edx+16]
	push	ecx
	push	edi
	mov	DWORD PTR __Tmp$132546[ebp+12], eax
	call	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>

; 1213 : 
; 1214 : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 2

; 1215 : 			_Ufill(_Mylast, _Count - (_Mylast - _VEC_ITER_BASE(_Where)),
; 1216 : 				_Tmp);	// insert new stuff off end

	mov	eax, DWORD PTR [esi+16]
	mov	edx, eax
	sub	edx, DWORD PTR __Where$[ebp+4]
	mov	ecx, 1
	sar	edx, 4
	sub	ecx, edx
	mov	BYTE PTR $T348905[ebp], 0
	mov	edx, DWORD PTR $T348905[ebp]
	push	edx
	mov	edx, DWORD PTR __Cat$348908[ebp]
	push	edx
	push	eax
	lea	edx, DWORD PTR __Tmp$132546[ebp]
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >

; 1217 : 			_CATCH_ALL
; 1218 : 			_Destroy(_VEC_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 1219 : 			_RERAISE;
; 1220 : 			_CATCH_END
; 1221 : 
; 1222 : 			_Mylast += _Count;
; 1223 : 
; 1224 :  #if _HAS_ITERATOR_DEBUGGING
; 1225 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1226 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1227 : 
; 1228 : 			std::fill(_VEC_ITER_BASE(_Where), _Mylast - _Count,
; 1229 : 				_Tmp);	// insert up to old end

	mov	eax, DWORD PTR __Where$[ebp+4]
	add	esp, 12					; 0000000cH
	add	DWORD PTR [esi+16], 16			; 00000010H
	mov	esi, DWORD PTR [esi+16]
	lea	edx, DWORD PTR [esi-16]

; 1230 : 			}
; 1231 : 		else

	jmp	SHORT $LN128@Insert_n@2
$LN3@Insert_n@2:

; 1232 : 			{	// new stuff can all be assigned
; 1233 : 			_Ty _Tmp = _Val;	// in case _Val is in sequence

	mov	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Tmp$132564[ebp+4], edx
	mov	edx, DWORD PTR [eax+12]

; 1234 : 
; 1235 : 			pointer _Oldend = _Mylast;
; 1236 : 			_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1237 : 				_Mylast);	// copy suffix

	push	edi
	mov	DWORD PTR __Tmp$132564[ebp+12], edx
	lea	ebx, DWORD PTR [edi-16]
	push	edi
	mov	edx, ebx
	mov	DWORD PTR __Tmp$132564[ebp+8], ecx
	call	??$_Umove@PAU?$pair@_K_K@std@@@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEPAU?$pair@_K_K@1@PAU21@00@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Umove<std::pair<unsigned __int64,unsigned __int64> *>
	mov	DWORD PTR [esi+16], eax

; 1238 : 
; 1239 :  #if _HAS_ITERATOR_DEBUGGING
; 1240 : 			_Orphan_range(_Where._Myptr, _Mylast);
; 1241 :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 1242 : 
; 1243 : 			_STDEXT _Unchecked_move_backward(_VEC_ITER_BASE(_Where), _Oldend - _Count,
; 1244 : 				_Oldend);	// copy hole

	mov	esi, DWORD PTR __Where$[ebp+4]
	mov	edx, edi
	mov	ecx, ebx
	call	??$_Unchecked_move_backward@PAU?$pair@_K_K@std@@PAU12@@stdext@@YAPAU?$pair@_K_K@std@@PAU12@00@Z ; stdext::_Unchecked_move_backward<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> *>

; 1245 : 			std::fill(_VEC_ITER_BASE(_Where), _VEC_ITER_BASE(_Where) + _Count,
; 1246 : 				_Tmp);	// insert into hole

	mov	eax, DWORD PTR __Where$[ebp+4]
	lea	edx, DWORD PTR [eax+16]
$LN128@Insert_n@2:
	push	eax
	lea	ecx, DWORD PTR __Tmp$132564[ebp]
	call	??$fill@PAU?$pair@_K_K@std@@U12@@std@@YAXPAU?$pair@_K_K@0@0ABU10@@Z ; std::fill<std::pair<unsigned __int64,unsigned __int64> *,std::pair<unsigned __int64,unsigned __int64> >

; 1247 : 			}
; 1248 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	add	esp, 4
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN127@Insert_n@2:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Insert_n
; Function compile flags: /Ogtpy
;	COMDAT ?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
__Tmp$349187 = -8					; size = 8
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
__Where$ = 16						; size = 8
?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::insert, COMDAT
; _this$ = eax

; 875  : 		{	// insert _Val at _Where

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, eax

; 876  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

	mov	eax, DWORD PTR [esi+16]
	mov	ebx, DWORD PTR [esi+12]
	mov	ecx, eax
	sub	ecx, ebx
	push	edi
	test	ecx, -16				; fffffff0H
	jne	SHORT $LN3@insert@2
	xor	edi, edi
	jmp	SHORT $LN4@insert@2
$LN3@insert@2:
	cmp	ebx, eax
	jbe	SHORT $LN13@insert@2
	call	__invalid_parameter_noinfo
$LN13@insert@2:
	mov	ecx, DWORD PTR __Where$[esp+24]
	mov	eax, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN29@insert@2
	cmp	ecx, eax
	je	SHORT $LN28@insert@2
$LN29@insert@2:
	call	__invalid_parameter_noinfo
$LN28@insert@2:
	mov	edi, DWORD PTR __Where$[esp+28]
	sub	edi, ebx
	sar	edi, 4
$LN4@insert@2:

; 877  : 		_Insert_n(_Where, (size_type)1, _Val);

	mov	edx, DWORD PTR __Where$[esp+28]
	mov	eax, DWORD PTR __Where$[esp+24]
	mov	ecx, DWORD PTR __Val$[esp+24]
	push	edx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?_Insert_n@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@IAEXV?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@IABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::_Insert_n

; 878  : 		return (begin() + _Off);

	mov	ebx, DWORD PTR [esi+12]
	cmp	ebx, DWORD PTR [esi+16]
	jbe	SHORT $LN43@insert@2
	call	__invalid_parameter_noinfo
$LN43@insert@2:
	mov	esi, DWORD PTR [esi]
	mov	ebp, esi
	mov	DWORD PTR __Tmp$349187[esp+32], ebx
	test	esi, esi
	jne	SHORT $LN85@insert@2
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN76@insert@2:
	shl	edi, 4
	add	edi, ebx
	cmp	edi, DWORD PTR [eax+16]
	ja	SHORT $LN63@insert@2
	test	esi, esi
	je	SHORT $LN81@insert@2
	mov	esi, DWORD PTR [esi]
	jmp	SHORT $LN82@insert@2
$LN85@insert@2:
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN76@insert@2
$LN81@insert@2:
	xor	esi, esi
$LN82@insert@2:
	cmp	edi, DWORD PTR [esi+12]
	jae	SHORT $LN62@insert@2
$LN63@insert@2:
	call	__invalid_parameter_noinfo
$LN62@insert@2:
	mov	eax, DWORD PTR ___$ReturnUdt$[esp+24]
	mov	DWORD PTR [eax+4], edi

; 879  : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR [eax], ebp
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	16					; 00000010H
?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::insert
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z
_TEXT	SEGMENT
$T349221 = -8						; size = 8
$T349250 = 8						; size = 1
__Cat$349254 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z PROC ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back, COMDAT
; _this$ = edi

; 810  : 		if (size() < capacity())

	mov	ecx, DWORD PTR [edi+12]
	sub	esp, 8
	push	ebx
	mov	ebx, DWORD PTR __Val$[esp+8]
	push	esi
	test	ecx, ecx
	jne	SHORT $LN9@push_back@2
	xor	eax, eax
	jmp	SHORT $LN10@push_back@2
$LN9@push_back@2:
	mov	eax, DWORD PTR [edi+20]
	sub	eax, ecx
	sar	eax, 4
$LN10@push_back@2:
	mov	esi, DWORD PTR [edi+16]
	mov	edx, esi
	sub	edx, ecx
	sar	edx, 4
	cmp	edx, eax
	jae	SHORT $LN2@push_back@2

; 811  : 
; 812  :  #if _HAS_ITERATOR_DEBUGGING
; 813  : 			{ // room at end, construct it there
; 814  : 			_Orphan_range(_Mylast, _Mylast);
; 815  : 			_Mylast = _Ufill(_Mylast, 1, _Val);
; 816  : 			}
; 817  : 
; 818  :  #else /* _HAS_ITERATOR_DEBUGGING */
; 819  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

	mov	BYTE PTR $T349250[esp+12], 0
	mov	eax, DWORD PTR $T349250[esp+12]
	mov	ecx, DWORD PTR __Cat$349254[esp+12]
	push	eax
	push	ecx
	push	esi
	mov	edx, ebx
	mov	ecx, 1
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 12					; 0000000cH
	add	esi, 16					; 00000010H
	mov	DWORD PTR [edi+16], esi

; 824  : 		}

	pop	esi
	pop	ebx
	add	esp, 8
	ret	4
$LN2@push_back@2:

; 820  :  #endif /* _HAS_ITERATOR_DEBUGGING */
; 821  : 
; 822  : 		else
; 823  : 			insert(end(), _Val);

	cmp	ecx, esi
	jbe	SHORT $LN23@push_back@2
	call	__invalid_parameter_noinfo
$LN23@push_back@2:
	mov	eax, DWORD PTR [edi]
	push	esi
	push	eax
	push	ebx
	lea	edx, DWORD PTR $T349221[esp+28]
	push	edx
	mov	eax, edi
	call	?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::insert

; 824  : 		}

	pop	esi
	pop	ebx
	add	esp, 8
	ret	4
?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ENDP ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
_TEXT	ENDS
PUBLIC	?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z ; Rasterizer::_OverlapRegion
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z$0
__ehfuncinfo$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z
_TEXT	SEGMENT
_itA$ = -180						; size = 8
_itB$ = -172						; size = 8
_offset1$ = -164					; size = 8
_x2$129611 = -156					; size = 8
_x2$129638 = -148					; size = 8
$T349727 = -140						; size = 4
$T349873 = -136						; size = 4
_offset2$ = -132					; size = 8
_itAE$ = -124						; size = 8
_itBE$ = -116						; size = 8
$T349343 = -108						; size = 16
$T349341 = -108						; size = 16
_temp$ = -92						; size = 24
_x1$129637 = -68					; size = 8
_x1$129610 = -60					; size = 8
$T349335 = -52						; size = 8
$T349338 = -44						; size = 8
$T349337 = -36						; size = 16
__$EHRec$ = -12						; size = 12
_dst$ = 8						; size = 4
_dx$ = 12						; size = 4
_dy$ = 16						; size = 4
?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z PROC ; Rasterizer::_OverlapRegion, COMDAT
; _src$ = ecx

; 544  : {

	push	-1
	push	__ehhandler$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 172				; 000000acH
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _dst$[esp+196]

; 545  : 	tSpanBuffer temp;

	push	4
	mov	esi, ecx
	call	??2@YAPAXI@Z				; operator new
	xor	ecx, ecx
	add	esp, 4
	cmp	eax, ecx
	je	SHORT $LN52@OverlapReg
	lea	edx, DWORD PTR _temp$[esp+200]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN53@OverlapReg
$LN52@OverlapReg:
	xor	eax, eax
$LN53@OverlapReg:
	mov	DWORD PTR _temp$[esp+200], eax
	mov	DWORD PTR _temp$[esp+212], ecx
	mov	DWORD PTR _temp$[esp+216], ecx
	mov	DWORD PTR _temp$[esp+220], ecx
	mov	DWORD PTR __$EHRec$[esp+208], 1

; 546  : 
; 547  : 	temp.reserve(dst.size() + src.size());

	mov	eax, DWORD PTR [edi+16]
	mov	ecx, DWORD PTR [esi+16]
	sub	eax, DWORD PTR [edi+12]
	sub	ecx, DWORD PTR [esi+12]
	sar	eax, 4
	sar	ecx, 4
	add	eax, ecx
	push	eax
	lea	ecx, DWORD PTR _temp$[esp+204]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 548  : 
; 549  : 	dst.swap(temp);

	lea	edx, DWORD PTR _temp$[esp+200]
	mov	eax, edi
	call	?swap@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXAAV12@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::swap

; 550  : 
; 551  : 	tSpanBuffer::iterator itA = temp.begin();

	mov	eax, DWORD PTR _temp$[esp+212]
	mov	ecx, DWORD PTR _temp$[esp+216]
	mov	ebx, eax
	cmp	eax, ecx
	jbe	SHORT $LN110@OverlapReg
	call	__invalid_parameter_noinfo
	mov	ecx, DWORD PTR _temp$[esp+216]
	mov	eax, DWORD PTR _temp$[esp+212]
$LN110@OverlapReg:
	mov	edx, DWORD PTR _temp$[esp+200]
	mov	DWORD PTR _itA$[esp+200], edx
	mov	DWORD PTR _itA$[esp+204], ebx

; 552  : 	tSpanBuffer::iterator itAE = temp.end();

	mov	DWORD PTR $T349727[esp+200], ecx
	cmp	eax, ecx
	jbe	SHORT $LN129@OverlapReg
	call	__invalid_parameter_noinfo
$LN129@OverlapReg:

; 553  : 	tSpanBuffer::iterator itB = src.begin();

	mov	ebx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR _temp$[esp+200]
	mov	DWORD PTR _itAE$[esp+200], eax
	cmp	ebx, DWORD PTR [esi+16]
	jbe	SHORT $LN148@OverlapReg
	call	__invalid_parameter_noinfo
$LN148@OverlapReg:

; 554  : 	tSpanBuffer::iterator itBE = src.end();

	mov	eax, DWORD PTR [esi+16]
	mov	edi, DWORD PTR [esi]
	mov	DWORD PTR _itB$[esp+200], edi
	mov	ebp, ebx
	mov	DWORD PTR $T349873[esp+200], eax
	cmp	DWORD PTR [esi+12], eax
	jbe	SHORT $LN167@OverlapReg
	call	__invalid_parameter_noinfo
$LN167@OverlapReg:

; 555  : 
; 556  : 	// Don't worry -- even if dy<0 this will still work! // G: hehe, the evil twin :)
; 557  : 
; 558  : 	unsigned __int64 offset1 = (((__int64)dy)<<32) - dx;

	mov	eax, DWORD PTR _dy$[esp+196]
	mov	ecx, DWORD PTR [esi]
	push	1
	cdq
	push	0
	push	edx
	push	eax
	mov	DWORD PTR _itBE$[esp+216], ecx
	call	__allmul
	mov	ecx, eax
	mov	eax, DWORD PTR _dx$[esp+196]
	mov	esi, edx
	cdq
	mov	ebx, ecx
	sub	ebx, eax
	mov	DWORD PTR _offset1$[esp+200], ebx
	mov	ebx, esi
	sbb	ebx, edx

; 559  : 	unsigned __int64 offset2 = (((__int64)dy)<<32) + dx;

	add	eax, ecx
	adc	edx, esi
	mov	DWORD PTR _offset1$[esp+204], ebx
	mov	DWORD PTR _offset2$[esp+200], eax
	mov	DWORD PTR _offset2$[esp+204], edx
$LN1014@OverlapReg:

; 560  : 
; 561  : 	while(itA != itAE && itB != itBE)

	mov	eax, DWORD PTR _itA$[esp+200]
	mov	esi, DWORD PTR _itA$[esp+204]
	test	eax, eax
	je	SHORT $LN185@OverlapReg
	cmp	eax, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN184@OverlapReg
$LN185@OverlapReg:
	call	__invalid_parameter_noinfo
$LN184@OverlapReg:
	cmp	esi, DWORD PTR $T349727[esp+200]
	je	$LL4@OverlapReg
	test	edi, edi
	je	SHORT $LN198@OverlapReg
	cmp	edi, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN197@OverlapReg
$LN198@OverlapReg:
	call	__invalid_parameter_noinfo
$LN197@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	$LL4@OverlapReg

; 562  : 	{
; 563  : 		if((*itB).first + offset1 < (*itA).first)

	test	edi, edi
	jne	$LN983@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN223@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN210@OverlapReg
	call	__invalid_parameter_noinfo
$LN210@OverlapReg:
	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	jne	$LN982@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN243@OverlapReg:
	cmp	esi, DWORD PTR [eax+16]
	jb	SHORT $LN230@OverlapReg
	call	__invalid_parameter_noinfo
$LN230@OverlapReg:
	mov	ecx, DWORD PTR [ebp]
	add	ecx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, ebx
	cmp	eax, DWORD PTR [esi+4]
	ja	$LN34@OverlapReg
	jb	SHORT $LN990@OverlapReg
	cmp	ecx, DWORD PTR [esi]
	jae	$LN34@OverlapReg
$LN990@OverlapReg:

; 564  : 		{
; 565  : 			// B span is earlier.  Use it.
; 566  : 
; 567  : 			unsigned __int64 x1 = (*itB).first + offset1;

	test	edi, edi
	jne	$LN981@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN263@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN250@OverlapReg
	call	__invalid_parameter_noinfo
$LN250@OverlapReg:
	mov	eax, DWORD PTR [ebp]
	add	eax, DWORD PTR _offset1$[esp+200]
	mov	DWORD PTR _x1$129610[esp+200], eax
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, ebx
	mov	DWORD PTR _x1$129610[esp+204], eax

; 568  : 			unsigned __int64 x2 = (*itB).second + offset2;

	test	edi, edi
	jne	$LN980@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN283@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN270@OverlapReg
	call	__invalid_parameter_noinfo
$LN270@OverlapReg:
	mov	eax, DWORD PTR [ebp+8]
	add	eax, DWORD PTR _offset2$[esp+200]
	mov	edi, DWORD PTR [ebp+12]
	adc	edi, DWORD PTR _offset2$[esp+204]
	mov	DWORD PTR _x2$129611[esp+200], eax

; 569  : 
; 570  : 			++itB;

	mov	eax, DWORD PTR _itB$[esp+200]
	mov	DWORD PTR _x2$129611[esp+204], edi
	test	eax, eax
	jne	$LN979@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN303@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN290@OverlapReg
	call	__invalid_parameter_noinfo
$LN290@OverlapReg:
	add	ebp, 16					; 00000010H
	npad	3
$LL33@OverlapReg:

; 571  : 
; 572  : 			// B spans don't overlap, so begin merge loop with A first.
; 573  : 
; 574  : 			for(;;)
; 575  : 			{
; 576  : 				// If we run out of A spans or the A span doesn't overlap,
; 577  : 				// then the next B span can't either (because B spans don't
; 578  : 				// overlap) and we exit.
; 579  : 
; 580  : 				if(itA == itAE || (*itA).first > x2)

	mov	esi, DWORD PTR _itA$[esp+200]
	test	esi, esi
	je	SHORT $LN309@OverlapReg
	cmp	esi, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN308@OverlapReg
$LN309@OverlapReg:
	call	__invalid_parameter_noinfo
$LN308@OverlapReg:
	mov	ebx, DWORD PTR _itA$[esp+204]
	cmp	ebx, DWORD PTR $T349727[esp+200]
	je	$LN949@OverlapReg
	test	esi, esi
	jne	$LN978@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN334@OverlapReg:
	cmp	ebx, DWORD PTR [eax+16]
	jb	SHORT $LN321@OverlapReg
	call	__invalid_parameter_noinfo
$LN321@OverlapReg:
	mov	edx, DWORD PTR [ebx+4]
	cmp	edx, edi
	ja	$LN949@OverlapReg
	jb	SHORT $LL29@OverlapReg
	mov	eax, DWORD PTR [ebx]
	cmp	eax, DWORD PTR _x2$129611[esp+200]
	ja	$LN949@OverlapReg
$LL29@OverlapReg:

; 581  : 					break;
; 582  : 
; 583  : 				do {x2 = _MAX(x2, (*itA++).second);}

	mov	esi, DWORD PTR _itA$[esp+200]
	mov	ebx, DWORD PTR _itA$[esp+204]
	test	esi, esi
	jne	$LN977@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN356@OverlapReg:
	mov	ecx, DWORD PTR _itA$[esp+204]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN343@OverlapReg
	call	__invalid_parameter_noinfo
$LN343@OverlapReg:
	add	DWORD PTR _itA$[esp+204], 16		; 00000010H
	test	esi, esi
	jne	$LN976@OverlapReg
	call	__invalid_parameter_noinfo
$LN376@OverlapReg:
	cmp	ebx, DWORD PTR [esi+16]
	jb	SHORT $LN363@OverlapReg
	call	__invalid_parameter_noinfo
$LN363@OverlapReg:
	cmp	edi, DWORD PTR [ebx+12]
	lea	eax, DWORD PTR [ebx+8]
	ja	SHORT $LN381@OverlapReg
	jb	SHORT $LN382@OverlapReg
	mov	edx, DWORD PTR _x2$129611[esp+200]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN382@OverlapReg
$LN381@OverlapReg:
	lea	eax, DWORD PTR _x2$129611[esp+200]
$LN382@OverlapReg:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$129611[esp+200], ecx
	mov	edi, DWORD PTR [eax+4]

; 584  : 				while(itA != itAE && (*itA).first <= x2);

	mov	eax, DWORD PTR _itA$[esp+200]
	mov	DWORD PTR _x2$129611[esp+204], edi
	test	eax, eax
	je	SHORT $LN388@OverlapReg
	cmp	eax, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN387@OverlapReg
$LN388@OverlapReg:
	call	__invalid_parameter_noinfo
$LN387@OverlapReg:
	mov	edx, DWORD PTR _itA$[esp+204]
	cmp	edx, DWORD PTR $T349727[esp+200]
	je	SHORT $LN26@OverlapReg
	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	jne	$LN975@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN413@OverlapReg:
	mov	ecx, DWORD PTR _itA$[esp+204]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN400@OverlapReg
	call	__invalid_parameter_noinfo
$LN400@OverlapReg:
	mov	eax, DWORD PTR _itA$[esp+204]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, edi
	jb	$LL29@OverlapReg
	ja	SHORT $LN26@OverlapReg
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _x2$129611[esp+200]
	jbe	$LL29@OverlapReg
$LN26@OverlapReg:

; 585  : 
; 586  : 				// If we run out of B spans or the B span doesn't overlap,
; 587  : 				// then the next A span can't either (because A spans don't
; 588  : 				// overlap) and we exit.
; 589  : 
; 590  : 				if(itB == itBE || (*itB).first + offset1 > x2)

	mov	eax, DWORD PTR _itB$[esp+200]
	test	eax, eax
	je	SHORT $LN419@OverlapReg
	cmp	eax, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN418@OverlapReg
$LN419@OverlapReg:
	call	__invalid_parameter_noinfo
$LN418@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	$LN949@OverlapReg
	mov	eax, DWORD PTR _itB$[esp+200]
	test	eax, eax
	jne	$LN974@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN444@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN431@OverlapReg
	call	__invalid_parameter_noinfo
$LN431@OverlapReg:
	mov	ecx, DWORD PTR [ebp]
	add	ecx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, DWORD PTR _offset1$[esp+204]
	cmp	eax, edi
	ja	$LN949@OverlapReg
	jb	SHORT $LN23@OverlapReg
	cmp	ecx, DWORD PTR _x2$129611[esp+200]
	ja	$LN949@OverlapReg
$LN23@OverlapReg:

; 591  : 					break;
; 592  : 
; 593  : 				do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	ebx, DWORD PTR _itB$[esp+200]
	mov	esi, ebp
	test	ebx, ebx
	jne	$LN973@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN466@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN453@OverlapReg
	call	__invalid_parameter_noinfo
$LN453@OverlapReg:
	add	ebp, 16					; 00000010H
	test	ebx, ebx
	jne	$LN972@OverlapReg
	call	__invalid_parameter_noinfo
$LN486@OverlapReg:
	cmp	esi, DWORD PTR [ebx+16]
	jb	SHORT $LN473@OverlapReg
	call	__invalid_parameter_noinfo
$LN473@OverlapReg:
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, DWORD PTR _offset2$[esp+200]
	mov	eax, DWORD PTR [esi+12]
	adc	eax, DWORD PTR _offset2$[esp+204]
	mov	DWORD PTR $T349335[esp+200], ecx
	mov	DWORD PTR $T349335[esp+204], eax
	cmp	edi, eax
	ja	SHORT $LN491@OverlapReg
	jb	SHORT $LN995@OverlapReg
	cmp	DWORD PTR _x2$129611[esp+200], ecx
	jae	SHORT $LN491@OverlapReg
$LN995@OverlapReg:
	lea	eax, DWORD PTR $T349335[esp+200]
	jmp	SHORT $LN492@OverlapReg
$LN983@OverlapReg:

; 562  : 	{
; 563  : 		if((*itB).first + offset1 < (*itA).first)

	mov	eax, DWORD PTR [edi]
	jmp	$LN223@OverlapReg
$LN982@OverlapReg:
	mov	eax, DWORD PTR [eax]
	jmp	$LN243@OverlapReg
$LN981@OverlapReg:

; 564  : 		{
; 565  : 			// B span is earlier.  Use it.
; 566  : 
; 567  : 			unsigned __int64 x1 = (*itB).first + offset1;

	mov	eax, DWORD PTR [edi]
	jmp	$LN263@OverlapReg
$LN980@OverlapReg:

; 568  : 			unsigned __int64 x2 = (*itB).second + offset2;

	mov	eax, DWORD PTR [edi]
	jmp	$LN283@OverlapReg
$LN979@OverlapReg:

; 569  : 
; 570  : 			++itB;

	mov	eax, DWORD PTR [eax]
	jmp	$LN303@OverlapReg
$LN978@OverlapReg:

; 571  : 
; 572  : 			// B spans don't overlap, so begin merge loop with A first.
; 573  : 
; 574  : 			for(;;)
; 575  : 			{
; 576  : 				// If we run out of A spans or the A span doesn't overlap,
; 577  : 				// then the next B span can't either (because B spans don't
; 578  : 				// overlap) and we exit.
; 579  : 
; 580  : 				if(itA == itAE || (*itA).first > x2)

	mov	eax, DWORD PTR [esi]
	jmp	$LN334@OverlapReg
$LN977@OverlapReg:

; 581  : 					break;
; 582  : 
; 583  : 				do {x2 = _MAX(x2, (*itA++).second);}

	mov	eax, DWORD PTR [esi]
	jmp	$LN356@OverlapReg
$LN976@OverlapReg:
	mov	esi, DWORD PTR [esi]
	jmp	$LN376@OverlapReg
$LN975@OverlapReg:

; 584  : 				while(itA != itAE && (*itA).first <= x2);

	mov	eax, DWORD PTR [eax]
	jmp	$LN413@OverlapReg
$LN974@OverlapReg:

; 585  : 
; 586  : 				// If we run out of B spans or the B span doesn't overlap,
; 587  : 				// then the next A span can't either (because A spans don't
; 588  : 				// overlap) and we exit.
; 589  : 
; 590  : 				if(itB == itBE || (*itB).first + offset1 > x2)

	mov	eax, DWORD PTR [eax]
	jmp	$LN444@OverlapReg
$LN973@OverlapReg:

; 591  : 					break;
; 592  : 
; 593  : 				do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	eax, DWORD PTR [ebx]
	jmp	$LN466@OverlapReg
$LN972@OverlapReg:
	mov	ebx, DWORD PTR [ebx]
	jmp	$LN486@OverlapReg
$LN491@OverlapReg:
	lea	eax, DWORD PTR _x2$129611[esp+200]
$LN492@OverlapReg:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$129611[esp+200], ecx
	mov	edi, DWORD PTR [eax+4]

; 594  : 				while(itB != itBE && (*itB).first + offset1 <= x2);

	mov	eax, DWORD PTR _itB$[esp+200]
	mov	DWORD PTR _x2$129611[esp+204], edi
	test	eax, eax
	je	SHORT $LN498@OverlapReg
	cmp	eax, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN497@OverlapReg
$LN498@OverlapReg:
	call	__invalid_parameter_noinfo
$LN497@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	$LL33@OverlapReg
	mov	eax, DWORD PTR _itB$[esp+200]
	test	eax, eax
	jne	SHORT $LN971@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN523@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN510@OverlapReg
	call	__invalid_parameter_noinfo
$LN510@OverlapReg:
	mov	ecx, DWORD PTR [ebp]
	add	ecx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, DWORD PTR _offset1$[esp+204]
	cmp	eax, edi
	jb	$LN23@OverlapReg
	ja	$LL33@OverlapReg
	cmp	ecx, DWORD PTR _x2$129611[esp+200]
	jbe	$LN23@OverlapReg

; 595  : 			}

	jmp	$LL33@OverlapReg
$LN971@OverlapReg:

; 594  : 				while(itB != itBE && (*itB).first + offset1 <= x2);

	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN523@OverlapReg
$LN949@OverlapReg:

; 596  : 
; 597  : 			// Flush span.
; 598  : 
; 599  : 			dst.push_back(tSpan(x1, x2));	

	mov	edx, DWORD PTR _x1$129610[esp+200]
	mov	eax, DWORD PTR _x1$129610[esp+204]
	mov	ecx, DWORD PTR _x2$129611[esp+200]
	mov	DWORD PTR $T349337[esp+200], edx
	lea	edx, DWORD PTR $T349337[esp+200]
	mov	DWORD PTR $T349337[esp+212], edi

; 634  : 
; 635  : 			// Flush span.
; 636  : 
; 637  : 			dst.push_back(tSpan(x1, x2));	

	mov	edi, DWORD PTR _dst$[esp+196]
	push	edx
	mov	DWORD PTR $T349337[esp+208], eax
	mov	DWORD PTR $T349337[esp+212], ecx
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
	mov	edi, DWORD PTR _itB$[esp+200]
	mov	ebx, DWORD PTR _offset1$[esp+204]
	jmp	$LN1014@OverlapReg
$LN34@OverlapReg:

; 600  : 		}
; 601  : 		else
; 602  : 		{
; 603  : 			// A span is earlier.  Use it.
; 604  : 
; 605  : 			unsigned __int64 x1 = (*itA).first;

	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	jne	$LN970@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN545@OverlapReg:
	cmp	esi, DWORD PTR [eax+16]
	jb	SHORT $LN532@OverlapReg
	call	__invalid_parameter_noinfo
$LN532@OverlapReg:
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR _x1$129637[esp+200], eax

; 606  : 			unsigned __int64 x2 = (*itA).second;

	mov	eax, DWORD PTR _itA$[esp+200]
	mov	DWORD PTR _x1$129637[esp+204], ecx
	test	eax, eax
	jne	$LN969@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN565@OverlapReg:
	cmp	esi, DWORD PTR [eax+16]
	jb	SHORT $LN552@OverlapReg
	call	__invalid_parameter_noinfo
$LN552@OverlapReg:
	mov	esi, DWORD PTR _itA$[esp+204]

; 607  : 
; 608  : 			++itA;

	mov	eax, DWORD PTR _itA$[esp+200]
	mov	edx, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [esi+12]
	mov	DWORD PTR _x2$129638[esp+200], edx
	mov	DWORD PTR _x2$129638[esp+204], edi
	test	eax, eax
	jne	$LN968@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN585@OverlapReg:
	cmp	esi, DWORD PTR [eax+16]
	jb	SHORT $LN572@OverlapReg
	call	__invalid_parameter_noinfo
$LN572@OverlapReg:
	add	esi, 16					; 00000010H
	mov	DWORD PTR _itA$[esp+204], esi
$LL18@OverlapReg:

; 609  : 
; 610  : 			// A spans don't overlap, so begin merge loop with B first.
; 611  : 
; 612  : 			for(;;)
; 613  : 			{
; 614  : 				// If we run out of B spans or the B span doesn't overlap,
; 615  : 				// then the next A span can't either (because A spans don't
; 616  : 				// overlap) and we exit.
; 617  : 
; 618  : 				if(itB == itBE || (*itB).first + offset1 > x2)

	mov	esi, DWORD PTR _itB$[esp+200]
	test	esi, esi
	je	SHORT $LN591@OverlapReg
	cmp	esi, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN590@OverlapReg
$LN591@OverlapReg:
	call	__invalid_parameter_noinfo
$LN590@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	$LN951@OverlapReg
	test	esi, esi
	jne	$LN967@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN616@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN603@OverlapReg
	call	__invalid_parameter_noinfo
$LN603@OverlapReg:
	mov	ecx, DWORD PTR [ebp]
	add	ecx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, DWORD PTR _offset1$[esp+204]
	cmp	eax, edi
	ja	$LN951@OverlapReg
	jb	SHORT $LL14@OverlapReg
	cmp	ecx, DWORD PTR _x2$129638[esp+200]
	ja	$LN951@OverlapReg
	npad	4
$LL14@OverlapReg:

; 619  : 					break;
; 620  : 
; 621  : 				do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	ebx, DWORD PTR _itB$[esp+200]
	mov	esi, ebp
	test	ebx, ebx
	jne	SHORT $LN966@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN638@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN625@OverlapReg
	call	__invalid_parameter_noinfo
$LN625@OverlapReg:
	add	ebp, 16					; 00000010H
	test	ebx, ebx
	jne	SHORT $LN965@OverlapReg
	call	__invalid_parameter_noinfo
$LN658@OverlapReg:
	cmp	esi, DWORD PTR [ebx+16]
	jb	SHORT $LN645@OverlapReg
	call	__invalid_parameter_noinfo
$LN645@OverlapReg:
	mov	ecx, DWORD PTR [esi+8]
	add	ecx, DWORD PTR _offset2$[esp+200]
	mov	eax, DWORD PTR [esi+12]
	adc	eax, DWORD PTR _offset2$[esp+204]
	mov	DWORD PTR $T349338[esp+200], ecx
	mov	DWORD PTR $T349338[esp+204], eax
	cmp	edi, eax
	ja	SHORT $LN663@OverlapReg
	jb	SHORT $LN998@OverlapReg
	cmp	DWORD PTR _x2$129638[esp+200], ecx
	jae	SHORT $LN663@OverlapReg
$LN998@OverlapReg:
	lea	eax, DWORD PTR $T349338[esp+200]
	jmp	SHORT $LN664@OverlapReg
$LN970@OverlapReg:

; 600  : 		}
; 601  : 		else
; 602  : 		{
; 603  : 			// A span is earlier.  Use it.
; 604  : 
; 605  : 			unsigned __int64 x1 = (*itA).first;

	mov	eax, DWORD PTR [eax]
	jmp	$LN545@OverlapReg
$LN969@OverlapReg:

; 606  : 			unsigned __int64 x2 = (*itA).second;

	mov	eax, DWORD PTR [eax]
	jmp	$LN565@OverlapReg
$LN968@OverlapReg:

; 607  : 
; 608  : 			++itA;

	mov	eax, DWORD PTR [eax]
	jmp	$LN585@OverlapReg
$LN967@OverlapReg:

; 609  : 
; 610  : 			// A spans don't overlap, so begin merge loop with B first.
; 611  : 
; 612  : 			for(;;)
; 613  : 			{
; 614  : 				// If we run out of B spans or the B span doesn't overlap,
; 615  : 				// then the next A span can't either (because A spans don't
; 616  : 				// overlap) and we exit.
; 617  : 
; 618  : 				if(itB == itBE || (*itB).first + offset1 > x2)

	mov	eax, DWORD PTR [esi]
	jmp	$LN616@OverlapReg
$LN966@OverlapReg:

; 619  : 					break;
; 620  : 
; 621  : 				do {x2 = _MAX(x2, (*itB++).second + offset2);}

	mov	eax, DWORD PTR [ebx]
	jmp	SHORT $LN638@OverlapReg
$LN965@OverlapReg:
	mov	ebx, DWORD PTR [ebx]
	jmp	SHORT $LN658@OverlapReg
$LN663@OverlapReg:
	lea	eax, DWORD PTR _x2$129638[esp+200]
$LN664@OverlapReg:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$129638[esp+200], ecx
	mov	edi, DWORD PTR [eax+4]

; 622  : 				while(itB != itBE && (*itB).first + offset1 <= x2);

	mov	eax, DWORD PTR _itB$[esp+200]
	mov	DWORD PTR _x2$129638[esp+204], edi
	test	eax, eax
	je	SHORT $LN670@OverlapReg
	cmp	eax, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN669@OverlapReg
$LN670@OverlapReg:
	call	__invalid_parameter_noinfo
$LN669@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	SHORT $LN11@OverlapReg
	mov	eax, DWORD PTR _itB$[esp+200]
	test	eax, eax
	jne	$LN964@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN695@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN682@OverlapReg
	call	__invalid_parameter_noinfo
$LN682@OverlapReg:
	mov	ecx, DWORD PTR [ebp]
	add	ecx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, DWORD PTR _offset1$[esp+204]
	cmp	eax, edi
	jb	$LL14@OverlapReg
	ja	SHORT $LN11@OverlapReg
	cmp	ecx, DWORD PTR _x2$129638[esp+200]
	jbe	$LL14@OverlapReg
$LN11@OverlapReg:

; 623  : 
; 624  : 				// If we run out of A spans or the A span doesn't overlap,
; 625  : 				// then the next B span can't either (because B spans don't
; 626  : 				// overlap) and we exit.
; 627  : 
; 628  : 				if(itA == itAE || (*itA).first > x2)

	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	je	SHORT $LN701@OverlapReg
	cmp	eax, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN700@OverlapReg
$LN701@OverlapReg:
	call	__invalid_parameter_noinfo
$LN700@OverlapReg:
	mov	edx, DWORD PTR $T349727[esp+200]
	cmp	DWORD PTR _itA$[esp+204], edx
	je	$LN951@OverlapReg
	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	jne	$LN963@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN726@OverlapReg:
	mov	ecx, DWORD PTR _itA$[esp+204]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN713@OverlapReg
	call	__invalid_parameter_noinfo
$LN713@OverlapReg:
	mov	edx, DWORD PTR _itA$[esp+204]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, edi
	ja	$LN951@OverlapReg
	jb	SHORT $LN8@OverlapReg
	mov	ecx, edx
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _x2$129638[esp+200]
	ja	$LN951@OverlapReg
$LN8@OverlapReg:

; 629  : 					break;
; 630  : 
; 631  : 				do {x2 = _MAX(x2, (*itA++).second);}

	mov	esi, DWORD PTR _itA$[esp+200]
	mov	ebx, DWORD PTR _itA$[esp+204]
	test	esi, esi
	jne	$LN962@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN748@OverlapReg:
	mov	ecx, DWORD PTR _itA$[esp+204]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN735@OverlapReg
	call	__invalid_parameter_noinfo
$LN735@OverlapReg:
	add	DWORD PTR _itA$[esp+204], 16		; 00000010H
	test	esi, esi
	jne	$LN961@OverlapReg
	call	__invalid_parameter_noinfo
$LN768@OverlapReg:
	cmp	ebx, DWORD PTR [esi+16]
	jb	SHORT $LN755@OverlapReg
	call	__invalid_parameter_noinfo
$LN755@OverlapReg:
	cmp	edi, DWORD PTR [ebx+12]
	lea	eax, DWORD PTR [ebx+8]
	ja	SHORT $LN773@OverlapReg
	jb	SHORT $LN774@OverlapReg
	mov	edx, DWORD PTR _x2$129638[esp+200]
	cmp	edx, DWORD PTR [eax]
	jb	SHORT $LN774@OverlapReg
$LN773@OverlapReg:
	lea	eax, DWORD PTR _x2$129638[esp+200]
$LN774@OverlapReg:
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x2$129638[esp+200], ecx
	mov	edi, DWORD PTR [eax+4]

; 632  : 				while(itA != itAE && (*itA).first <= x2);

	mov	eax, DWORD PTR _itA$[esp+200]
	mov	DWORD PTR _x2$129638[esp+204], edi
	test	eax, eax
	je	SHORT $LN780@OverlapReg
	cmp	eax, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN779@OverlapReg
$LN780@OverlapReg:
	call	__invalid_parameter_noinfo
$LN779@OverlapReg:
	mov	edx, DWORD PTR _itA$[esp+204]
	cmp	edx, DWORD PTR $T349727[esp+200]
	je	$LL18@OverlapReg
	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	jne	SHORT $LN960@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN805@OverlapReg:
	mov	ecx, DWORD PTR _itA$[esp+204]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN792@OverlapReg
	call	__invalid_parameter_noinfo
$LN792@OverlapReg:
	mov	eax, DWORD PTR _itA$[esp+204]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, edi
	jb	$LN8@OverlapReg
	ja	$LL18@OverlapReg
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR _x2$129638[esp+200]
	jbe	$LN8@OverlapReg

; 633  : 			}

	jmp	$LL18@OverlapReg
$LN964@OverlapReg:

; 622  : 				while(itB != itBE && (*itB).first + offset1 <= x2);

	mov	eax, DWORD PTR [eax]
	jmp	$LN695@OverlapReg
$LN963@OverlapReg:

; 623  : 
; 624  : 				// If we run out of A spans or the A span doesn't overlap,
; 625  : 				// then the next B span can't either (because B spans don't
; 626  : 				// overlap) and we exit.
; 627  : 
; 628  : 				if(itA == itAE || (*itA).first > x2)

	mov	eax, DWORD PTR [eax]
	jmp	$LN726@OverlapReg
$LN962@OverlapReg:

; 629  : 					break;
; 630  : 
; 631  : 				do {x2 = _MAX(x2, (*itA++).second);}

	mov	eax, DWORD PTR [esi]
	jmp	$LN748@OverlapReg
$LN961@OverlapReg:
	mov	esi, DWORD PTR [esi]
	jmp	$LN768@OverlapReg
$LN960@OverlapReg:

; 632  : 				while(itA != itAE && (*itA).first <= x2);

	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN805@OverlapReg
$LN951@OverlapReg:

; 634  : 
; 635  : 			// Flush span.
; 636  : 
; 637  : 			dst.push_back(tSpan(x1, x2));	

	mov	ecx, DWORD PTR _x1$129637[esp+200]
	mov	edx, DWORD PTR _x1$129637[esp+204]
	mov	eax, DWORD PTR _x2$129638[esp+200]
	mov	DWORD PTR $T349341[esp+200], ecx
	lea	ecx, DWORD PTR $T349341[esp+200]
	mov	DWORD PTR $T349341[esp+212], edi
	mov	edi, DWORD PTR _dst$[esp+196]
	push	ecx
	mov	DWORD PTR $T349341[esp+208], edx
	mov	DWORD PTR $T349341[esp+212], eax
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
	mov	edi, DWORD PTR _itB$[esp+200]
	mov	ebx, DWORD PTR _offset1$[esp+204]
	jmp	$LN1014@OverlapReg
$LL4@OverlapReg:

; 638  : 		}
; 639  : 	}
; 640  : 
; 641  : 	// Copy over leftover spans.
; 642  : 
; 643  : 	while(itA != itAE)

	mov	eax, DWORD PTR _itA$[esp+200]
	test	eax, eax
	je	SHORT $LN815@OverlapReg
	cmp	eax, DWORD PTR _itAE$[esp+200]
	je	SHORT $LN814@OverlapReg
$LN815@OverlapReg:
	call	__invalid_parameter_noinfo
$LN814@OverlapReg:
	cmp	esi, DWORD PTR $T349727[esp+200]
	je	SHORT $LL2@OverlapReg

; 644  : 		dst.push_back(*itA++);

	mov	esi, DWORD PTR _itA$[esp+200]
	mov	edi, DWORD PTR _itA$[esp+204]
	mov	ebx, edi
	test	esi, esi
	jne	SHORT $LN959@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN842@OverlapReg:
	cmp	edi, DWORD PTR [eax+16]
	jb	SHORT $LN829@OverlapReg
	call	__invalid_parameter_noinfo
$LN829@OverlapReg:
	add	edi, 16					; 00000010H
	mov	DWORD PTR _itA$[esp+204], edi
	test	esi, esi
	jne	SHORT $LN958@OverlapReg
	call	__invalid_parameter_noinfo
$LN862@OverlapReg:
	cmp	ebx, DWORD PTR [esi+16]
	jb	SHORT $LN849@OverlapReg
	call	__invalid_parameter_noinfo
$LN849@OverlapReg:
	mov	edi, DWORD PTR _dst$[esp+196]
	push	ebx
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back
	mov	edi, DWORD PTR _itB$[esp+200]
	mov	esi, DWORD PTR _itA$[esp+204]
	jmp	SHORT $LL4@OverlapReg
$LN959@OverlapReg:
	mov	eax, DWORD PTR [esi]
	jmp	SHORT $LN842@OverlapReg
$LN958@OverlapReg:
	mov	esi, DWORD PTR [esi]
	jmp	SHORT $LN862@OverlapReg
	npad	7
$LL2@OverlapReg:

; 645  : 
; 646  : 	while(itB != itBE)

	test	edi, edi
	je	SHORT $LN870@OverlapReg
	cmp	edi, DWORD PTR _itBE$[esp+200]
	je	SHORT $LN869@OverlapReg
$LN870@OverlapReg:
	call	__invalid_parameter_noinfo
$LN869@OverlapReg:
	cmp	ebp, DWORD PTR $T349873[esp+200]
	je	$LN1@OverlapReg

; 647  : 	{
; 648  : 		dst.push_back(tSpan((*itB).first + offset1, (*itB).second + offset2));	

	test	edi, edi
	jne	$LN957@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN895@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN882@OverlapReg
	call	__invalid_parameter_noinfo
$LN882@OverlapReg:
	mov	esi, DWORD PTR [ebp+8]
	add	esi, DWORD PTR _offset2$[esp+200]
	mov	ebx, DWORD PTR [ebp+12]
	adc	ebx, DWORD PTR _offset2$[esp+204]
	test	edi, edi
	jne	SHORT $LN956@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN915@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN902@OverlapReg
	call	__invalid_parameter_noinfo
$LN902@OverlapReg:
	mov	edx, DWORD PTR [ebp]
	add	edx, DWORD PTR _offset1$[esp+200]
	mov	eax, DWORD PTR [ebp+4]
	adc	eax, DWORD PTR _offset1$[esp+204]
	mov	edi, DWORD PTR _dst$[esp+196]
	lea	ecx, DWORD PTR $T349343[esp+200]
	push	ecx
	mov	DWORD PTR $T349343[esp+204], edx
	mov	DWORD PTR $T349343[esp+208], eax
	mov	DWORD PTR $T349343[esp+212], esi
	mov	DWORD PTR $T349343[esp+216], ebx
	call	?push_back@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::push_back

; 649  : 		++itB;

	cmp	DWORD PTR _itB$[esp+200], 0
	jne	SHORT $LN955@OverlapReg
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN937@OverlapReg:
	cmp	ebp, DWORD PTR [eax+16]
	jb	SHORT $LN924@OverlapReg
	call	__invalid_parameter_noinfo
$LN924@OverlapReg:

; 650  : 	}

	mov	edi, DWORD PTR _itB$[esp+200]
	add	ebp, 16					; 00000010H
	jmp	$LL2@OverlapReg
$LN957@OverlapReg:

; 647  : 	{
; 648  : 		dst.push_back(tSpan((*itB).first + offset1, (*itB).second + offset2));	

	mov	eax, DWORD PTR [edi]
	jmp	$LN895@OverlapReg
$LN956@OverlapReg:
	mov	eax, DWORD PTR [edi]
	jmp	SHORT $LN915@OverlapReg
$LN955@OverlapReg:

; 649  : 		++itB;

	mov	edx, DWORD PTR _itB$[esp+200]
	mov	eax, DWORD PTR [edx]
	jmp	SHORT $LN937@OverlapReg
$LN1@OverlapReg:

; 651  : }

	lea	eax, DWORD PTR _temp$[esp+200]
	push	eax
	mov	DWORD PTR __$EHRec$[esp+212], -1
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	mov	ecx, DWORD PTR __$EHRec$[esp+200]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 184				; 000000b8H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z$1:
	lea	eax, DWORD PTR _temp$[ebp]
	jmp	??1?$_Vector_val@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ
__unwindfunclet$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z$0:
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	??1?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::~vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	ret	0
__ehhandler$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z:
	mov	eax, OFFSET __ehfuncinfo$?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z ENDP ; Rasterizer::_OverlapRegion
PUBLIC	?ScanConvert@Rasterizer@@QAE_NXZ		; Rasterizer::ScanConvert
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
xdata$x	SEGMENT
__unwindtable$?ScanConvert@Rasterizer@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$4
__ehfuncinfo$?ScanConvert@Rasterizer@@QAE_NXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ScanConvert@Rasterizer@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Ogtpy
; File d:\-=svn=-\svplayer\src\subtitles\rasterizer.cpp
xdata$x	ENDS
;	COMDAT ?ScanConvert@Rasterizer@@QAE_NXZ
_TEXT	SEGMENT
_count$129166 = -108					; size = 4
_maxx$ = -108						; size = 4
$T353731 = -104						; size = 1
_lastmoveto$ = -104					; size = 4
_x2$129350 = -100					; size = 4
_maxy$ = -100						; size = 4
tv2105 = -96						; size = 4
$T353433 = -96						; size = 4
__Cat$353734 = -92					; size = 1
tv406 = -92						; size = 4
_x1$129349 = -92					; size = 4
_miny$ = -92						; size = 4
_y$ = -88						; size = 8
$T352481 = -80						; size = 8
$T352303 = -80						; size = 8
_itX1$129341 = -80					; size = 8
$T352484 = -72						; size = 8
$T352306 = -72						; size = 8
_itX2$129347 = -72					; size = 8
$T353720 = -64						; size = 8
$T352122 = -56						; size = 16
_heap$ = -36						; size = 24
__$EHRec$ = -12						; size = 12
?ScanConvert@Rasterizer@@QAE_NXZ PROC			; Rasterizer::ScanConvert, COMDAT
; _this$ = ecx

; 350  : {

	push	-1
	push	__ehhandler$?ScanConvert@Rasterizer@@QAE_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 96					; 00000060H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx

; 351  : 	int lastmoveto = -1;
; 352  : 	int i;
; 353  : 
; 354  : 	// Drop any outlines we may have.
; 355  : 
; 356  : 	mOutline.clear();

	mov	ebx, DWORD PTR [esi+60]
	push	edi
	lea	edi, DWORD PTR [esi+44]
	mov	DWORD PTR _lastmoveto$[esp+124], -1
	cmp	DWORD PTR [edi+12], ebx
	jbe	SHORT $LN56@ScanConver
	call	__invalid_parameter_noinfo
$LN56@ScanConver:
	mov	ebp, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR $T352303[esp+124], eax
	cmp	ebp, DWORD PTR [edi+16]
	jbe	SHORT $LN75@ScanConver
	call	__invalid_parameter_noinfo
$LN75@ScanConver:
	mov	ecx, DWORD PTR $T352303[esp+124]
	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ecx
	push	ebp
	push	eax
	lea	edx, DWORD PTR $T352306[esp+140]
	push	edx
	push	edi
	call	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase

; 357  : 	mWideOutline.clear();

	mov	ebx, DWORD PTR [esi+84]
	cmp	DWORD PTR [esi+80], ebx
	lea	edi, DWORD PTR [esi+68]
	jbe	SHORT $LN96@ScanConver
	call	__invalid_parameter_noinfo
$LN96@ScanConver:
	mov	ebp, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR $T352481[esp+124], eax
	cmp	ebp, DWORD PTR [edi+16]
	jbe	SHORT $LN115@ScanConver
	call	__invalid_parameter_noinfo
$LN115@ScanConver:
	mov	ecx, DWORD PTR $T352481[esp+124]
	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ecx
	push	ebp
	push	eax
	lea	edx, DWORD PTR $T352484[esp+140]
	push	edx
	push	edi
	call	?erase@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@0@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::erase

; 358  : 	mWideBorder = 0;
; 359  : 
; 360  : 	// Determine bounding box
; 361  : 
; 362  : 	if(!mPathPoints)

	mov	ebp, DWORD PTR [esi+32]
	xor	edi, edi
	mov	DWORD PTR [esi+92], edi
	cmp	ebp, edi
	jne	SHORT $LN44@ScanConver

; 363  : 	{
; 364  : 		mPathOffsetX = mPathOffsetY = 0;

	mov	DWORD PTR [esi+128], edi
	mov	DWORD PTR [esi+124], edi

; 365  : 		mWidth = mHeight = 0;

	mov	DWORD PTR [esi+40], edi
	mov	DWORD PTR [esi+36], edi

; 366  : 		return 0;

	xor	al, al

; 539  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+124]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 108				; 0000006cH
	ret	0
$LN44@ScanConver:

; 367  : 	}
; 368  : 
; 369  : 	int minx = INT_MAX;
; 370  : 	int miny = INT_MAX;
; 371  : 	int maxx = INT_MIN;
; 372  : 	int maxy = INT_MIN;
; 373  : 
; 374  : 	for(i=0; i<mPathPoints; ++i)

	cmp	ebp, edi
	mov	edx, -2147483648			; 80000000H
	mov	eax, 2147483647				; 7fffffffH
	mov	ecx, eax
	mov	DWORD PTR _maxx$[esp+124], edx
	mov	DWORD PTR _maxy$[esp+124], edx
	jle	SHORT $LN41@ScanConver
	mov	ebx, DWORD PTR [esi+28]
	mov	edx, DWORD PTR [esi+32]
	mov	DWORD PTR tv2105[esp+124], ebx
	mov	DWORD PTR tv406[esp+124], edx
	npad	4
$LL43@ScanConver:

; 375  : 	{
; 376  : 		int ix = mpPathPoints[i].x;

	mov	edi, DWORD PTR [ebx]

; 377  : 		int iy = mpPathPoints[i].y;
; 378  : 
; 379  : 		if(ix < minx) minx = ix;

	cmp	edi, eax
	mov	ebx, DWORD PTR [ebx+4]
	jge	SHORT $LN40@ScanConver
	mov	eax, edi
$LN40@ScanConver:

; 380  : 		if(ix > maxx) maxx = ix;

	cmp	edi, DWORD PTR _maxx$[esp+124]
	jle	SHORT $LN39@ScanConver
	mov	DWORD PTR _maxx$[esp+124], edi
$LN39@ScanConver:

; 381  : 		if(iy < miny) miny = iy;

	cmp	ebx, ecx
	jge	SHORT $LN38@ScanConver
	mov	ecx, ebx
$LN38@ScanConver:

; 382  : 		if(iy > maxy) maxy = iy;

	mov	edx, DWORD PTR _maxy$[esp+124]
	cmp	ebx, edx
	jle	SHORT $LN42@ScanConver
	mov	edx, ebx
	mov	DWORD PTR _maxy$[esp+124], edx
$LN42@ScanConver:
	mov	ebx, DWORD PTR tv2105[esp+124]
	add	ebx, 8
	sub	DWORD PTR tv406[esp+124], 1
	mov	DWORD PTR tv2105[esp+124], ebx
	jne	SHORT $LL43@ScanConver
$LN41@ScanConver:

; 383  : 	}
; 384  : 
; 385  : 	minx = (minx >> 3) & ~7;

	sar	eax, 3
	and	eax, -8					; fffffff8H

; 386  : 	miny = (miny >> 3) & ~7;

	sar	ecx, 3
	and	ecx, -8					; fffffff8H
	mov	ebx, eax

; 387  : 	maxx = (maxx + 7) >> 3;

	mov	eax, DWORD PTR _maxx$[esp+124]
	mov	edi, ecx
	add	eax, 7

; 388  : 	maxy = (maxy + 7) >> 3;

	lea	ecx, DWORD PTR [edx+7]
	sar	eax, 3
	sar	ecx, 3

; 389  : 
; 390  : 	for(i=0; i<mPathPoints; ++i)

	xor	edx, edx
	mov	DWORD PTR _miny$[esp+124], edi
	test	ebp, ebp
	jle	SHORT $LN525@ScanConver
	npad	11
$LL36@ScanConver:
	mov	edi, DWORD PTR [esi+28]
	lea	edi, DWORD PTR [edi+edx*8]

; 391  : 	{
; 392  : 		mpPathPoints[i].x -= minx*8;

	lea	ebp, DWORD PTR [ebx*8]
	sub	DWORD PTR [edi], ebp

; 393  : 		mpPathPoints[i].y -= miny*8;

	mov	ebp, DWORD PTR _miny$[esp+124]
	mov	edi, DWORD PTR [esi+28]
	add	ebp, ebp
	add	ebp, ebp
	lea	edi, DWORD PTR [edi+edx*8+4]
	add	ebp, ebp
	sub	DWORD PTR [edi], ebp
	inc	edx
	cmp	edx, DWORD PTR [esi+32]
	jl	SHORT $LL36@ScanConver

; 389  : 
; 390  : 	for(i=0; i<mPathPoints; ++i)

	mov	edi, DWORD PTR _miny$[esp+124]
$LN525@ScanConver:
	xor	ebp, ebp

; 394  : 	}
; 395  : 
; 396  : 	if(minx > maxx || miny > maxy)

	cmp	ebx, eax
	jg	$LN32@ScanConver
	cmp	edi, ecx
	jg	$LN32@ScanConver

; 401  : 		return true;
; 402  : 	}
; 403  : 
; 404  : 	mWidth = maxx + 1 - minx;

	sub	eax, ebx

; 405  : 	mHeight = maxy + 1 - miny;

	sub	ecx, edi
	inc	eax
	inc	ecx

; 406  : 
; 407  : 	mPathOffsetX = minx;
; 408  : 	mPathOffsetY = miny;
; 409  : 
; 410  : 	// Initialize edge buffer.  We use edge 0 as a sentinel.
; 411  : 
; 412  : 	mEdgeNext = 1;
; 413  : 	mEdgeHeapSize = 2048;
; 414  : 	mpEdgeBuffer = (Edge*)malloc(sizeof(Edge)*mEdgeHeapSize);

	push	16384					; 00004000H
	mov	DWORD PTR [esi+36], eax
	mov	DWORD PTR [esi+40], ecx
	mov	DWORD PTR [esi+124], ebx
	mov	DWORD PTR [esi+128], edi
	mov	DWORD PTR [esi+104], 1
	mov	DWORD PTR [esi+100], 2048		; 00000800H
	call	_malloc
	mov	DWORD PTR [esi+96], eax

; 415  : 
; 416  : 	// Initialize scanline list.
; 417  : 
; 418  : 	mpScanBuffer = new unsigned int[mHeight];

	mov	eax, DWORD PTR [esi+40]
	xor	ecx, ecx
	add	esp, 4
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]

; 419  : 	memset(mpScanBuffer, 0, mHeight*sizeof(unsigned int));

	mov	ecx, DWORD PTR [esi+40]
	add	ecx, ecx
	add	esp, 4
	add	ecx, ecx
	push	ecx
	push	ebp
	push	eax
	mov	DWORD PTR [esi+108], eax
	call	_memset
	add	esp, 12					; 0000000cH

; 420  : 
; 421  : 	// Scan convert the outline.  Yuck, Bezier curves....
; 422  : 
; 423  : 	// Unfortunately, Windows 95/98 GDI has a bad habit of giving us text
; 424  : 	// paths with all but the first figure left open, so we can't rely
; 425  : 	// on the PT_CLOSEFIGURE flag being used appropriately.
; 426  : 
; 427  : 	fFirstSet = false;
; 428  : 	firstp.x = firstp.y = 0;
; 429  : 	lastp.x = lastp.y = 0;
; 430  : 
; 431  : 	for(i=0; i<mPathPoints; ++i)

	xor	edi, edi
	cmp	DWORD PTR [esi+32], ebp
	mov	BYTE PTR [esi+4], 0
	mov	DWORD PTR [esi+12], ebp
	mov	DWORD PTR [esi+8], ebp
	mov	DWORD PTR [esi+20], ebp
	mov	DWORD PTR [esi+16], ebp
	jle	$LN15@ScanConver

; 401  : 		return true;
; 402  : 	}
; 403  : 
; 404  : 	mWidth = maxx + 1 - minx;

	or	ebx, -1
$LL31@ScanConver:

; 432  : 	{
; 433  : 		BYTE t = mpPathTypes[i] & ~PT_CLOSEFIGURE;

	mov	edx, DWORD PTR [esi+24]
	mov	al, BYTE PTR [edi+edx]
	and	al, 254					; 000000feH

; 434  : 
; 435  : 		switch(t)

	movzx	eax, al
	add	eax, -2					; fffffffeH
	cmp	eax, 250				; 000000faH
	ja	$LN30@ScanConver
	movzx	eax, BYTE PTR $LN523@ScanConver[eax]
	jmp	DWORD PTR $LN531@ScanConver[eax*4]
$LN26@ScanConver:

; 436  : 		{
; 437  : 		case PT_MOVETO:
; 438  : 			if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[esp+124], ebp
	jl	SHORT $LN25@ScanConver
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+20]
	cmp	DWORD PTR [esi+8], eax
	jne	SHORT $LN132@ScanConver
	cmp	DWORD PTR [esi+12], ecx
	je	SHORT $LN25@ScanConver
$LN132@ScanConver:

; 439  : 				_EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+20]
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	edx
	push	eax
	push	ecx
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine
$LN25@ScanConver:

; 440  : 			lastmoveto = i;
; 441  : 			fFirstSet = false;
; 442  : 			lastp = mpPathPoints[i];

	mov	eax, DWORD PTR [esi+28]
	mov	BYTE PTR [esi+4], 0
	mov	edx, DWORD PTR [eax+edi*8]
	mov	DWORD PTR [esi+16], edx
	mov	eax, DWORD PTR [eax+edi*8+4]
	mov	DWORD PTR _lastmoveto$[esp+124], edi
	mov	DWORD PTR [esi+20], eax

; 443  : 			break;

	jmp	SHORT $LN30@ScanConver
$LN23@ScanConver:

; 444  : 		case PT_MOVETONC:
; 445  : 			break;
; 446  : 		case PT_LINETO:
; 447  : 			if(mPathPoints - (i-1) >= 2) _EvaluateLine(i-1, i);

	mov	ecx, DWORD PTR [esi+32]
	sub	ecx, edi
	inc	ecx
	cmp	ecx, 2
	jl	SHORT $LN30@ScanConver
	mov	edx, DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [edx+edi*8+4]
	lea	eax, DWORD PTR [edx+edi*8]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [eax-4]
	push	edx
	mov	edx, DWORD PTR [eax-8]
	push	ecx
	push	edx
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine

; 448  : 			break;

	jmp	SHORT $LN30@ScanConver
$LN21@ScanConver:

; 449  : 		case PT_BEZIERTO:
; 450  : 			if(mPathPoints - (i-1) >= 4) _EvaluateBezier(i-1, false);

	mov	eax, DWORD PTR [esi+32]
	sub	eax, edi
	inc	eax
	cmp	eax, 4
	jl	SHORT $LN20@ScanConver
	push	ebp
	mov	edx, ebx
	call	?_EvaluateBezier@Rasterizer@@AAEXH_N@Z	; Rasterizer::_EvaluateBezier
$LN20@ScanConver:

; 451  : 			i += 2;

	add	edi, 2
	add	ebx, 2

; 452  : 			break;

	jmp	SHORT $LN30@ScanConver
$LN19@ScanConver:

; 453  : 		case PT_BSPLINETO:
; 454  : 			if(mPathPoints - (i-1) >= 4) _EvaluateBezier(i-1, true);

	mov	ecx, DWORD PTR [esi+32]
	sub	ecx, edi
	inc	ecx
	cmp	ecx, 4
	jl	SHORT $LN18@ScanConver
	push	1
	mov	edx, ebx
	call	?_EvaluateBezier@Rasterizer@@AAEXH_N@Z	; Rasterizer::_EvaluateBezier
$LN18@ScanConver:

; 455  : 			i += 2;

	add	edi, 2
	add	ebx, 2

; 456  : 			break;

	jmp	SHORT $LN30@ScanConver
$LN17@ScanConver:

; 457  : 		case PT_BSPLINEPATCHTO:
; 458  : 			if(mPathPoints - (i-3) >= 4) _EvaluateBezier(i-3, true);

	mov	edx, DWORD PTR [esi+32]
	sub	edx, edi
	add	edx, 3
	cmp	edx, 4
	jl	SHORT $LN30@ScanConver
	push	1
	lea	edx, DWORD PTR [edi-3]
	call	?_EvaluateBezier@Rasterizer@@AAEXH_N@Z	; Rasterizer::_EvaluateBezier
$LN30@ScanConver:
	inc	edi
	inc	ebx
	cmp	edi, DWORD PTR [esi+32]
	jl	$LL31@ScanConver

; 459  : 			break;
; 460  : 		}
; 461  : 	}
; 462  : 
; 463  : 	if(lastmoveto >= 0 && firstp != lastp)

	cmp	DWORD PTR _lastmoveto$[esp+124], ebp
	jl	SHORT $LN15@ScanConver
	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+20]
	cmp	DWORD PTR [esi+8], eax
	jne	SHORT $LN140@ScanConver
	cmp	DWORD PTR [esi+12], ecx
	je	SHORT $LN15@ScanConver
$LN140@ScanConver:

; 464  : 		_EvaluateLine(lastp.x, lastp.y, firstp.x, firstp.y);

	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+20]
	push	eax
	mov	eax, DWORD PTR [esi+16]
	push	ecx
	push	edx
	push	eax
	mov	ecx, esi
	call	?_EvaluateLine@Rasterizer@@AAEXHHHH@Z	; Rasterizer::_EvaluateLine
$LN15@ScanConver:

; 465  : 
; 466  : 	// Free the path since we don't need it anymore.
; 467  : 
; 468  : 	_TrashPath();

	mov	eax, DWORD PTR [esi+24]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	eax, DWORD PTR [esi+28]
	add	esp, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 469  : 
; 470  : 	// Convert the edges to spans.  We couldn't do this before because some of
; 471  : 	// the regions may have winding numbers >+1 and it would have been a pain
; 472  : 	// to try to adjust the spans on the fly.  We use one heap to detangle
; 473  : 	// a scanline's worth of edges from the singly-linked lists, and another
; 474  : 	// to collect the actual scans.
; 475  : 
; 476  : 	std::vector<int> heap;

	push	4
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+28], ebp
	mov	DWORD PTR [esi+32], ebp
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	cmp	eax, ebp
	je	SHORT $LN156@ScanConver
	lea	ecx, DWORD PTR _heap$[esp+124]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN157@ScanConver
$LN156@ScanConver:
	xor	eax, eax
$LN157@ScanConver:
	mov	DWORD PTR _heap$[esp+124], eax
	mov	DWORD PTR _heap$[esp+136], ebp
	mov	DWORD PTR _heap$[esp+140], ebp
	mov	DWORD PTR _heap$[esp+144], ebp
	mov	DWORD PTR __$EHRec$[esp+132], 1

; 477  : 
; 478  : 	mOutline.reserve(mEdgeNext / 2);

	mov	edx, DWORD PTR [esi+104]
	shr	edx, 1
	push	edx
	lea	ecx, DWORD PTR [esi+44]
	call	?reserve@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAEXI@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::reserve

; 479  : 
; 480  : 	__int64 y = 0;
; 481  : 
; 482  : 	for(y=0; y<mHeight; ++y)

	cmp	DWORD PTR [esi+40], ebp
	mov	DWORD PTR _y$[esp+124], ebp
	mov	DWORD PTR _y$[esp+128], ebp
	jle	$LN524@ScanConver
	npad	2
$LL14@ScanConver:

; 483  : 	{
; 484  : 		int count = 0;
; 485  : 
; 486  : 		// Detangle scanline into edge heap.
; 487  : 
; 488  : 		for(unsigned ptr = (unsigned)(mpScanBuffer[y]&0xffffffff); ptr; ptr = mpEdgeBuffer[ptr].next)

	mov	eax, DWORD PTR [esi+108]
	mov	ecx, DWORD PTR _y$[esp+124]
	mov	edi, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _count$129166[esp+124], 0
	test	edi, edi
	je	SHORT $LN9@ScanConver
	mov	eax, DWORD PTR [esi+96]
	npad	7
$LL11@ScanConver:

; 489  : 		{
; 490  : 			heap.push_back(mpEdgeBuffer[ptr].posandflag);

	lea	edx, DWORD PTR [eax+edi*8+4]
	push	edx
	lea	ecx, DWORD PTR _heap$[esp+128]
	call	?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEXABH@Z ; std::vector<int,std::allocator<int> >::push_back
	mov	eax, DWORD PTR [esi+96]
	mov	edi, DWORD PTR [eax+edi*8]
	test	edi, edi
	jne	SHORT $LL11@ScanConver
$LN9@ScanConver:

; 491  : 		}
; 492  : 
; 493  : 		// Sort edge heap.  Note that we conveniently made the opening edges
; 494  : 		// one more than closing edges at the same spot, so we won't have any
; 495  : 		// problems with abutting spans.
; 496  : 
; 497  : 		std::sort(heap.begin(), heap.end()/*begin() + heap.size()*/);

	mov	ecx, DWORD PTR _heap$[esp+140]
	mov	eax, DWORD PTR _heap$[esp+136]
	mov	ebp, ecx
	cmp	eax, ecx
	jbe	SHORT $LN262@ScanConver
	call	__invalid_parameter_noinfo
	mov	ecx, DWORD PTR _heap$[esp+140]
	mov	eax, DWORD PTR _heap$[esp+136]
$LN262@ScanConver:
	mov	ebx, DWORD PTR _heap$[esp+124]
	mov	edi, eax
	cmp	eax, ecx
	jbe	SHORT $LN281@ScanConver
	call	__invalid_parameter_noinfo
$LN281@ScanConver:
	test	ebx, ebx
	je	SHORT $LN301@ScanConver
	cmp	ebx, DWORD PTR _heap$[esp+124]
	je	SHORT $LN300@ScanConver
$LN301@ScanConver:
	call	__invalid_parameter_noinfo
$LN300@ScanConver:
	mov	eax, ebp
	sub	eax, edi
	sar	eax, 2
	push	eax
	push	ebp
	push	edi
	call	??$_Sort@PAHH@std@@YAXPAH0H@Z		; std::_Sort<int *,int>

; 498  : 
; 499  : 		// Process edges and add spans.  Since we only check for a non-zero
; 500  : 		// winding number, it doesn't matter which way the outlines go!
; 501  : 
; 502  : 		std::vector<int>::iterator itX1 = heap.begin();

	mov	ecx, DWORD PTR _heap$[esp+148]
	mov	eax, DWORD PTR _heap$[esp+152]
	add	esp, 12					; 0000000cH
	mov	ebx, ecx
	cmp	ecx, eax
	jbe	SHORT $LN327@ScanConver
	call	__invalid_parameter_noinfo
	mov	eax, DWORD PTR _heap$[esp+140]
	mov	ecx, DWORD PTR _heap$[esp+136]
$LN327@ScanConver:
	mov	edi, DWORD PTR _heap$[esp+124]
	mov	DWORD PTR _itX1$129341[esp+124], edi
	mov	DWORD PTR _itX1$129341[esp+128], ebx

; 503  : 		std::vector<int>::iterator itX2 = heap.end(); // begin() + heap.size();

	mov	DWORD PTR $T353433[esp+124], eax
	cmp	ecx, eax
	jbe	SHORT $LN346@ScanConver
	call	__invalid_parameter_noinfo
$LN346@ScanConver:
	mov	ecx, DWORD PTR _heap$[esp+124]
	mov	DWORD PTR _itX2$129347[esp+124], ecx
$LN529@ScanConver:
	mov	ebp, DWORD PTR _count$129166[esp+124]

; 504  : 
; 505  : 		int x1, x2;
; 506  : 
; 507  : 		for(; itX1 != itX2; ++itX1)

	test	edi, edi
	je	SHORT $LN384@ScanConver
	cmp	edi, DWORD PTR _itX2$129347[esp+124]
	je	SHORT $LN383@ScanConver
$LN384@ScanConver:
	call	__invalid_parameter_noinfo
$LN383@ScanConver:
	cmp	ebx, DWORD PTR $T353433[esp+124]
	je	$LN6@ScanConver

; 508  : 		{
; 509  : 			int x = *itX1;

	test	edi, edi
	jne	SHORT $LN520@ScanConver
	call	__invalid_parameter_noinfo
$LN409@ScanConver:
	cmp	ebx, DWORD PTR [edi+16]
	jb	SHORT $LN396@ScanConver
	call	__invalid_parameter_noinfo
$LN396@ScanConver:
	mov	eax, DWORD PTR [ebx]

; 510  : 
; 511  : 			if(!count) 

	test	ebp, ebp
	jne	SHORT $LN5@ScanConver

; 512  : 				x1 = (x>>1);

	mov	ecx, eax
	sar	ecx, 1
	mov	DWORD PTR _x1$129349[esp+124], ecx
$LN5@ScanConver:

; 513  : 
; 514  : 			if(x&1) 

	test	al, 1
	je	SHORT $LN4@ScanConver

; 515  : 				++count;

	inc	ebp

; 516  : 			else 

	jmp	SHORT $LN528@ScanConver
$LN520@ScanConver:

; 508  : 		{
; 509  : 			int x = *itX1;

	mov	edi, DWORD PTR [edi]
	jmp	SHORT $LN409@ScanConver
$LN4@ScanConver:

; 517  : 				--count;

	dec	ebp
$LN528@ScanConver:
	mov	DWORD PTR _count$129166[esp+124], ebp

; 518  : 
; 519  : 			if(!count)

	test	ebp, ebp
	jne	$LN7@ScanConver

; 520  : 			{
; 521  : 				x2 = (x>>1);

	sar	eax, 1

; 522  : 
; 523  : 				if(x2>x1)

	cmp	eax, DWORD PTR _x1$129349[esp+124]
	mov	DWORD PTR _x2$129350[esp+124], eax
	jle	$LN7@ScanConver

; 524  : 					mOutline.push_back(std::pair<__int64,__int64>((y<<32)+x1+0x4000000040000000i64, (y<<32)+x2+0x4000000040000000i64)); // G: damn Avery, this is evil! :)

	mov	edx, DWORD PTR _y$[esp+128]
	mov	eax, DWORD PTR _y$[esp+124]
	push	1
	push	ebp
	push	edx
	push	eax
	call	__allmul
	mov	ebp, eax
	mov	eax, DWORD PTR _x1$129349[esp+124]
	mov	ebx, edx
	cdq
	mov	ecx, eax
	mov	eax, DWORD PTR _x2$129350[esp+124]
	add	ecx, ebp
	mov	edi, edx
	adc	edi, ebx
	add	ecx, 1073741824				; 40000000H
	adc	edi, 1073741824				; 40000000H
	cdq
	add	eax, ebp
	adc	edx, ebx
	add	eax, 1073741824				; 40000000H
	mov	DWORD PTR $T352122[esp+132], eax
	mov	eax, DWORD PTR [esi+56]
	adc	edx, 1073741824				; 40000000H
	mov	DWORD PTR $T352122[esp+124], ecx
	mov	DWORD PTR $T352122[esp+128], edi
	mov	DWORD PTR $T352122[esp+136], edx
	test	eax, eax
	jne	SHORT $LN424@ScanConver
	xor	ecx, ecx
	jmp	SHORT $LN425@ScanConver
$LN424@ScanConver:
	mov	ecx, DWORD PTR [esi+64]
	sub	ecx, eax
	sar	ecx, 4
$LN425@ScanConver:
	mov	edi, DWORD PTR [esi+60]
	lea	ebx, DWORD PTR [esi+44]
	mov	edx, edi
	sub	edx, eax
	sar	edx, 4
	cmp	edx, ecx
	jae	SHORT $LN417@ScanConver
	mov	ecx, DWORD PTR __Cat$353734[esp+124]
	mov	BYTE PTR $T353731[esp+124], 0
	mov	eax, DWORD PTR $T353731[esp+124]
	push	eax
	push	ecx
	push	edi
	lea	edx, DWORD PTR $T352122[esp+136]
	mov	ecx, 1
	call	??$_Uninit_fill_n@PAU?$pair@_K_K@std@@IU12@V?$allocator@U?$pair@_K_K@std@@@2@@std@@YAXPAU?$pair@_K_K@0@IABU10@AAV?$allocator@U?$pair@_K_K@std@@@0@U_Nonscalar_ptr_iterator_tag@0@U_Range_checked_iterator_tag@0@@Z ; std::_Uninit_fill_n<std::pair<unsigned __int64,unsigned __int64> *,unsigned int,std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >
	add	esp, 12					; 0000000cH
	add	edi, 16					; 00000010H
	mov	DWORD PTR [ebx+16], edi
	jmp	SHORT $LN7@ScanConver
$LN417@ScanConver:
	cmp	eax, edi
	jbe	SHORT $LN438@ScanConver
	call	__invalid_parameter_noinfo
$LN438@ScanConver:
	mov	eax, DWORD PTR [ebx]
	push	edi
	push	eax
	lea	edx, DWORD PTR $T352122[esp+132]
	push	edx
	lea	eax, DWORD PTR $T353720[esp+136]
	push	eax
	mov	eax, ebx
	call	?insert@?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@QAE?AV?$_Vector_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@V?$_Vector_const_iterator@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@2@ABU?$pair@_K_K@2@@Z ; std::vector<std::pair<unsigned __int64,unsigned __int64>,std::allocator<std::pair<unsigned __int64,unsigned __int64> > >::insert
$LN7@ScanConver:
	mov	eax, DWORD PTR _itX1$129341[esp+124]
	test	eax, eax
	jne	SHORT $LN519@ScanConver
	call	__invalid_parameter_noinfo
	xor	eax, eax
$LN376@ScanConver:
	mov	ecx, DWORD PTR _itX1$129341[esp+128]
	cmp	ecx, DWORD PTR [eax+16]
	jb	SHORT $LN363@ScanConver

; 504  : 
; 505  : 		int x1, x2;
; 506  : 
; 507  : 		for(; itX1 != itX2; ++itX1)

	call	__invalid_parameter_noinfo
$LN363@ScanConver:
	add	DWORD PTR _itX1$129341[esp+128], 4
	mov	ebx, DWORD PTR _itX1$129341[esp+128]
	mov	edi, DWORD PTR _itX1$129341[esp+124]
	jmp	$LN529@ScanConver
$LN519@ScanConver:
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN376@ScanConver
$LN6@ScanConver:

; 525  : 			}
; 526  : 		}
; 527  : 
; 528  : 		heap.clear();

	lea	ecx, DWORD PTR _heap$[esp+124]
	call	?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ ; std::vector<int,std::allocator<int> >::clear
	add	DWORD PTR _y$[esp+124], 1
	mov	ecx, DWORD PTR _y$[esp+128]
	mov	eax, DWORD PTR [esi+40]
	adc	ecx, 0
	cdq
	cmp	ecx, edx
	mov	DWORD PTR _y$[esp+128], ecx
	jl	$LL14@ScanConver

; 479  : 
; 480  : 	__int64 y = 0;
; 481  : 
; 482  : 	for(y=0; y<mHeight; ++y)

	jg	SHORT $LN524@ScanConver
	cmp	DWORD PTR _y$[esp+124], eax
	jb	$LL14@ScanConver
$LN524@ScanConver:

; 529  : 	}
; 530  : 
; 531  : 	// Dump the edge and scan buffers, since we no longer need them.
; 532  : 
; 533  : 	free(mpEdgeBuffer);

	mov	edx, DWORD PTR [esi+96]
	push	edx
	call	_free

; 534  : 	delete [] mpScanBuffer;

	mov	esi, DWORD PTR [esi+108]
	add	esp, 4
	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 535  : 
; 536  : 	// All done!
; 537  : 
; 538  : 	return true;

	mov	DWORD PTR __$EHRec$[esp+132], 2
	mov	eax, DWORD PTR _heap$[esp+136]
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $LN497@ScanConver
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN497@ScanConver:
	mov	DWORD PTR __$EHRec$[esp+132], -1
	mov	eax, DWORD PTR _heap$[esp+124]
	push	eax
	mov	DWORD PTR _heap$[esp+140], esi
	mov	DWORD PTR _heap$[esp+144], esi
	mov	DWORD PTR _heap$[esp+148], esi
	call	??3@YAXPAX@Z				; operator delete
	jmp	SHORT $LN530@ScanConver
$LN32@ScanConver:

; 397  : 	{
; 398  : 		mWidth = mHeight = 0;
; 399  : 		mPathOffsetX = mPathOffsetY = 0;
; 400  : 		_TrashPath();

	mov	ecx, DWORD PTR [esi+24]
	push	ecx
	mov	DWORD PTR [esi+40], ebp
	mov	DWORD PTR [esi+36], ebp
	mov	DWORD PTR [esi+128], ebp
	mov	DWORD PTR [esi+124], ebp
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	edx, DWORD PTR [esi+28]
	add	esp, 4
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	mov	DWORD PTR [esi+24], ebp
	mov	DWORD PTR [esi+28], ebp
	mov	DWORD PTR [esi+32], ebp
$LN530@ScanConver:

; 539  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+128]
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebp
	mov	al, 1
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	add	esp, 108				; 0000006cH
	ret	0
	npad	1
$LN531@ScanConver:
	DD	$LN23@ScanConver
	DD	$LN21@ScanConver
	DD	$LN26@ScanConver
	DD	$LN17@ScanConver
	DD	$LN19@ScanConver
	DD	$LN30@ScanConver
$LN523@ScanConver:
	DB	0
	DB	5
	DB	1
	DB	5
	DB	2
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	3
	DB	5
	DB	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$1:
	lea	ecx, DWORD PTR _heap$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$0:
	lea	ecx, DWORD PTR _heap$[ebp]
	jmp	??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
__unwindfunclet$?ScanConvert@Rasterizer@@QAE_NXZ$4:
	lea	ecx, DWORD PTR _heap$[ebp]
	jmp	??1?$_Vector_val@HV?$allocator@H@std@@@std@@QAE@XZ
__ehhandler$?ScanConvert@Rasterizer@@QAE_NXZ:
	mov	eax, OFFSET __ehfuncinfo$?ScanConvert@Rasterizer@@QAE_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScanConvert@Rasterizer@@QAE_NXZ ENDP			; Rasterizer::ScanConvert
PUBLIC	?CreateWidenedRegion@Rasterizer@@QAE_NHH@Z	; Rasterizer::CreateWidenedRegion
; Function compile flags: /Ogtpy
;	COMDAT ?CreateWidenedRegion@Rasterizer@@QAE_NHH@Z
_TEXT	SEGMENT
tv175 = -8						; size = 4
tv184 = -4						; size = 4
tv216 = 8						; size = 4
_rx$ = 8						; size = 4
tv178 = 12						; size = 4
_ry$ = 12						; size = 4
?CreateWidenedRegion@Rasterizer@@QAE_NHH@Z PROC		; Rasterizer::CreateWidenedRegion, COMDAT
; _this$ = eax

; 654  : {

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _rx$[esp+20]
	push	edi
	mov	edi, DWORD PTR _ry$[esp+24]

; 655  : 	if(rx < 0) rx = 0;

	test	esi, esi
	jge	SHORT $LN8@CreateWide
	xor	esi, esi
	mov	DWORD PTR _rx$[esp+24], esi
$LN8@CreateWide:

; 656  : 	if(ry < 0) ry = 0;

	test	edi, edi
	jge	SHORT $LN7@CreateWide
	xor	edi, edi
	mov	DWORD PTR _ry$[esp+24], edi
$LN7@CreateWide:

; 657  : 
; 658  : 	mWideBorder = max(rx,ry);

	cmp	esi, edi
	mov	ecx, esi
	jg	SHORT $LN12@CreateWide
	mov	ecx, edi
$LN12@CreateWide:
	mov	DWORD PTR [eax+92], ecx

; 659  : 
; 660  : 	if (ry > 0)

	test	edi, edi
	jle	$LN22@CreateWide

; 661  : 	{
; 662  : 		// Do a half circle.
; 663  : 		// _OverlapRegion mirrors this so both halves are done.
; 664  : 		for(int y = -ry; y <= ry; ++y)

	mov	esi, edi
	neg	esi
	cmp	esi, edi
	jg	$LN21@CreateWide
	fild	DWORD PTR _rx$[esp+24]
	mov	ebx, edi
	imul	ebx, edi
	fstp	DWORD PTR tv175[esp+28]
	fild	DWORD PTR _ry$[esp+24]
	fstp	DWORD PTR tv178[esp+24]
	lea	ebp, DWORD PTR [eax+44]
	add	eax, 68					; 00000044H

; 665  : 		{
; 666  : 			int x = (int)(0.5 + sqrt(float(ry*ry - y*y)) * float(rx)/float(ry));
; 667  : 
; 668  : 			_OverlapRegion(mWideOutline, mOutline, x, y);

	mov	DWORD PTR tv184[esp+28], eax
$LL5@CreateWide:
	mov	eax, esi
	imul	eax, esi
	push	esi
	push	ecx
	mov	ecx, ebx
	sub	ecx, eax
	mov	DWORD PTR tv216[esp+32], ecx
	push	ecx
	fild	DWORD PTR tv216[esp+36]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	fmul	DWORD PTR tv175[esp+40]
	add	esp, 8
	fdiv	DWORD PTR tv178[esp+28]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	edx, DWORD PTR tv184[esp+32]
	push	eax
	push	edx
	mov	ecx, ebp
	call	?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z ; Rasterizer::_OverlapRegion
	inc	esi
	add	esp, 12					; 0000000cH
	cmp	esi, edi
	jle	SHORT $LL5@CreateWide

; 676  : 	}
; 677  : 
; 678  : 	return true;

	mov	al, 1

; 679  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	8
$LN22@CreateWide:

; 669  : 		}
; 670  : 	}
; 671  : 	else if (ry == 0 && rx > 0)

	jne	SHORT $LN21@CreateWide
	test	esi, esi
	jle	SHORT $LN21@CreateWide

; 672  : 	{
; 673  : 		// There are artifacts if we don't make at least two overlaps of the line, even at same Y coord
; 674  : 		_OverlapRegion(mWideOutline, mOutline, rx, 0);

	push	0
	lea	edi, DWORD PTR [eax+44]
	lea	ebx, DWORD PTR [eax+68]
	push	esi
	push	ebx
	mov	ecx, edi
	call	?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z ; Rasterizer::_OverlapRegion
	add	esp, 12					; 0000000cH

; 675  : 		_OverlapRegion(mWideOutline, mOutline, rx, 0);

	push	0
	push	esi
	push	ebx
	mov	ecx, edi
	call	?_OverlapRegion@Rasterizer@@CAXAAV?$vector@U?$pair@_K_K@std@@V?$allocator@U?$pair@_K_K@std@@@2@@std@@0HH@Z ; Rasterizer::_OverlapRegion
	add	esp, 12					; 0000000cH
$LN21@CreateWide:

; 679  : }

	pop	edi
	pop	esi
	pop	ebp
	mov	al, 1
	pop	ebx
	add	esp, 12					; 0000000cH
	ret	8
?CreateWidenedRegion@Rasterizer@@QAE_NHH@Z ENDP		; Rasterizer::CreateWidenedRegion
END
